#!/usr/bin/python3

#
# Wire
# Copyright (C) 2016 Wire Swiss GmbH
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see http://www.gnu.org/licenses/.
#

import os
import os.path
import sys
import subprocess
import argparse
import json
import re
import plistlib
from subprocess import Popen, PIPE

def update_and_merge_build_info(info, source_root, repositories):

    carthage_info_key = "CarthageBuildInfo"
    carthage_info = dict()
    merge_build_info_from_carthage(carthage_info, source_root)
    info[carthage_info_key] = carthage_info

def parse_dependency_version_numbers(source_root):
    dependencies = {}
    carfile_resolved_path = os.path.join(source_root, "../Cartfile.resolved")
    cartfile_resolved = open(carfile_resolved_path, "r")
    stripQuotes = lambda string: re.sub('"', '', string)

    for line in cartfile_resolved.readlines():
        if line.strip() == "":
            continue
        dependency = line.split()
        full_name = stripQuotes(dependency[1])
        version = stripQuotes(dependency[2])
        if full_name == "wire-avs.json":
            name = "wire-avs"
        else:
            name = full_name.split("/")[1]
        dependencies[name] = version
    return dependencies

def merge_build_info_from_carthage(build_info, source_root):
    dependencies = parse_dependency_version_numbers(source_root)
    for name, version in dependencies.items():
        build_info[name] = version

def write_property_list_to_path(plist, path):
    with open(path, 'wb') as fp:
    	plistlib.dump(plist, fp)
    
def check_environment(names):
    for name in names:
      if not name in os.environ:
          sys.stderr.write("error: {0} not found in the environment.\n".format(name))
          sys.exit(-1)

def update_info_plist(repositories, output_path=None):
    check_environment(["SRCROOT"])
    source_root = os.environ["SRCROOT"]
    sys.stderr.write("note: Using SRCROOT = {0}\n".format(source_root))

    info = dict()
    update_and_merge_build_info(info, source_root, repositories)
    write_property_list_to_path(info, output_path)
    return info

def main():
    parser = argparse.ArgumentParser(description="Add additional build info to the Info.plist")
    parser.add_argument('--output', help="The plist file to write to")
    parser.add_argument('repositories', metavar='repository', type=str, nargs='*', help="Path to repository to recorded into the build info plist.")
    args = parser.parse_args()

    print(args)

    info = update_info_plist(repositories=args.repositories, output_path=args.output)

if __name__ == "__main__":
    main()
