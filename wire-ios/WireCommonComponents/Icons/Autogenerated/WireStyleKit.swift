//
//
//  WireStyleKit.swift
//  Wire for iOS
//
//  Created by Wire Design Team on 09.07.21.
//  Copyright Â© 2021 Wire Swiss GmbH. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//

import UIKit

public class WireStyleKit: NSObject {

    //// Cache

    private struct Cache {
        static let fillColor10: UIColor = UIColor(red: 0.067, green: 0.084, blue: 0.078, alpha: 1.000)
        static var imageOfOngoingcall: UIImage?
        static var ongoingcallTargets: [AnyObject]?
        static var imageOfShieldverified: UIImage?
        static var shieldverifiedTargets: [AnyObject]?
        static var imageOfShieldnotverified: UIImage?
        static var shieldnotverifiedTargets: [AnyObject]?
        static var imageOfDegradation: UIImage?
        static var degradationTargets: [AnyObject]?
    }

    //// Colors

    @objc dynamic public class var fillColor10: UIColor { return Cache.fillColor10 }

    //// Drawing Methods

    @objc dynamic public class func drawIcon_plus_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Add Drawing
        let addPath = UIBezierPath()
        addPath.move(to: CGPoint(x: 0, y: 28))
        addPath.addLine(to: CGPoint(x: 0, y: 36))
        addPath.addLine(to: CGPoint(x: 28, y: 36))
        addPath.addLine(to: CGPoint(x: 28, y: 64))
        addPath.addLine(to: CGPoint(x: 36, y: 64))
        addPath.addLine(to: CGPoint(x: 36, y: 36))
        addPath.addLine(to: CGPoint(x: 64, y: 36))
        addPath.addLine(to: CGPoint(x: 64, y: 28))
        addPath.addLine(to: CGPoint(x: 36, y: 28))
        addPath.addLine(to: CGPoint(x: 36, y: 0))
        addPath.addLine(to: CGPoint(x: 28, y: 0))
        addPath.addLine(to: CGPoint(x: 28, y: 28))
        addPath.addLine(to: CGPoint(x: 0, y: 28))
        addPath.close()
        addPath.usesEvenOddFillRule = true
        color.setFill()
        addPath.fill()
    }

    @objc dynamic public class func drawIcon_checkmark_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Remove Drawing
        let removePath = UIBezierPath()
        removePath.move(to: CGPoint(x: 22.64, y: 55.86))
        removePath.addLine(to: CGPoint(x: 63.98, y: 13.71))
        removePath.addLine(to: CGPoint(x: 58.32, y: 8))
        removePath.addLine(to: CGPoint(x: 22.64, y: 44.44))
        removePath.addLine(to: CGPoint(x: 5.66, y: 27.32))
        removePath.addLine(to: CGPoint(x: 0, y: 33.03))
        removePath.addLine(to: CGPoint(x: 22.64, y: 55.86))
        removePath.close()
        removePath.usesEvenOddFillRule = true
        color.setFill()
        removePath.fill()
    }

    @objc dynamic public class func drawIcon_block_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Block Drawing
        let blockPath = UIBezierPath()
        blockPath.move(to: CGPoint(x: 32, y: 64))
        blockPath.addCurve(to: CGPoint(x: 0, y: 32), controlPoint1: CGPoint(x: 14.33, y: 64), controlPoint2: CGPoint(x: 0, y: 49.67))
        blockPath.addCurve(to: CGPoint(x: 32, y: 0), controlPoint1: CGPoint(x: 0, y: 14.33), controlPoint2: CGPoint(x: 14.33, y: 0))
        blockPath.addCurve(to: CGPoint(x: 64, y: 32), controlPoint1: CGPoint(x: 49.67, y: 0), controlPoint2: CGPoint(x: 64, y: 14.33))
        blockPath.addCurve(to: CGPoint(x: 32, y: 64), controlPoint1: CGPoint(x: 64, y: 49.67), controlPoint2: CGPoint(x: 49.67, y: 64))
        blockPath.close()
        blockPath.move(to: CGPoint(x: 51.56, y: 18.09))
        blockPath.addCurve(to: CGPoint(x: 56, y: 32), controlPoint1: CGPoint(x: 54.36, y: 22.02), controlPoint2: CGPoint(x: 56, y: 26.82))
        blockPath.addCurve(to: CGPoint(x: 32, y: 56), controlPoint1: CGPoint(x: 56, y: 45.25), controlPoint2: CGPoint(x: 45.25, y: 56))
        blockPath.addCurve(to: CGPoint(x: 18.09, y: 51.56), controlPoint1: CGPoint(x: 26.82, y: 56), controlPoint2: CGPoint(x: 22.02, y: 54.36))
        blockPath.addLine(to: CGPoint(x: 50.83, y: 18.83))
        blockPath.addLine(to: CGPoint(x: 51.56, y: 18.09))
        blockPath.addLine(to: CGPoint(x: 51.56, y: 18.09))
        blockPath.close()
        blockPath.move(to: CGPoint(x: 45.91, y: 12.44))
        blockPath.addCurve(to: CGPoint(x: 32, y: 8), controlPoint1: CGPoint(x: 41.98, y: 9.64), controlPoint2: CGPoint(x: 37.18, y: 8))
        blockPath.addCurve(to: CGPoint(x: 8, y: 32), controlPoint1: CGPoint(x: 18.75, y: 8), controlPoint2: CGPoint(x: 8, y: 18.75))
        blockPath.addCurve(to: CGPoint(x: 12.44, y: 45.91), controlPoint1: CGPoint(x: 8, y: 37.18), controlPoint2: CGPoint(x: 9.64, y: 41.98))
        blockPath.addLine(to: CGPoint(x: 45.17, y: 13.17))
        blockPath.addLine(to: CGPoint(x: 45.91, y: 12.44))
        blockPath.addLine(to: CGPoint(x: 45.91, y: 12.44))
        blockPath.close()
        blockPath.usesEvenOddFillRule = true
        color.setFill()
        blockPath.fill()
    }

    @objc dynamic public class func drawIcon_flipCamera_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Flip Drawing
        let flipPath = UIBezierPath()
        flipPath.move(to: CGPoint(x: 36, y: 16.19))
        flipPath.addCurve(to: CGPoint(x: 64, y: 40), controlPoint1: CGPoint(x: 51.79, y: 17.66), controlPoint2: CGPoint(x: 64, y: 27.76))
        flipPath.addCurve(to: CGPoint(x: 32, y: 64), controlPoint1: CGPoint(x: 64, y: 53.25), controlPoint2: CGPoint(x: 49.67, y: 64))
        flipPath.addCurve(to: CGPoint(x: 0, y: 40), controlPoint1: CGPoint(x: 14.33, y: 64), controlPoint2: CGPoint(x: 0, y: 53.25))
        flipPath.addCurve(to: CGPoint(x: 12, y: 21.26), controlPoint1: CGPoint(x: 0, y: 32.42), controlPoint2: CGPoint(x: 4.68, y: 25.66))
        flipPath.addLine(to: CGPoint(x: 12, y: 21.26))
        flipPath.addLine(to: CGPoint(x: 12, y: 31.3))
        flipPath.addCurve(to: CGPoint(x: 8, y: 40), controlPoint1: CGPoint(x: 9.46, y: 33.87), controlPoint2: CGPoint(x: 8, y: 36.9))
        flipPath.addCurve(to: CGPoint(x: 32, y: 56), controlPoint1: CGPoint(x: 8, y: 48.25), controlPoint2: CGPoint(x: 18.33, y: 56))
        flipPath.addCurve(to: CGPoint(x: 56, y: 40), controlPoint1: CGPoint(x: 45.67, y: 56), controlPoint2: CGPoint(x: 56, y: 48.25))
        flipPath.addCurve(to: CGPoint(x: 36, y: 24.23), controlPoint1: CGPoint(x: 56, y: 32.57), controlPoint2: CGPoint(x: 47.64, y: 25.56))
        flipPath.addLine(to: CGPoint(x: 36, y: 40))
        flipPath.addLine(to: CGPoint(x: 20, y: 20))
        flipPath.addLine(to: CGPoint(x: 36, y: 0))
        flipPath.addLine(to: CGPoint(x: 36, y: 16.19))
        flipPath.addLine(to: CGPoint(x: 36, y: 16.19))
        flipPath.close()
        flipPath.usesEvenOddFillRule = true
        color.setFill()
        flipPath.fill()
    }

    @objc dynamic public class func drawIcon_ellipsis_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// More Drawing
        let morePath = UIBezierPath()
        morePath.move(to: CGPoint(x: 8, y: 40))
        morePath.addCurve(to: CGPoint(x: 16, y: 32), controlPoint1: CGPoint(x: 12.42, y: 40), controlPoint2: CGPoint(x: 16, y: 36.42))
        morePath.addCurve(to: CGPoint(x: 8, y: 24), controlPoint1: CGPoint(x: 16, y: 27.58), controlPoint2: CGPoint(x: 12.42, y: 24))
        morePath.addCurve(to: CGPoint(x: 0, y: 32), controlPoint1: CGPoint(x: 3.58, y: 24), controlPoint2: CGPoint(x: 0, y: 27.58))
        morePath.addCurve(to: CGPoint(x: 8, y: 40), controlPoint1: CGPoint(x: 0, y: 36.42), controlPoint2: CGPoint(x: 3.58, y: 40))
        morePath.addLine(to: CGPoint(x: 8, y: 40))
        morePath.close()
        morePath.move(to: CGPoint(x: 56, y: 40))
        morePath.addCurve(to: CGPoint(x: 64, y: 32), controlPoint1: CGPoint(x: 60.42, y: 40), controlPoint2: CGPoint(x: 64, y: 36.42))
        morePath.addCurve(to: CGPoint(x: 56, y: 24), controlPoint1: CGPoint(x: 64, y: 27.58), controlPoint2: CGPoint(x: 60.42, y: 24))
        morePath.addCurve(to: CGPoint(x: 48, y: 32), controlPoint1: CGPoint(x: 51.58, y: 24), controlPoint2: CGPoint(x: 48, y: 27.58))
        morePath.addCurve(to: CGPoint(x: 56, y: 40), controlPoint1: CGPoint(x: 48, y: 36.42), controlPoint2: CGPoint(x: 51.58, y: 40))
        morePath.addLine(to: CGPoint(x: 56, y: 40))
        morePath.close()
        morePath.move(to: CGPoint(x: 32, y: 40))
        morePath.addCurve(to: CGPoint(x: 40, y: 32), controlPoint1: CGPoint(x: 36.42, y: 40), controlPoint2: CGPoint(x: 40, y: 36.42))
        morePath.addCurve(to: CGPoint(x: 32, y: 24), controlPoint1: CGPoint(x: 40, y: 27.58), controlPoint2: CGPoint(x: 36.42, y: 24))
        morePath.addCurve(to: CGPoint(x: 24, y: 32), controlPoint1: CGPoint(x: 27.58, y: 24), controlPoint2: CGPoint(x: 24, y: 27.58))
        morePath.addCurve(to: CGPoint(x: 32, y: 40), controlPoint1: CGPoint(x: 24, y: 36.42), controlPoint2: CGPoint(x: 27.58, y: 40))
        morePath.addLine(to: CGPoint(x: 32, y: 40))
        morePath.close()
        morePath.usesEvenOddFillRule = true
        color.setFill()
        morePath.fill()
    }

    @objc dynamic public class func drawIcon_ping_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Ping Drawing
        let pingPath = UIBezierPath()
        pingPath.move(to: CGPoint(x: 23.8, y: 17.09))
        pingPath.addCurve(to: CGPoint(x: 28.78, y: 19.97), controlPoint1: CGPoint(x: 24.38, y: 19.26), controlPoint2: CGPoint(x: 26.61, y: 20.55))
        pingPath.addCurve(to: CGPoint(x: 31.65, y: 14.99), controlPoint1: CGPoint(x: 30.94, y: 19.38), controlPoint2: CGPoint(x: 32.23, y: 17.15))
        pingPath.addLine(to: CGPoint(x: 28.44, y: 3.01))
        pingPath.addCurve(to: CGPoint(x: 23.46, y: 0.14), controlPoint1: CGPoint(x: 27.86, y: 0.85), controlPoint2: CGPoint(x: 25.63, y: -0.44))
        pingPath.addCurve(to: CGPoint(x: 20.59, y: 5.12), controlPoint1: CGPoint(x: 21.29, y: 0.72), controlPoint2: CGPoint(x: 20.01, y: 2.95))
        pingPath.addLine(to: CGPoint(x: 23.8, y: 17.09))
        pingPath.addLine(to: CGPoint(x: 23.8, y: 17.09))
        pingPath.addLine(to: CGPoint(x: 23.8, y: 17.09))
        pingPath.close()
        pingPath.move(to: CGPoint(x: 40.2, y: 46.91))
        pingPath.addCurve(to: CGPoint(x: 35.22, y: 44.04), controlPoint1: CGPoint(x: 39.62, y: 44.74), controlPoint2: CGPoint(x: 37.39, y: 43.45))
        pingPath.addCurve(to: CGPoint(x: 32.35, y: 49.01), controlPoint1: CGPoint(x: 33.06, y: 44.62), controlPoint2: CGPoint(x: 31.77, y: 46.85))
        pingPath.addLine(to: CGPoint(x: 35.56, y: 60.99))
        pingPath.addCurve(to: CGPoint(x: 40.54, y: 63.86), controlPoint1: CGPoint(x: 36.14, y: 63.15), controlPoint2: CGPoint(x: 38.37, y: 64.44))
        pingPath.addCurve(to: CGPoint(x: 43.41, y: 58.88), controlPoint1: CGPoint(x: 42.71, y: 63.28), controlPoint2: CGPoint(x: 43.99, y: 61.05))
        pingPath.addLine(to: CGPoint(x: 40.2, y: 46.91))
        pingPath.addLine(to: CGPoint(x: 40.2, y: 46.91))
        pingPath.addLine(to: CGPoint(x: 40.2, y: 46.91))
        pingPath.close()
        pingPath.move(to: CGPoint(x: 14.99, y: 31.65))
        pingPath.addCurve(to: CGPoint(x: 19.97, y: 28.78), controlPoint1: CGPoint(x: 17.15, y: 32.23), controlPoint2: CGPoint(x: 19.38, y: 30.94))
        pingPath.addCurve(to: CGPoint(x: 17.09, y: 23.8), controlPoint1: CGPoint(x: 20.55, y: 26.61), controlPoint2: CGPoint(x: 19.26, y: 24.38))
        pingPath.addLine(to: CGPoint(x: 5.12, y: 20.59))
        pingPath.addCurve(to: CGPoint(x: 0.14, y: 23.46), controlPoint1: CGPoint(x: 2.95, y: 20.01), controlPoint2: CGPoint(x: 0.72, y: 21.29))
        pingPath.addCurve(to: CGPoint(x: 3.01, y: 28.44), controlPoint1: CGPoint(x: -0.44, y: 25.63), controlPoint2: CGPoint(x: 0.85, y: 27.86))
        pingPath.addLine(to: CGPoint(x: 14.99, y: 31.65))
        pingPath.addLine(to: CGPoint(x: 14.99, y: 31.65))
        pingPath.addLine(to: CGPoint(x: 14.99, y: 31.65))
        pingPath.close()
        pingPath.move(to: CGPoint(x: 49.01, y: 32.35))
        pingPath.addCurve(to: CGPoint(x: 44.04, y: 35.22), controlPoint1: CGPoint(x: 46.85, y: 31.77), controlPoint2: CGPoint(x: 44.62, y: 33.06))
        pingPath.addCurve(to: CGPoint(x: 46.91, y: 40.2), controlPoint1: CGPoint(x: 43.45, y: 37.39), controlPoint2: CGPoint(x: 44.74, y: 39.62))
        pingPath.addLine(to: CGPoint(x: 58.88, y: 43.41))
        pingPath.addCurve(to: CGPoint(x: 63.86, y: 40.54), controlPoint1: CGPoint(x: 61.05, y: 43.99), controlPoint2: CGPoint(x: 63.28, y: 42.71))
        pingPath.addCurve(to: CGPoint(x: 60.99, y: 35.56), controlPoint1: CGPoint(x: 64.44, y: 38.37), controlPoint2: CGPoint(x: 63.15, y: 36.14))
        pingPath.addLine(to: CGPoint(x: 49.01, y: 32.35))
        pingPath.addLine(to: CGPoint(x: 49.01, y: 32.35))
        pingPath.addLine(to: CGPoint(x: 49.01, y: 32.35))
        pingPath.close()
        pingPath.move(to: CGPoint(x: 23.19, y: 46.56))
        pingPath.addCurve(to: CGPoint(x: 23.19, y: 40.81), controlPoint1: CGPoint(x: 24.78, y: 44.97), controlPoint2: CGPoint(x: 24.78, y: 42.4))
        pingPath.addCurve(to: CGPoint(x: 17.44, y: 40.81), controlPoint1: CGPoint(x: 21.6, y: 39.22), controlPoint2: CGPoint(x: 19.03, y: 39.22))
        pingPath.addLine(to: CGPoint(x: 8.68, y: 49.57))
        pingPath.addCurve(to: CGPoint(x: 8.68, y: 55.32), controlPoint1: CGPoint(x: 7.09, y: 51.16), controlPoint2: CGPoint(x: 7.09, y: 53.74))
        pingPath.addCurve(to: CGPoint(x: 14.43, y: 55.32), controlPoint1: CGPoint(x: 10.26, y: 56.91), controlPoint2: CGPoint(x: 12.84, y: 56.91))
        pingPath.addLine(to: CGPoint(x: 23.19, y: 46.56))
        pingPath.addLine(to: CGPoint(x: 23.19, y: 46.56))
        pingPath.addLine(to: CGPoint(x: 23.19, y: 46.56))
        pingPath.close()
        pingPath.move(to: CGPoint(x: 40.81, y: 17.44))
        pingPath.addCurve(to: CGPoint(x: 40.81, y: 23.19), controlPoint1: CGPoint(x: 39.22, y: 19.03), controlPoint2: CGPoint(x: 39.22, y: 21.6))
        pingPath.addCurve(to: CGPoint(x: 46.56, y: 23.19), controlPoint1: CGPoint(x: 42.4, y: 24.78), controlPoint2: CGPoint(x: 44.97, y: 24.78))
        pingPath.addLine(to: CGPoint(x: 55.32, y: 14.43))
        pingPath.addCurve(to: CGPoint(x: 55.32, y: 8.68), controlPoint1: CGPoint(x: 56.91, y: 12.84), controlPoint2: CGPoint(x: 56.91, y: 10.26))
        pingPath.addCurve(to: CGPoint(x: 49.57, y: 8.68), controlPoint1: CGPoint(x: 53.74, y: 7.09), controlPoint2: CGPoint(x: 51.16, y: 7.09))
        pingPath.addLine(to: CGPoint(x: 40.81, y: 17.44))
        pingPath.addLine(to: CGPoint(x: 40.81, y: 17.44))
        pingPath.addLine(to: CGPoint(x: 40.81, y: 17.44))
        pingPath.close()
        pingPath.usesEvenOddFillRule = true
        color.setFill()
        pingPath.fill()
    }

    @objc dynamic public class func drawIcon_cameraLens_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Camera Drawing
        let cameraPath = UIBezierPath()
        cameraPath.move(to: CGPoint(x: 18.29, y: 8))
        cameraPath.addLine(to: CGPoint(x: 19.16, y: 3.94))
        cameraPath.addCurve(to: CGPoint(x: 23.96, y: 0), controlPoint1: CGPoint(x: 19.62, y: 1.76), controlPoint2: CGPoint(x: 21.8, y: 0))
        cameraPath.addLine(to: CGPoint(x: 40.04, y: 0))
        cameraPath.addCurve(to: CGPoint(x: 44.84, y: 3.94), controlPoint1: CGPoint(x: 42.23, y: 0), controlPoint2: CGPoint(x: 44.37, y: 1.74))
        cameraPath.addLine(to: CGPoint(x: 45.71, y: 8))
        cameraPath.addLine(to: CGPoint(x: 56.02, y: 8))
        cameraPath.addCurve(to: CGPoint(x: 64, y: 16.02), controlPoint1: CGPoint(x: 60.43, y: 8), controlPoint2: CGPoint(x: 64, y: 11.59))
        cameraPath.addLine(to: CGPoint(x: 64, y: 55.98))
        cameraPath.addCurve(to: CGPoint(x: 56.02, y: 64), controlPoint1: CGPoint(x: 64, y: 60.41), controlPoint2: CGPoint(x: 60.42, y: 64))
        cameraPath.addLine(to: CGPoint(x: 7.98, y: 64))
        cameraPath.addCurve(to: CGPoint(x: 0, y: 55.98), controlPoint1: CGPoint(x: 3.57, y: 64), controlPoint2: CGPoint(x: 0, y: 60.41))
        cameraPath.addLine(to: CGPoint(x: 0, y: 16.02))
        cameraPath.addCurve(to: CGPoint(x: 7.98, y: 8), controlPoint1: CGPoint(x: 0, y: 11.59), controlPoint2: CGPoint(x: 3.58, y: 8))
        cameraPath.addLine(to: CGPoint(x: 18.29, y: 8))
        cameraPath.addLine(to: CGPoint(x: 18.29, y: 8))
        cameraPath.close()
        cameraPath.move(to: CGPoint(x: 32, y: 16))
        cameraPath.addCurve(to: CGPoint(x: 52, y: 36), controlPoint1: CGPoint(x: 43.04, y: 16), controlPoint2: CGPoint(x: 52, y: 24.95))
        cameraPath.addCurve(to: CGPoint(x: 32, y: 56), controlPoint1: CGPoint(x: 52, y: 47.05), controlPoint2: CGPoint(x: 43.04, y: 56))
        cameraPath.addCurve(to: CGPoint(x: 12, y: 36), controlPoint1: CGPoint(x: 20.95, y: 56), controlPoint2: CGPoint(x: 12, y: 47.05))
        cameraPath.addCurve(to: CGPoint(x: 32, y: 16), controlPoint1: CGPoint(x: 12, y: 24.95), controlPoint2: CGPoint(x: 20.95, y: 16))
        cameraPath.close()
        cameraPath.move(to: CGPoint(x: 32, y: 48))
        cameraPath.addCurve(to: CGPoint(x: 44, y: 36), controlPoint1: CGPoint(x: 38.63, y: 48), controlPoint2: CGPoint(x: 44, y: 42.63))
        cameraPath.addCurve(to: CGPoint(x: 32, y: 24), controlPoint1: CGPoint(x: 44, y: 29.37), controlPoint2: CGPoint(x: 38.63, y: 24))
        cameraPath.addCurve(to: CGPoint(x: 20, y: 36), controlPoint1: CGPoint(x: 25.37, y: 24), controlPoint2: CGPoint(x: 20, y: 29.37))
        cameraPath.addCurve(to: CGPoint(x: 32, y: 48), controlPoint1: CGPoint(x: 20, y: 42.63), controlPoint2: CGPoint(x: 25.37, y: 48))
        cameraPath.close()
        cameraPath.usesEvenOddFillRule = true
        color.setFill()
        cameraPath.fill()
    }

    @objc dynamic public class func drawIcon_cameraShutter_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Shutter Drawing
        let shutterPath = UIBezierPath()
        shutterPath.move(to: CGPoint(x: 32, y: 56))
        shutterPath.addLine(to: CGPoint(x: 32, y: 56))
        shutterPath.addCurve(to: CGPoint(x: 56, y: 32), controlPoint1: CGPoint(x: 45.25, y: 56), controlPoint2: CGPoint(x: 56, y: 45.25))
        shutterPath.addCurve(to: CGPoint(x: 32, y: 8), controlPoint1: CGPoint(x: 56, y: 18.75), controlPoint2: CGPoint(x: 45.25, y: 8))
        shutterPath.addCurve(to: CGPoint(x: 8, y: 32), controlPoint1: CGPoint(x: 18.75, y: 8), controlPoint2: CGPoint(x: 8, y: 18.75))
        shutterPath.addCurve(to: CGPoint(x: 32, y: 56), controlPoint1: CGPoint(x: 8, y: 45.25), controlPoint2: CGPoint(x: 18.75, y: 56))
        shutterPath.addLine(to: CGPoint(x: 32, y: 56))
        shutterPath.addLine(to: CGPoint(x: 32, y: 56))
        shutterPath.close()
        shutterPath.move(to: CGPoint(x: 32, y: 64))
        shutterPath.addCurve(to: CGPoint(x: 0, y: 32), controlPoint1: CGPoint(x: 14.33, y: 64), controlPoint2: CGPoint(x: 0, y: 49.67))
        shutterPath.addCurve(to: CGPoint(x: 32, y: 0), controlPoint1: CGPoint(x: 0, y: 14.33), controlPoint2: CGPoint(x: 14.33, y: 0))
        shutterPath.addCurve(to: CGPoint(x: 64, y: 32), controlPoint1: CGPoint(x: 49.67, y: 0), controlPoint2: CGPoint(x: 64, y: 14.33))
        shutterPath.addCurve(to: CGPoint(x: 32, y: 64), controlPoint1: CGPoint(x: 64, y: 49.67), controlPoint2: CGPoint(x: 49.67, y: 64))
        shutterPath.close()
        shutterPath.move(to: CGPoint(x: 32, y: 52))
        shutterPath.addCurve(to: CGPoint(x: 52, y: 32), controlPoint1: CGPoint(x: 43.05, y: 52), controlPoint2: CGPoint(x: 52, y: 43.05))
        shutterPath.addCurve(to: CGPoint(x: 32, y: 12), controlPoint1: CGPoint(x: 52, y: 20.95), controlPoint2: CGPoint(x: 43.05, y: 12))
        shutterPath.addCurve(to: CGPoint(x: 12, y: 32), controlPoint1: CGPoint(x: 20.95, y: 12), controlPoint2: CGPoint(x: 12, y: 20.95))
        shutterPath.addCurve(to: CGPoint(x: 32, y: 52), controlPoint1: CGPoint(x: 12, y: 43.05), controlPoint2: CGPoint(x: 20.95, y: 52))
        shutterPath.close()
        shutterPath.usesEvenOddFillRule = true
        color.setFill()
        shutterPath.fill()
    }

    @objc dynamic public class func drawIcon_photo_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Picture Drawing
        let picturePath = UIBezierPath()
        picturePath.move(to: CGPoint(x: 0, y: 4))
        picturePath.addCurve(to: CGPoint(x: 4, y: -0), controlPoint1: CGPoint(x: 0, y: 1.79), controlPoint2: CGPoint(x: 1.78, y: -0))
        picturePath.addLine(to: CGPoint(x: 60, y: -0))
        picturePath.addCurve(to: CGPoint(x: 64, y: 4), controlPoint1: CGPoint(x: 62.21, y: -0), controlPoint2: CGPoint(x: 64, y: 1.78))
        picturePath.addLine(to: CGPoint(x: 64, y: 60))
        picturePath.addCurve(to: CGPoint(x: 60, y: 64), controlPoint1: CGPoint(x: 64, y: 62.21), controlPoint2: CGPoint(x: 62.22, y: 64))
        picturePath.addLine(to: CGPoint(x: 4, y: 64))
        picturePath.addCurve(to: CGPoint(x: 0, y: 60), controlPoint1: CGPoint(x: 1.79, y: 64), controlPoint2: CGPoint(x: 0, y: 62.22))
        picturePath.addLine(to: CGPoint(x: 0, y: 4))
        picturePath.close()
        picturePath.move(to: CGPoint(x: 56, y: 8))
        picturePath.addLine(to: CGPoint(x: 8, y: 8))
        picturePath.addLine(to: CGPoint(x: 8, y: 44.08))
        picturePath.addLine(to: CGPoint(x: 24, y: 36))
        picturePath.addLine(to: CGPoint(x: 56, y: 49.95))
        picturePath.addLine(to: CGPoint(x: 56, y: 8))
        picturePath.close()
        picturePath.move(to: CGPoint(x: 40, y: 32))
        picturePath.addCurve(to: CGPoint(x: 48, y: 24), controlPoint1: CGPoint(x: 44.42, y: 32), controlPoint2: CGPoint(x: 48, y: 28.42))
        picturePath.addCurve(to: CGPoint(x: 40, y: 16), controlPoint1: CGPoint(x: 48, y: 19.58), controlPoint2: CGPoint(x: 44.42, y: 16))
        picturePath.addCurve(to: CGPoint(x: 32, y: 24), controlPoint1: CGPoint(x: 35.58, y: 16), controlPoint2: CGPoint(x: 32, y: 19.58))
        picturePath.addCurve(to: CGPoint(x: 40, y: 32), controlPoint1: CGPoint(x: 32, y: 28.42), controlPoint2: CGPoint(x: 35.58, y: 32))
        picturePath.close()
        picturePath.usesEvenOddFillRule = true
        color.setFill()
        picturePath.fill()
    }

    @objc dynamic public class func drawIcon_conversation_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Chat Drawing
        let chatPath = UIBezierPath()
        chatPath.move(to: CGPoint(x: 12, y: 0))
        chatPath.addLine(to: CGPoint(x: 52, y: 0))
        chatPath.addCurve(to: CGPoint(x: 64, y: 11.98), controlPoint1: CGPoint(x: 58.63, y: 0), controlPoint2: CGPoint(x: 64, y: 5.36))
        chatPath.addLine(to: CGPoint(x: 64, y: 39.93))
        chatPath.addCurve(to: CGPoint(x: 52, y: 51.91), controlPoint1: CGPoint(x: 64, y: 46.55), controlPoint2: CGPoint(x: 58.63, y: 51.91))
        chatPath.addLine(to: CGPoint(x: 32, y: 51.91))
        chatPath.addLine(to: CGPoint(x: 24.34, y: 51.91))
        chatPath.addCurve(to: CGPoint(x: 16.66, y: 54.68), controlPoint1: CGPoint(x: 21.53, y: 51.91), controlPoint2: CGPoint(x: 18.82, y: 52.89))
        chatPath.addLine(to: CGPoint(x: 6.56, y: 63.08))
        chatPath.addCurve(to: CGPoint(x: 0.92, y: 62.56), controlPoint1: CGPoint(x: 4.86, y: 64.49), controlPoint2: CGPoint(x: 2.34, y: 64.26))
        chatPath.addCurve(to: CGPoint(x: 0, y: 60.01), controlPoint1: CGPoint(x: 0.33, y: 61.84), controlPoint2: CGPoint(x: 0, y: 60.94))
        chatPath.addLine(to: CGPoint(x: 0, y: 11.98))
        chatPath.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 0, y: 5.36), controlPoint2: CGPoint(x: 5.37, y: 0))
        chatPath.close()
        chatPath.usesEvenOddFillRule = true
        color.setFill()
        chatPath.fill()
    }

    @objc dynamic public class func drawIcon_speaker_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Speaker Drawing
        let speakerPath = UIBezierPath()
        speakerPath.move(to: CGPoint(x: 2.06, y: 48.08))
        speakerPath.addCurve(to: CGPoint(x: 0, y: 45.74), controlPoint1: CGPoint(x: 0.77, y: 48.08), controlPoint2: CGPoint(x: 0, y: 46.89))
        speakerPath.addLine(to: CGPoint(x: 0, y: 18.55))
        speakerPath.addCurve(to: CGPoint(x: 2.06, y: 16.06), controlPoint1: CGPoint(x: 0, y: 17.37), controlPoint2: CGPoint(x: 0.85, y: 16.06))
        speakerPath.addLine(to: CGPoint(x: 20.11, y: 16.06))
        speakerPath.addLine(to: CGPoint(x: 40, y: 0))
        speakerPath.addLine(to: CGPoint(x: 40, y: 64))
        speakerPath.addLine(to: CGPoint(x: 20.11, y: 48.08))
        speakerPath.addLine(to: CGPoint(x: 2.06, y: 48.08))
        speakerPath.addLine(to: CGPoint(x: 2.06, y: 48.08))
        speakerPath.close()
        speakerPath.move(to: CGPoint(x: 48, y: 40))
        speakerPath.addLine(to: CGPoint(x: 48, y: 48))
        speakerPath.addCurve(to: CGPoint(x: 64, y: 32), controlPoint1: CGPoint(x: 56.84, y: 48), controlPoint2: CGPoint(x: 64, y: 40.84))
        speakerPath.addCurve(to: CGPoint(x: 48, y: 16), controlPoint1: CGPoint(x: 64, y: 23.16), controlPoint2: CGPoint(x: 56.84, y: 16))
        speakerPath.addLine(to: CGPoint(x: 48, y: 24))
        speakerPath.addCurve(to: CGPoint(x: 56, y: 32), controlPoint1: CGPoint(x: 52.42, y: 24), controlPoint2: CGPoint(x: 56, y: 27.58))
        speakerPath.addCurve(to: CGPoint(x: 48, y: 40), controlPoint1: CGPoint(x: 56, y: 36.42), controlPoint2: CGPoint(x: 52.42, y: 40))
        speakerPath.close()
        speakerPath.usesEvenOddFillRule = true
        color.setFill()
        speakerPath.fill()
    }

    @objc dynamic public class func drawIcon_bellWithStrikethrough_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Mute Alerts
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 56.42, y: 7.13))
        clipPath.addCurve(to: CGPoint(x: 61.92, y: 8.11), controlPoint1: CGPoint(x: 58.21, y: 5.86), controlPoint2: CGPoint(x: 60.67, y: 6.3))
        clipPath.addCurve(to: CGPoint(x: 60.95, y: 13.68), controlPoint1: CGPoint(x: 63.18, y: 9.92), controlPoint2: CGPoint(x: 62.74, y: 12.41))
        clipPath.addLine(to: CGPoint(x: 7.27, y: 51.73))
        clipPath.addCurve(to: CGPoint(x: 1.77, y: 50.75), controlPoint1: CGPoint(x: 5.48, y: 53), controlPoint2: CGPoint(x: 3.02, y: 52.56))
        clipPath.addCurve(to: CGPoint(x: 2.74, y: 45.17), controlPoint1: CGPoint(x: 0.52, y: 48.94), controlPoint2: CGPoint(x: 0.95, y: 46.44))
        clipPath.addLine(to: CGPoint(x: 7.78, y: 41.6))
        clipPath.addCurve(to: CGPoint(x: 8.13, y: 40.72), controlPoint1: CGPoint(x: 7.88, y: 41.31), controlPoint2: CGPoint(x: 7.99, y: 41.02))
        clipPath.addCurve(to: CGPoint(x: 12.69, y: 29.99), controlPoint1: CGPoint(x: 8.13, y: 40.72), controlPoint2: CGPoint(x: 11.4, y: 33.83))
        clipPath.addCurve(to: CGPoint(x: 16.77, y: 12.92), controlPoint1: CGPoint(x: 14.37, y: 25.02), controlPoint2: CGPoint(x: 16.77, y: 12.92))
        clipPath.addCurve(to: CGPoint(x: 32.45, y: 0), controlPoint1: CGPoint(x: 17.74, y: 5.64), controlPoint2: CGPoint(x: 24.39, y: 0))
        clipPath.addCurve(to: CGPoint(x: 48.26, y: 12.91), controlPoint1: CGPoint(x: 40.51, y: 0), controlPoint2: CGPoint(x: 47.16, y: 5.63))
        clipPath.addLine(to: CGPoint(x: 56.42, y: 7.13))
        clipPath.close()
        clipPath.move(to: CGPoint(x: 52.21, y: 29.99))
        clipPath.addCurve(to: CGPoint(x: 56.77, y: 40.72), controlPoint1: CGPoint(x: 53.6, y: 34.09), controlPoint2: CGPoint(x: 56.77, y: 40.72))
        clipPath.addCurve(to: CGPoint(x: 52.19, y: 48), controlPoint1: CGPoint(x: 58.59, y: 44.72), controlPoint2: CGPoint(x: 56.56, y: 48))
        clipPath.addLine(to: CGPoint(x: 26.1, y: 48))
        clipPath.addLine(to: CGPoint(x: 52.08, y: 29.59))
        clipPath.addCurve(to: CGPoint(x: 52.21, y: 29.99), controlPoint1: CGPoint(x: 52.12, y: 29.72), controlPoint2: CGPoint(x: 52.17, y: 29.86))
        clipPath.close()
        clipPath.move(to: CGPoint(x: 40.35, y: 56))
        clipPath.addCurve(to: CGPoint(x: 32.45, y: 64), controlPoint1: CGPoint(x: 40.35, y: 60.42), controlPoint2: CGPoint(x: 36.82, y: 64))
        clipPath.addCurve(to: CGPoint(x: 24.55, y: 56), controlPoint1: CGPoint(x: 28.09, y: 64), controlPoint2: CGPoint(x: 24.55, y: 60.42))
        clipPath.addLine(to: CGPoint(x: 40.35, y: 56))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 64, height: 64))
        color.setFill()
        rectanglePath.fill()

        context.endTransparencyLayer()
        context.restoreGState()
    }

    @objc dynamic public class func drawIcon_pencil_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Edit Drawing
        let editPath = UIBezierPath()
        editPath.move(to: CGPoint(x: 58.22, y: 19.38))
        editPath.addLine(to: CGPoint(x: 61.2, y: 16.4))
        editPath.addCurve(to: CGPoint(x: 61.18, y: 2.83), controlPoint1: CGPoint(x: 64.94, y: 12.67), controlPoint2: CGPoint(x: 64.93, y: 6.59))
        editPath.addCurve(to: CGPoint(x: 47.61, y: 2.81), controlPoint1: CGPoint(x: 57.4, y: -0.95), controlPoint2: CGPoint(x: 51.35, y: -0.93))
        editPath.addLine(to: CGPoint(x: 44.62, y: 5.79))
        editPath.addLine(to: CGPoint(x: 58.22, y: 19.38))
        editPath.addLine(to: CGPoint(x: 58.22, y: 19.38))
        editPath.addLine(to: CGPoint(x: 58.22, y: 19.38))
        editPath.close()
        editPath.move(to: CGPoint(x: 55.39, y: 22.21))
        editPath.addLine(to: CGPoint(x: 16.99, y: 60.6))
        editPath.addLine(to: CGPoint(x: 0, y: 64))
        editPath.addLine(to: CGPoint(x: 3.4, y: 47.01))
        editPath.addLine(to: CGPoint(x: 41.8, y: 8.62))
        editPath.addLine(to: CGPoint(x: 55.39, y: 22.21))
        editPath.addLine(to: CGPoint(x: 55.39, y: 22.21))
        editPath.close()
        editPath.move(to: CGPoint(x: 16, y: 54.4))
        editPath.addLine(to: CGPoint(x: 8, y: 56))
        editPath.addLine(to: CGPoint(x: 9.6, y: 48))
        editPath.addLine(to: CGPoint(x: 16, y: 54.4))
        editPath.addLine(to: CGPoint(x: 16, y: 54.4))
        editPath.close()
        editPath.usesEvenOddFillRule = true
        color.setFill()
        editPath.fill()
    }

    @objc dynamic public class func drawIcon_save_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Download Drawing
        let downloadPath = UIBezierPath()
        downloadPath.move(to: CGPoint(x: 0, y: 56))
        downloadPath.addLine(to: CGPoint(x: 64, y: 56))
        downloadPath.addLine(to: CGPoint(x: 64, y: 64))
        downloadPath.addLine(to: CGPoint(x: 0, y: 64))
        downloadPath.addLine(to: CGPoint(x: 0, y: 56))
        downloadPath.addLine(to: CGPoint(x: 0, y: 56))
        downloadPath.addLine(to: CGPoint(x: 0, y: 56))
        downloadPath.close()
        downloadPath.move(to: CGPoint(x: 28, y: 0))
        downloadPath.addLine(to: CGPoint(x: 36, y: 0))
        downloadPath.addLine(to: CGPoint(x: 36, y: 28))
        downloadPath.addLine(to: CGPoint(x: 52, y: 28))
        downloadPath.addLine(to: CGPoint(x: 32, y: 44))
        downloadPath.addLine(to: CGPoint(x: 12, y: 28))
        downloadPath.addLine(to: CGPoint(x: 28, y: 28))
        downloadPath.addLine(to: CGPoint(x: 28, y: 0))
        downloadPath.close()
        downloadPath.usesEvenOddFillRule = true
        color.setFill()
        downloadPath.fill()
    }

    @objc dynamic public class func drawIcon_archive_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 4, y: 28))
        bezierPath.addLine(to: CGPoint(x: 60, y: 28))
        bezierPath.addLine(to: CGPoint(x: 60, y: 56))
        bezierPath.addCurve(to: CGPoint(x: 52, y: 64), controlPoint1: CGPoint(x: 60, y: 60.42), controlPoint2: CGPoint(x: 56.42, y: 64))
        bezierPath.addLine(to: CGPoint(x: 12, y: 64))
        bezierPath.addCurve(to: CGPoint(x: 4, y: 56), controlPoint1: CGPoint(x: 7.58, y: 64), controlPoint2: CGPoint(x: 4, y: 60.42))
        bezierPath.addLine(to: CGPoint(x: 4, y: 28))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 28, y: 36))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 40), controlPoint1: CGPoint(x: 25.79, y: 36), controlPoint2: CGPoint(x: 24, y: 37.79))
        bezierPath.addCurve(to: CGPoint(x: 28, y: 44), controlPoint1: CGPoint(x: 24, y: 42.21), controlPoint2: CGPoint(x: 25.79, y: 44))
        bezierPath.addLine(to: CGPoint(x: 36, y: 44))
        bezierPath.addCurve(to: CGPoint(x: 40, y: 40), controlPoint1: CGPoint(x: 38.21, y: 44), controlPoint2: CGPoint(x: 40, y: 42.21))
        bezierPath.addCurve(to: CGPoint(x: 36, y: 36), controlPoint1: CGPoint(x: 40, y: 37.79), controlPoint2: CGPoint(x: 38.21, y: 36))
        bezierPath.addLine(to: CGPoint(x: 28, y: 36))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 10.04, y: 0))
        bezierPath.addLine(to: CGPoint(x: 53.96, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 59.91, y: 1.07), controlPoint1: CGPoint(x: 57.27, y: 0), controlPoint2: CGPoint(x: 58.6, y: 0.37))
        bezierPath.addCurve(to: CGPoint(x: 62.93, y: 4.09), controlPoint1: CGPoint(x: 61.21, y: 1.77), controlPoint2: CGPoint(x: 62.23, y: 2.79))
        bezierPath.addCurve(to: CGPoint(x: 64, y: 10.04), controlPoint1: CGPoint(x: 63.63, y: 5.4), controlPoint2: CGPoint(x: 64, y: 6.73))
        bezierPath.addLine(to: CGPoint(x: 64, y: 16))
        bezierPath.addCurve(to: CGPoint(x: 60, y: 20), controlPoint1: CGPoint(x: 64, y: 18.21), controlPoint2: CGPoint(x: 62.21, y: 20))
        bezierPath.addLine(to: CGPoint(x: 4, y: 20))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 16), controlPoint1: CGPoint(x: 1.79, y: 20), controlPoint2: CGPoint(x: 0, y: 18.21))
        bezierPath.addLine(to: CGPoint(x: 0, y: 10.04))
        bezierPath.addCurve(to: CGPoint(x: 1.07, y: 4.09), controlPoint1: CGPoint(x: 0, y: 6.73), controlPoint2: CGPoint(x: 0.37, y: 5.4))
        bezierPath.addCurve(to: CGPoint(x: 4.09, y: 1.07), controlPoint1: CGPoint(x: 1.77, y: 2.79), controlPoint2: CGPoint(x: 2.79, y: 1.77))
        bezierPath.addCurve(to: CGPoint(x: 10.04, y: 0), controlPoint1: CGPoint(x: 5.4, y: 0.37), controlPoint2: CGPoint(x: 6.73, y: 0))
        bezierPath.close()
        color.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawIcon_export_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Share Drawing
        let sharePath = UIBezierPath()
        sharePath.move(to: CGPoint(x: 0, y: 56))
        sharePath.addLine(to: CGPoint(x: 64, y: 56))
        sharePath.addLine(to: CGPoint(x: 64, y: 64))
        sharePath.addLine(to: CGPoint(x: 0, y: 64))
        sharePath.addLine(to: CGPoint(x: 0, y: 56))
        sharePath.addLine(to: CGPoint(x: 0, y: 56))
        sharePath.addLine(to: CGPoint(x: 0, y: 56))
        sharePath.addLine(to: CGPoint(x: 0, y: 56))
        sharePath.close()
        sharePath.move(to: CGPoint(x: 28, y: 44))
        sharePath.addLine(to: CGPoint(x: 36, y: 44))
        sharePath.addLine(to: CGPoint(x: 36, y: 16))
        sharePath.addLine(to: CGPoint(x: 52, y: 16))
        sharePath.addLine(to: CGPoint(x: 32, y: 0))
        sharePath.addLine(to: CGPoint(x: 12, y: 16))
        sharePath.addLine(to: CGPoint(x: 28, y: 16))
        sharePath.addLine(to: CGPoint(x: 28, y: 44))
        sharePath.close()
        sharePath.usesEvenOddFillRule = true
        color.setFill()
        sharePath.fill()
    }

    @objc dynamic public class func drawIcon_minus_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Remove Drawing
        let removePath = UIBezierPath(rect: CGRect(x: 0, y: 28, width: 64, height: 8))
        color.setFill()
        removePath.fill()
    }

    @objc dynamic public class func drawIcon_addPerson_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 48, y: 8.15))
        bezierPath.addLine(to: CGPoint(x: 40, y: 8.15))
        bezierPath.addLine(to: CGPoint(x: 40, y: 16.29))
        bezierPath.addLine(to: CGPoint(x: 48, y: 16.29))
        bezierPath.addLine(to: CGPoint(x: 48, y: 24.44))
        bezierPath.addLine(to: CGPoint(x: 56, y: 24.44))
        bezierPath.addLine(to: CGPoint(x: 56, y: 16.29))
        bezierPath.addLine(to: CGPoint(x: 64, y: 16.29))
        bezierPath.addLine(to: CGPoint(x: 64, y: 8.15))
        bezierPath.addLine(to: CGPoint(x: 56, y: 8.15))
        bezierPath.addLine(to: CGPoint(x: 56, y: 0))
        bezierPath.addLine(to: CGPoint(x: 48, y: 0))
        bezierPath.addLine(to: CGPoint(x: 48, y: 8.15))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 37.7, y: 43.05))
        bezierPath.addCurve(to: CGPoint(x: 48, y: 53.53), controlPoint1: CGPoint(x: 43.39, y: 43.05), controlPoint2: CGPoint(x: 48, y: 47.76))
        bezierPath.addLine(to: CGPoint(x: 48, y: 57.96))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 64), controlPoint1: CGPoint(x: 40.84, y: 61.82), controlPoint2: CGPoint(x: 32.67, y: 64))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 57.96), controlPoint1: CGPoint(x: 15.33, y: 64), controlPoint2: CGPoint(x: 7.16, y: 61.82))
        bezierPath.addLine(to: CGPoint(x: 0, y: 53.53))
        bezierPath.addCurve(to: CGPoint(x: 10.3, y: 43.05), controlPoint1: CGPoint(x: 0, y: 47.74), controlPoint2: CGPoint(x: 4.6, y: 43.05))
        bezierPath.addLine(to: CGPoint(x: 11.63, y: 43.05))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 46.55), controlPoint1: CGPoint(x: 15.24, y: 45.27), controlPoint2: CGPoint(x: 19.48, y: 46.55))
        bezierPath.addCurve(to: CGPoint(x: 36.37, y: 43.05), controlPoint1: CGPoint(x: 28.52, y: 46.55), controlPoint2: CGPoint(x: 32.76, y: 45.27))
        bezierPath.addLine(to: CGPoint(x: 37.7, y: 43.05))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 24, y: 36.08))
        bezierPath.addCurve(to: CGPoint(x: 37.72, y: 22.11), controlPoint1: CGPoint(x: 31.58, y: 36.08), controlPoint2: CGPoint(x: 37.72, y: 29.83))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 8.15), controlPoint1: CGPoint(x: 37.72, y: 14.4), controlPoint2: CGPoint(x: 31.58, y: 8.15))
        bezierPath.addCurve(to: CGPoint(x: 10.29, y: 22.11), controlPoint1: CGPoint(x: 16.43, y: 8.15), controlPoint2: CGPoint(x: 10.29, y: 14.4))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 36.08), controlPoint1: CGPoint(x: 10.29, y: 29.83), controlPoint2: CGPoint(x: 16.43, y: 36.08))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        color.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawIcon_plusCircled_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Add Drawing
        let addPath = UIBezierPath()
        addPath.move(to: CGPoint(x: 32, y: 64))
        addPath.addCurve(to: CGPoint(x: 0, y: 32), controlPoint1: CGPoint(x: 14.33, y: 64), controlPoint2: CGPoint(x: 0, y: 49.67))
        addPath.addCurve(to: CGPoint(x: 32, y: 0), controlPoint1: CGPoint(x: 0, y: 14.33), controlPoint2: CGPoint(x: 14.33, y: 0))
        addPath.addCurve(to: CGPoint(x: 64, y: 32), controlPoint1: CGPoint(x: 49.67, y: 0), controlPoint2: CGPoint(x: 64, y: 14.33))
        addPath.addCurve(to: CGPoint(x: 32, y: 64), controlPoint1: CGPoint(x: 64, y: 49.67), controlPoint2: CGPoint(x: 49.67, y: 64))
        addPath.close()
        addPath.move(to: CGPoint(x: 12, y: 28))
        addPath.addLine(to: CGPoint(x: 12, y: 36))
        addPath.addLine(to: CGPoint(x: 28, y: 36))
        addPath.addLine(to: CGPoint(x: 28, y: 52))
        addPath.addLine(to: CGPoint(x: 36, y: 52))
        addPath.addLine(to: CGPoint(x: 36, y: 36))
        addPath.addLine(to: CGPoint(x: 52, y: 36))
        addPath.addLine(to: CGPoint(x: 52, y: 28))
        addPath.addLine(to: CGPoint(x: 36, y: 28))
        addPath.addLine(to: CGPoint(x: 36, y: 12))
        addPath.addLine(to: CGPoint(x: 28, y: 12))
        addPath.addLine(to: CGPoint(x: 28, y: 28))
        addPath.addLine(to: CGPoint(x: 12, y: 28))
        addPath.close()
        addPath.usesEvenOddFillRule = true
        color.setFill()
        addPath.fill()
    }

    @objc dynamic public class func drawIcon_envelope_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Email Drawing
        let emailPath = UIBezierPath()
        emailPath.move(to: CGPoint(x: 63.98, y: 56))
        emailPath.addLine(to: CGPoint(x: 0.04, y: 56))
        emailPath.addLine(to: CGPoint(x: 0.04, y: 16.27))
        emailPath.addLine(to: CGPoint(x: 32.01, y: 43.7))
        emailPath.addLine(to: CGPoint(x: 63.98, y: 16.27))
        emailPath.addLine(to: CGPoint(x: 63.98, y: 56))
        emailPath.close()
        emailPath.move(to: CGPoint(x: 32.05, y: 35.43))
        emailPath.addLine(to: CGPoint(x: 64.02, y: 8))
        emailPath.addLine(to: CGPoint(x: 0, y: 8))
        emailPath.addLine(to: CGPoint(x: 32.05, y: 35.43))
        emailPath.addLine(to: CGPoint(x: 32.05, y: 35.43))
        emailPath.close()
        emailPath.usesEvenOddFillRule = true
        color.setFill()
        emailPath.fill()
    }

    @objc dynamic public class func drawIcon_redo_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Resend Drawing
        let resendPath = UIBezierPath()
        resendPath.move(to: CGPoint(x: 54.63, y: 9.37))
        resendPath.addCurve(to: CGPoint(x: 32, y: 0), controlPoint1: CGPoint(x: 48.84, y: 3.58), controlPoint2: CGPoint(x: 40.84, y: 0))
        resendPath.addCurve(to: CGPoint(x: 0, y: 32), controlPoint1: CGPoint(x: 14.33, y: 0), controlPoint2: CGPoint(x: 0, y: 14.33))
        resendPath.addCurve(to: CGPoint(x: 32, y: 64), controlPoint1: CGPoint(x: 0, y: 49.67), controlPoint2: CGPoint(x: 14.33, y: 64))
        resendPath.addCurve(to: CGPoint(x: 62.99, y: 40), controlPoint1: CGPoint(x: 46.91, y: 64), controlPoint2: CGPoint(x: 59.44, y: 53.8))
        resendPath.addLine(to: CGPoint(x: 62.99, y: 40))
        resendPath.addLine(to: CGPoint(x: 54.63, y: 40))
        resendPath.addCurve(to: CGPoint(x: 32, y: 56), controlPoint1: CGPoint(x: 51.34, y: 49.32), controlPoint2: CGPoint(x: 42.45, y: 56))
        resendPath.addCurve(to: CGPoint(x: 8, y: 32), controlPoint1: CGPoint(x: 18.75, y: 56), controlPoint2: CGPoint(x: 8, y: 45.25))
        resendPath.addCurve(to: CGPoint(x: 32, y: 8), controlPoint1: CGPoint(x: 8, y: 18.75), controlPoint2: CGPoint(x: 18.75, y: 8))
        resendPath.addCurve(to: CGPoint(x: 48.97, y: 15.03), controlPoint1: CGPoint(x: 38.63, y: 8), controlPoint2: CGPoint(x: 44.63, y: 10.69))
        resendPath.addLine(to: CGPoint(x: 36, y: 28))
        resendPath.addLine(to: CGPoint(x: 64, y: 28))
        resendPath.addLine(to: CGPoint(x: 64, y: 0))
        resendPath.addLine(to: CGPoint(x: 54.63, y: 9.37))
        resendPath.addLine(to: CGPoint(x: 54.63, y: 9.37))
        resendPath.close()
        resendPath.usesEvenOddFillRule = true
        color.setFill()
        resendPath.fill()
    }

    @objc dynamic public class func drawIcon_brush_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Sketch Drawing
        let sketchPath = UIBezierPath()
        sketchPath.move(to: CGPoint(x: 54.83, y: 39.53))
        sketchPath.addCurve(to: CGPoint(x: 32.28, y: 43.38), controlPoint1: CGPoint(x: 50.56, y: 38.77), controlPoint2: CGPoint(x: 46.28, y: 39.53))
        sketchPath.addCurve(to: CGPoint(x: 29.94, y: 44.15), controlPoint1: CGPoint(x: 31.5, y: 43.77), controlPoint2: CGPoint(x: 30.72, y: 43.77))
        sketchPath.addCurve(to: CGPoint(x: 12.06, y: 47.23), controlPoint1: CGPoint(x: 21, y: 46.46), controlPoint2: CGPoint(x: 15.94, y: 47.23))
        sketchPath.addCurve(to: CGPoint(x: 8.56, y: 44.92), controlPoint1: CGPoint(x: 8.56, y: 47.23), controlPoint2: CGPoint(x: 8.17, y: 46.84))
        sketchPath.addCurve(to: CGPoint(x: 8.94, y: 44.92), controlPoint1: CGPoint(x: 8.56, y: 45.31), controlPoint2: CGPoint(x: 8.56, y: 45.31))
        sketchPath.addCurve(to: CGPoint(x: 13.61, y: 43.38), controlPoint1: CGPoint(x: 10.11, y: 44.54), controlPoint2: CGPoint(x: 11.67, y: 43.77))
        sketchPath.addCurve(to: CGPoint(x: 30.33, y: 39.92), controlPoint1: CGPoint(x: 17.5, y: 42.23), controlPoint2: CGPoint(x: 21.39, y: 41.46))
        sketchPath.addCurve(to: CGPoint(x: 31.89, y: 39.53), controlPoint1: CGPoint(x: 31.11, y: 39.92), controlPoint2: CGPoint(x: 31.11, y: 39.92))
        sketchPath.addCurve(to: CGPoint(x: 50.94, y: 35.69), controlPoint1: CGPoint(x: 42, y: 38), controlPoint2: CGPoint(x: 46.67, y: 36.84))
        sketchPath.addCurve(to: CGPoint(x: 61.83, y: 25.69), controlPoint1: CGPoint(x: 58.33, y: 33.38), controlPoint2: CGPoint(x: 62.22, y: 30.69))
        sketchPath.addCurve(to: CGPoint(x: 49, y: 19.92), controlPoint1: CGPoint(x: 61.44, y: 20.69), controlPoint2: CGPoint(x: 57.17, y: 19.92))
        sketchPath.addCurve(to: CGPoint(x: 30.33, y: 21.46), controlPoint1: CGPoint(x: 44.72, y: 19.92), controlPoint2: CGPoint(x: 39.67, y: 20.3))
        sketchPath.addCurve(to: CGPoint(x: 29.17, y: 21.46), controlPoint1: CGPoint(x: 29.56, y: 21.46), controlPoint2: CGPoint(x: 29.56, y: 21.46))
        sketchPath.addCurve(to: CGPoint(x: 15.17, y: 22.99), controlPoint1: CGPoint(x: 22.17, y: 22.61), controlPoint2: CGPoint(x: 18.28, y: 22.99))
        sketchPath.addCurve(to: CGPoint(x: 30.33, y: 19.53), controlPoint1: CGPoint(x: 18.67, y: 22.22), controlPoint2: CGPoint(x: 23.33, y: 21.07))
        sketchPath.addCurve(to: CGPoint(x: 34.61, y: 18.76), controlPoint1: CGPoint(x: 31.11, y: 19.53), controlPoint2: CGPoint(x: 32.28, y: 19.15))
        sketchPath.addCurve(to: CGPoint(x: 38.89, y: 17.99), controlPoint1: CGPoint(x: 36.17, y: 18.38), controlPoint2: CGPoint(x: 37.72, y: 18.38))
        sketchPath.addCurve(to: CGPoint(x: 59.11, y: 7.22), controlPoint1: CGPoint(x: 55.61, y: 14.53), controlPoint2: CGPoint(x: 60.28, y: 12.99))
        sketchPath.addCurve(to: CGPoint(x: 34.61, y: 1.07), controlPoint1: CGPoint(x: 57.94, y: 1.84), controlPoint2: CGPoint(x: 49.39, y: 0.68))
        sketchPath.addCurve(to: CGPoint(x: 3.5, y: 6.45), controlPoint1: CGPoint(x: 22.17, y: 1.84), controlPoint2: CGPoint(x: 10.11, y: 3.76))
        sketchPath.addCurve(to: CGPoint(x: 1.56, y: 11.84), controlPoint1: CGPoint(x: 1.56, y: 7.61), controlPoint2: CGPoint(x: 0.78, y: 9.92))
        sketchPath.addCurve(to: CGPoint(x: 7, y: 13.76), controlPoint1: CGPoint(x: 2.33, y: 13.76), controlPoint2: CGPoint(x: 4.67, y: 14.53))
        sketchPath.addCurve(to: CGPoint(x: 35, y: 9.15), controlPoint1: CGPoint(x: 12.44, y: 11.45), controlPoint2: CGPoint(x: 23.33, y: 9.53))
        sketchPath.addCurve(to: CGPoint(x: 43.94, y: 9.15), controlPoint1: CGPoint(x: 38.11, y: 9.15), controlPoint2: CGPoint(x: 41.22, y: 9.15))
        sketchPath.addCurve(to: CGPoint(x: 37.33, y: 10.68), controlPoint1: CGPoint(x: 42, y: 9.53), controlPoint2: CGPoint(x: 40.06, y: 9.92))
        sketchPath.addCurve(to: CGPoint(x: 33.06, y: 11.07), controlPoint1: CGPoint(x: 36.17, y: 10.68), controlPoint2: CGPoint(x: 34.61, y: 10.68))
        sketchPath.addCurve(to: CGPoint(x: 28.78, y: 11.84), controlPoint1: CGPoint(x: 30.72, y: 11.45), controlPoint2: CGPoint(x: 29.94, y: 11.84))
        sketchPath.addCurve(to: CGPoint(x: 0, y: 25.3), controlPoint1: CGPoint(x: 6.61, y: 16.45), controlPoint2: CGPoint(x: 0, y: 18.38))
        sketchPath.addCurve(to: CGPoint(x: 12.06, y: 31.07), controlPoint1: CGPoint(x: 0, y: 30.69), controlPoint2: CGPoint(x: 3.89, y: 31.46))
        sketchPath.addCurve(to: CGPoint(x: 30.33, y: 29.15), controlPoint1: CGPoint(x: 16.33, y: 31.07), controlPoint2: CGPoint(x: 19.83, y: 30.69))
        sketchPath.addCurve(to: CGPoint(x: 31.5, y: 29.15), controlPoint1: CGPoint(x: 31.11, y: 29.15), controlPoint2: CGPoint(x: 31.11, y: 29.15))
        sketchPath.addCurve(to: CGPoint(x: 49.39, y: 27.61), controlPoint1: CGPoint(x: 40.44, y: 27.99), controlPoint2: CGPoint(x: 45.5, y: 27.61))
        sketchPath.addCurve(to: CGPoint(x: 50.94, y: 27.61), controlPoint1: CGPoint(x: 49.78, y: 27.61), controlPoint2: CGPoint(x: 50.56, y: 27.61))
        sketchPath.addCurve(to: CGPoint(x: 48.61, y: 28.38), controlPoint1: CGPoint(x: 50.17, y: 27.99), controlPoint2: CGPoint(x: 49.78, y: 27.99))
        sketchPath.addCurve(to: CGPoint(x: 30.33, y: 32.23), controlPoint1: CGPoint(x: 44.72, y: 29.53), controlPoint2: CGPoint(x: 40.06, y: 30.3))
        sketchPath.addCurve(to: CGPoint(x: 28.78, y: 32.61), controlPoint1: CGPoint(x: 29.56, y: 32.23), controlPoint2: CGPoint(x: 29.56, y: 32.23))
        sketchPath.addCurve(to: CGPoint(x: 0.78, y: 44.15), controlPoint1: CGPoint(x: 7, y: 35.69), controlPoint2: CGPoint(x: 1.56, y: 37.23))
        sketchPath.addCurve(to: CGPoint(x: 12.06, y: 55.31), controlPoint1: CGPoint(x: -0.39, y: 51.46), controlPoint2: CGPoint(x: 4.67, y: 55.31))
        sketchPath.addCurve(to: CGPoint(x: 31.89, y: 51.84), controlPoint1: CGPoint(x: 16.72, y: 55.31), controlPoint2: CGPoint(x: 22.56, y: 54.15))
        sketchPath.addCurve(to: CGPoint(x: 34.22, y: 51.08), controlPoint1: CGPoint(x: 32.67, y: 51.84), controlPoint2: CGPoint(x: 33.06, y: 51.46))
        sketchPath.addCurve(to: CGPoint(x: 50.17, y: 47.23), controlPoint1: CGPoint(x: 42.78, y: 48.77), controlPoint2: CGPoint(x: 47.44, y: 47.61))
        sketchPath.addCurve(to: CGPoint(x: 49.39, y: 47.61), controlPoint1: CGPoint(x: 49.78, y: 47.23), controlPoint2: CGPoint(x: 49.78, y: 47.61))
        sketchPath.addCurve(to: CGPoint(x: 27.61, y: 54.92), controlPoint1: CGPoint(x: 43.17, y: 51.08), controlPoint2: CGPoint(x: 33.44, y: 54.15))
        sketchPath.addCurve(to: CGPoint(x: 24.11, y: 59.54), controlPoint1: CGPoint(x: 25.28, y: 55.31), controlPoint2: CGPoint(x: 24.11, y: 57.23))
        sketchPath.addCurve(to: CGPoint(x: 28.78, y: 63), controlPoint1: CGPoint(x: 24.5, y: 61.85), controlPoint2: CGPoint(x: 26.44, y: 63))
        sketchPath.addCurve(to: CGPoint(x: 52.89, y: 54.92), controlPoint1: CGPoint(x: 35.39, y: 61.85), controlPoint2: CGPoint(x: 45.89, y: 58.38))
        sketchPath.addCurve(to: CGPoint(x: 61.06, y: 48.38), controlPoint1: CGPoint(x: 57.17, y: 52.61), controlPoint2: CGPoint(x: 59.89, y: 50.69))
        sketchPath.addCurve(to: CGPoint(x: 54.83, y: 39.53), controlPoint1: CGPoint(x: 63.78, y: 43.38), controlPoint2: CGPoint(x: 60.28, y: 40.3))
        sketchPath.close()
        color.setFill()
        sketchPath.fill()
    }

    @objc dynamic public class func drawIcon_gif_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// GIF Drawing
        let gIFPath = UIBezierPath()
        gIFPath.move(to: CGPoint(x: 48, y: 36))
        gIFPath.addLine(to: CGPoint(x: 48, y: 56))
        gIFPath.addLine(to: CGPoint(x: 40, y: 56))
        gIFPath.addLine(to: CGPoint(x: 40, y: 8))
        gIFPath.addLine(to: CGPoint(x: 46, y: 8))
        gIFPath.addLine(to: CGPoint(x: 64, y: 8))
        gIFPath.addLine(to: CGPoint(x: 64, y: 16))
        gIFPath.addLine(to: CGPoint(x: 48, y: 16))
        gIFPath.addLine(to: CGPoint(x: 48, y: 28))
        gIFPath.addLine(to: CGPoint(x: 60, y: 28))
        gIFPath.addLine(to: CGPoint(x: 60, y: 36))
        gIFPath.addLine(to: CGPoint(x: 48, y: 36))
        gIFPath.close()
        gIFPath.move(to: CGPoint(x: 28, y: 8))
        gIFPath.addLine(to: CGPoint(x: 36, y: 8))
        gIFPath.addLine(to: CGPoint(x: 36, y: 56))
        gIFPath.addLine(to: CGPoint(x: 28, y: 56))
        gIFPath.addLine(to: CGPoint(x: 28, y: 8))
        gIFPath.close()
        gIFPath.move(to: CGPoint(x: 20, y: 28))
        gIFPath.addLine(to: CGPoint(x: 24, y: 28))
        gIFPath.addLine(to: CGPoint(x: 24, y: 44.79))
        gIFPath.addCurve(to: CGPoint(x: 12, y: 56.8), controlPoint1: CGPoint(x: 24, y: 51.42), controlPoint2: CGPoint(x: 18.61, y: 56.8))
        gIFPath.addCurve(to: CGPoint(x: 0, y: 44.79), controlPoint1: CGPoint(x: 5.37, y: 56.8), controlPoint2: CGPoint(x: 0, y: 51.4))
        gIFPath.addLine(to: CGPoint(x: 0, y: 19.21))
        gIFPath.addCurve(to: CGPoint(x: 12, y: 7.2), controlPoint1: CGPoint(x: 0, y: 12.58), controlPoint2: CGPoint(x: 5.39, y: 7.2))
        gIFPath.addCurve(to: CGPoint(x: 24, y: 19.21), controlPoint1: CGPoint(x: 18.63, y: 7.2), controlPoint2: CGPoint(x: 24, y: 12.6))
        gIFPath.addLine(to: CGPoint(x: 24, y: 20))
        gIFPath.addLine(to: CGPoint(x: 16, y: 20))
        gIFPath.addLine(to: CGPoint(x: 16, y: 19.21))
        gIFPath.addCurve(to: CGPoint(x: 12, y: 15.2), controlPoint1: CGPoint(x: 16, y: 17.01), controlPoint2: CGPoint(x: 14.2, y: 15.2))
        gIFPath.addCurve(to: CGPoint(x: 8, y: 19.21), controlPoint1: CGPoint(x: 9.8, y: 15.2), controlPoint2: CGPoint(x: 8, y: 17))
        gIFPath.addLine(to: CGPoint(x: 8, y: 44.79))
        gIFPath.addCurve(to: CGPoint(x: 12, y: 48.8), controlPoint1: CGPoint(x: 8, y: 46.99), controlPoint2: CGPoint(x: 9.8, y: 48.8))
        gIFPath.addCurve(to: CGPoint(x: 16, y: 44.79), controlPoint1: CGPoint(x: 14.2, y: 48.8), controlPoint2: CGPoint(x: 16, y: 47))
        gIFPath.addLine(to: CGPoint(x: 16, y: 36))
        gIFPath.addLine(to: CGPoint(x: 12, y: 36))
        gIFPath.addLine(to: CGPoint(x: 12, y: 28))
        gIFPath.addLine(to: CGPoint(x: 20, y: 28))
        gIFPath.close()
        gIFPath.usesEvenOddFillRule = true
        color.setFill()
        gIFPath.fill()
    }

    @objc dynamic public class func drawIcon_undo_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Undo Drawing
        let undoPath = UIBezierPath()
        undoPath.move(to: CGPoint(x: 9.37, y: 9.37))
        undoPath.addCurve(to: CGPoint(x: 32, y: 0), controlPoint1: CGPoint(x: 15.16, y: 3.58), controlPoint2: CGPoint(x: 23.16, y: 0))
        undoPath.addCurve(to: CGPoint(x: 64, y: 32), controlPoint1: CGPoint(x: 49.67, y: 0), controlPoint2: CGPoint(x: 64, y: 14.33))
        undoPath.addCurve(to: CGPoint(x: 32, y: 64), controlPoint1: CGPoint(x: 64, y: 49.67), controlPoint2: CGPoint(x: 49.67, y: 64))
        undoPath.addCurve(to: CGPoint(x: 1.01, y: 40), controlPoint1: CGPoint(x: 17.09, y: 64), controlPoint2: CGPoint(x: 4.56, y: 53.8))
        undoPath.addLine(to: CGPoint(x: 1.01, y: 40))
        undoPath.addLine(to: CGPoint(x: 9.37, y: 40))
        undoPath.addCurve(to: CGPoint(x: 32, y: 56), controlPoint1: CGPoint(x: 12.66, y: 49.32), controlPoint2: CGPoint(x: 21.55, y: 56))
        undoPath.addCurve(to: CGPoint(x: 56, y: 32), controlPoint1: CGPoint(x: 45.25, y: 56), controlPoint2: CGPoint(x: 56, y: 45.25))
        undoPath.addCurve(to: CGPoint(x: 32, y: 8), controlPoint1: CGPoint(x: 56, y: 18.75), controlPoint2: CGPoint(x: 45.25, y: 8))
        undoPath.addCurve(to: CGPoint(x: 15.03, y: 15.03), controlPoint1: CGPoint(x: 25.37, y: 8), controlPoint2: CGPoint(x: 19.37, y: 10.69))
        undoPath.addLine(to: CGPoint(x: 28, y: 28))
        undoPath.addLine(to: CGPoint(x: 0, y: 28))
        undoPath.addLine(to: CGPoint(x: 0, y: 0))
        undoPath.addLine(to: CGPoint(x: 9.37, y: 9.37))
        undoPath.addLine(to: CGPoint(x: 9.37, y: 9.37))
        undoPath.close()
        undoPath.usesEvenOddFillRule = true
        color.setFill()
        undoPath.fill()
    }

    @objc dynamic public class func drawIcon_exclamationMark_16pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Path Drawing
        let pathPath = UIBezierPath()
        pathPath.move(to: CGPoint(x: 7, y: 12))
        pathPath.addLine(to: CGPoint(x: 9, y: 12))
        pathPath.addLine(to: CGPoint(x: 9, y: 0))
        pathPath.addLine(to: CGPoint(x: 7, y: 0))
        pathPath.addLine(to: CGPoint(x: 7, y: 12))
        pathPath.close()
        pathPath.move(to: CGPoint(x: 9, y: 15))
        pathPath.addCurve(to: CGPoint(x: 8, y: 14), controlPoint1: CGPoint(x: 9, y: 14.45), controlPoint2: CGPoint(x: 8.55, y: 14))
        pathPath.addCurve(to: CGPoint(x: 7, y: 15), controlPoint1: CGPoint(x: 7.45, y: 14), controlPoint2: CGPoint(x: 7, y: 14.45))
        pathPath.addCurve(to: CGPoint(x: 8, y: 16), controlPoint1: CGPoint(x: 7, y: 15.55), controlPoint2: CGPoint(x: 7.45, y: 16))
        pathPath.addCurve(to: CGPoint(x: 9, y: 15), controlPoint1: CGPoint(x: 8.55, y: 16), controlPoint2: CGPoint(x: 9, y: 15.55))
        pathPath.close()
        pathPath.usesEvenOddFillRule = true
        color.setFill()
        pathPath.fill()
    }

    @objc dynamic public class func drawIcon_spinner_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Spinner Drawing
        let spinnerPath = UIBezierPath()
        spinnerPath.move(to: CGPoint(x: 54.24, y: 22.96))
        spinnerPath.addLine(to: CGPoint(x: 60.25, y: 16.95))
        spinnerPath.addCurve(to: CGPoint(x: 64, y: 32), controlPoint1: CGPoint(x: 62.64, y: 21.44), controlPoint2: CGPoint(x: 64, y: 26.56))
        spinnerPath.addCurve(to: CGPoint(x: 32, y: 64), controlPoint1: CGPoint(x: 64, y: 49.67), controlPoint2: CGPoint(x: 49.67, y: 64))
        spinnerPath.addCurve(to: CGPoint(x: 0, y: 32), controlPoint1: CGPoint(x: 14.33, y: 64), controlPoint2: CGPoint(x: 0, y: 49.67))
        spinnerPath.addCurve(to: CGPoint(x: 32, y: 0), controlPoint1: CGPoint(x: 0, y: 14.33), controlPoint2: CGPoint(x: 14.33, y: 0))
        spinnerPath.addCurve(to: CGPoint(x: 49.56, y: 5.24), controlPoint1: CGPoint(x: 38.48, y: 0), controlPoint2: CGPoint(x: 44.51, y: 1.93))
        spinnerPath.addLine(to: CGPoint(x: 49.56, y: 5.24))
        spinnerPath.addLine(to: CGPoint(x: 43.74, y: 11.06))
        spinnerPath.addCurve(to: CGPoint(x: 32, y: 8), controlPoint1: CGPoint(x: 40.27, y: 9.11), controlPoint2: CGPoint(x: 36.26, y: 8))
        spinnerPath.addCurve(to: CGPoint(x: 8, y: 32), controlPoint1: CGPoint(x: 18.75, y: 8), controlPoint2: CGPoint(x: 8, y: 18.75))
        spinnerPath.addCurve(to: CGPoint(x: 32, y: 56), controlPoint1: CGPoint(x: 8, y: 45.25), controlPoint2: CGPoint(x: 18.75, y: 56))
        spinnerPath.addCurve(to: CGPoint(x: 56, y: 32), controlPoint1: CGPoint(x: 45.25, y: 56), controlPoint2: CGPoint(x: 56, y: 45.25))
        spinnerPath.addCurve(to: CGPoint(x: 54.24, y: 22.96), controlPoint1: CGPoint(x: 56, y: 28.8), controlPoint2: CGPoint(x: 55.38, y: 25.75))
        spinnerPath.addLine(to: CGPoint(x: 54.24, y: 22.96))
        spinnerPath.close()
        spinnerPath.usesEvenOddFillRule = true
        color.setFill()
        spinnerPath.fill()
    }

    @objc dynamic public class func drawIcon_clock_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Pending Drawing
        let pendingPath = UIBezierPath()
        pendingPath.move(to: CGPoint(x: 32, y: 56))
        pendingPath.addLine(to: CGPoint(x: 32, y: 56))
        pendingPath.addCurve(to: CGPoint(x: 56, y: 32), controlPoint1: CGPoint(x: 45.25, y: 56), controlPoint2: CGPoint(x: 56, y: 45.25))
        pendingPath.addCurve(to: CGPoint(x: 32, y: 8), controlPoint1: CGPoint(x: 56, y: 18.75), controlPoint2: CGPoint(x: 45.25, y: 8))
        pendingPath.addCurve(to: CGPoint(x: 8, y: 32), controlPoint1: CGPoint(x: 18.75, y: 8), controlPoint2: CGPoint(x: 8, y: 18.75))
        pendingPath.addCurve(to: CGPoint(x: 32, y: 56), controlPoint1: CGPoint(x: 8, y: 45.25), controlPoint2: CGPoint(x: 18.75, y: 56))
        pendingPath.addLine(to: CGPoint(x: 32, y: 56))
        pendingPath.addLine(to: CGPoint(x: 32, y: 56))
        pendingPath.close()
        pendingPath.move(to: CGPoint(x: 32, y: 64))
        pendingPath.addLine(to: CGPoint(x: 32, y: 64))
        pendingPath.addCurve(to: CGPoint(x: 0, y: 32), controlPoint1: CGPoint(x: 14.33, y: 64), controlPoint2: CGPoint(x: 0, y: 49.67))
        pendingPath.addCurve(to: CGPoint(x: 32, y: 0), controlPoint1: CGPoint(x: 0, y: 14.33), controlPoint2: CGPoint(x: 14.33, y: 0))
        pendingPath.addCurve(to: CGPoint(x: 64, y: 32), controlPoint1: CGPoint(x: 49.67, y: 0), controlPoint2: CGPoint(x: 64, y: 14.33))
        pendingPath.addCurve(to: CGPoint(x: 32, y: 64), controlPoint1: CGPoint(x: 64, y: 49.67), controlPoint2: CGPoint(x: 49.67, y: 64))
        pendingPath.addLine(to: CGPoint(x: 32, y: 64))
        pendingPath.addLine(to: CGPoint(x: 32, y: 64))
        pendingPath.close()
        pendingPath.move(to: CGPoint(x: 36, y: 12))
        pendingPath.addCurve(to: CGPoint(x: 36, y: 28), controlPoint1: CGPoint(x: 36, y: 12), controlPoint2: CGPoint(x: 36, y: 21.02))
        pendingPath.addLine(to: CGPoint(x: 48, y: 28))
        pendingPath.addLine(to: CGPoint(x: 48, y: 36))
        pendingPath.addLine(to: CGPoint(x: 28, y: 36))
        pendingPath.addLine(to: CGPoint(x: 28, y: 28))
        pendingPath.addCurve(to: CGPoint(x: 28, y: 12), controlPoint1: CGPoint(x: 28, y: 21.02), controlPoint2: CGPoint(x: 28, y: 12))
        pendingPath.addLine(to: CGPoint(x: 36, y: 12))
        pendingPath.addLine(to: CGPoint(x: 36, y: 12))
        pendingPath.close()
        color.setFill()
        pendingPath.fill()
    }

    @objc dynamic public class func drawIcon_search_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Search Drawing
        let searchPath = UIBezierPath()
        searchPath.move(to: CGPoint(x: 55.9, y: 27.97))
        searchPath.addCurve(to: CGPoint(x: 27.95, y: 0), controlPoint1: CGPoint(x: 55.9, y: 12.52), controlPoint2: CGPoint(x: 43.38, y: 0))
        searchPath.addCurve(to: CGPoint(x: 0, y: 27.97), controlPoint1: CGPoint(x: 12.51, y: 0), controlPoint2: CGPoint(x: 0, y: 12.52))
        searchPath.addCurve(to: CGPoint(x: 27.95, y: 55.95), controlPoint1: CGPoint(x: 0, y: 43.42), controlPoint2: CGPoint(x: 12.51, y: 55.95))
        searchPath.addCurve(to: CGPoint(x: 44.69, y: 50.38), controlPoint1: CGPoint(x: 34.23, y: 55.95), controlPoint2: CGPoint(x: 40.02, y: 53.87))
        searchPath.addLine(to: CGPoint(x: 58.35, y: 64))
        searchPath.addLine(to: CGPoint(x: 64, y: 58.35))
        searchPath.addLine(to: CGPoint(x: 50.33, y: 44.73))
        searchPath.addCurve(to: CGPoint(x: 55.9, y: 27.97), controlPoint1: CGPoint(x: 53.83, y: 40.06), controlPoint2: CGPoint(x: 55.9, y: 34.26))
        searchPath.close()
        searchPath.move(to: CGPoint(x: 28, y: 48))
        searchPath.addCurve(to: CGPoint(x: 48, y: 28), controlPoint1: CGPoint(x: 39.05, y: 48), controlPoint2: CGPoint(x: 48, y: 39.05))
        searchPath.addCurve(to: CGPoint(x: 28, y: 8), controlPoint1: CGPoint(x: 48, y: 16.95), controlPoint2: CGPoint(x: 39.05, y: 8))
        searchPath.addCurve(to: CGPoint(x: 8, y: 28), controlPoint1: CGPoint(x: 16.95, y: 8), controlPoint2: CGPoint(x: 8, y: 16.95))
        searchPath.addCurve(to: CGPoint(x: 28, y: 48), controlPoint1: CGPoint(x: 8, y: 39.05), controlPoint2: CGPoint(x: 16.95, y: 48))
        searchPath.close()
        searchPath.usesEvenOddFillRule = true
        color.setFill()
        searchPath.fill()
    }

    @objc dynamic public class func drawIcon_endCall_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Hangup Drawing
        let hangupPath = UIBezierPath()
        hangupPath.move(to: CGPoint(x: 61.8, y: 27.81))
        hangupPath.addCurve(to: CGPoint(x: 61.45, y: 43.25), controlPoint1: CGPoint(x: 64.9, y: 30.84), controlPoint2: CGPoint(x: 64.67, y: 37.43))
        hangupPath.addCurve(to: CGPoint(x: 60.8, y: 44.27), controlPoint1: CGPoint(x: 61.12, y: 43.84), controlPoint2: CGPoint(x: 60.93, y: 44.14))
        hangupPath.addCurve(to: CGPoint(x: 59.51, y: 44.03), controlPoint1: CGPoint(x: 60.63, y: 44.43), controlPoint2: CGPoint(x: 60.49, y: 44.42))
        hangupPath.addCurve(to: CGPoint(x: 51.46, y: 41.03), controlPoint1: CGPoint(x: 57.54, y: 43.27), controlPoint2: CGPoint(x: 55.31, y: 42.45))
        hangupPath.addCurve(to: CGPoint(x: 46.62, y: 39.23), controlPoint1: CGPoint(x: 49.21, y: 40.2), controlPoint2: CGPoint(x: 47.7, y: 39.65))
        hangupPath.addCurve(to: CGPoint(x: 45.33, y: 37.56), controlPoint1: CGPoint(x: 45.31, y: 38.73), controlPoint2: CGPoint(x: 45.33, y: 38.74))
        hangupPath.addLine(to: CGPoint(x: 45.31, y: 33.24))
        hangupPath.addLine(to: CGPoint(x: 45.29, y: 30.32))
        hangupPath.addLine(to: CGPoint(x: 42.44, y: 29.6))
        hangupPath.addCurve(to: CGPoint(x: 32.01, y: 28.31), controlPoint1: CGPoint(x: 39.36, y: 28.82), controlPoint2: CGPoint(x: 35.78, y: 28.31))
        hangupPath.addCurve(to: CGPoint(x: 21.54, y: 29.61), controlPoint1: CGPoint(x: 28.24, y: 28.31), controlPoint2: CGPoint(x: 24.7, y: 28.82))
        hangupPath.addLine(to: CGPoint(x: 18.68, y: 30.33))
        hangupPath.addLine(to: CGPoint(x: 18.69, y: 37.52))
        hangupPath.addCurve(to: CGPoint(x: 18.66, y: 38.18), controlPoint1: CGPoint(x: 18.69, y: 37.85), controlPoint2: CGPoint(x: 18.68, y: 38.01))
        hangupPath.addCurve(to: CGPoint(x: 18.5, y: 38.66), controlPoint1: CGPoint(x: 18.63, y: 38.46), controlPoint2: CGPoint(x: 18.57, y: 38.6))
        hangupPath.addCurve(to: CGPoint(x: 17.34, y: 39.22), controlPoint1: CGPoint(x: 18.38, y: 38.79), controlPoint2: CGPoint(x: 18.13, y: 38.92))
        hangupPath.addCurve(to: CGPoint(x: 12.5, y: 41.05), controlPoint1: CGPoint(x: 16.07, y: 39.69), controlPoint2: CGPoint(x: 14.27, y: 40.37))
        hangupPath.addCurve(to: CGPoint(x: 4.55, y: 44), controlPoint1: CGPoint(x: 8.69, y: 42.45), controlPoint2: CGPoint(x: 6.46, y: 43.28))
        hangupPath.addCurve(to: CGPoint(x: 2.55, y: 43.25), controlPoint1: CGPoint(x: 3.16, y: 44.55), controlPoint2: CGPoint(x: 3.3, y: 44.6))
        hangupPath.addCurve(to: CGPoint(x: 0.93, y: 39.54), controlPoint1: CGPoint(x: 1.88, y: 42.03), controlPoint2: CGPoint(x: 1.34, y: 40.78))
        hangupPath.addCurve(to: CGPoint(x: 2.14, y: 27.85), controlPoint1: CGPoint(x: -0.61, y: 34.85), controlPoint2: CGPoint(x: -0.26, y: 30.25))
        hangupPath.addCurve(to: CGPoint(x: 31.98, y: 19), controlPoint1: CGPoint(x: 7.04, y: 23.07), controlPoint2: CGPoint(x: 19.45, y: 18.99))
        hangupPath.addCurve(to: CGPoint(x: 61.8, y: 27.81), controlPoint1: CGPoint(x: 44.54, y: 19.01), controlPoint2: CGPoint(x: 56.96, y: 23.08))
        hangupPath.close()
        color.setFill()
        hangupPath.fill()
    }

    @objc dynamic public class func drawIcon_exclamationMark_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Error Drawing
        let errorPath = UIBezierPath()
        errorPath.move(to: CGPoint(x: 36, y: 4))
        errorPath.addLine(to: CGPoint(x: 36, y: 44))
        errorPath.addLine(to: CGPoint(x: 28, y: 44))
        errorPath.addLine(to: CGPoint(x: 28, y: 4))
        errorPath.addLine(to: CGPoint(x: 36, y: 4))
        errorPath.close()
        errorPath.move(to: CGPoint(x: 36, y: 52))
        errorPath.addLine(to: CGPoint(x: 36, y: 60))
        errorPath.addLine(to: CGPoint(x: 28, y: 60))
        errorPath.addLine(to: CGPoint(x: 28, y: 52))
        errorPath.addLine(to: CGPoint(x: 36, y: 52))
        errorPath.close()
        errorPath.usesEvenOddFillRule = true
        color.setFill()
        errorPath.fill()
    }

    @objc dynamic public class func drawIcon_downArrow_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Down Drawing
        let downPath = UIBezierPath()
        downPath.move(to: CGPoint(x: 32.16, y: 52.07))
        downPath.addLine(to: CGPoint(x: 62.31, y: 21.62))
        downPath.addLine(to: CGPoint(x: 56.74, y: 16))
        downPath.addLine(to: CGPoint(x: 32.16, y: 40.82))
        downPath.addLine(to: CGPoint(x: 7.57, y: 16))
        downPath.addLine(to: CGPoint(x: 2, y: 21.62))
        downPath.addLine(to: CGPoint(x: 32.16, y: 52.07))
        downPath.close()
        downPath.usesEvenOddFillRule = true
        color.setFill()
        downPath.fill()
    }

    @objc dynamic public class func drawIcon_hamburger_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// List Drawing
        let listPath = UIBezierPath()
        listPath.move(to: CGPoint(x: 0, y: 28))
        listPath.addLine(to: CGPoint(x: 64, y: 28))
        listPath.addLine(to: CGPoint(x: 64, y: 36))
        listPath.addLine(to: CGPoint(x: 0, y: 36))
        listPath.addLine(to: CGPoint(x: 0, y: 28))
        listPath.addLine(to: CGPoint(x: 0, y: 28))
        listPath.close()
        listPath.move(to: CGPoint(x: 0, y: 4))
        listPath.addLine(to: CGPoint(x: 64, y: 4))
        listPath.addLine(to: CGPoint(x: 64, y: 12))
        listPath.addLine(to: CGPoint(x: 0, y: 12))
        listPath.addLine(to: CGPoint(x: 0, y: 4))
        listPath.addLine(to: CGPoint(x: 0, y: 4))
        listPath.close()
        listPath.move(to: CGPoint(x: 0, y: 52))
        listPath.addLine(to: CGPoint(x: 64, y: 52))
        listPath.addLine(to: CGPoint(x: 64, y: 60))
        listPath.addLine(to: CGPoint(x: 0, y: 60))
        listPath.addLine(to: CGPoint(x: 0, y: 52))
        listPath.addLine(to: CGPoint(x: 0, y: 52))
        listPath.close()
        listPath.usesEvenOddFillRule = true
        color.setFill()
        listPath.fill()
    }

    @objc dynamic public class func drawIcon_forwardArrow_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Back Drawing
        let backPath = UIBezierPath()
        backPath.move(to: CGPoint(x: 45.22, y: 36.27))
        backPath.addLine(to: CGPoint(x: 25.01, y: 56.22))
        backPath.addLine(to: CGPoint(x: 30.47, y: 61.6))
        backPath.addLine(to: CGPoint(x: 60, y: 32.45))
        backPath.addLine(to: CGPoint(x: 30.47, y: 3.29))
        backPath.addLine(to: CGPoint(x: 25.01, y: 8.68))
        backPath.addLine(to: CGPoint(x: 45.25, y: 28.65))
        backPath.addLine(to: CGPoint(x: 6, y: 28.65))
        backPath.addLine(to: CGPoint(x: 6, y: 36.27))
        backPath.addLine(to: CGPoint(x: 45.22, y: 36.27))
        backPath.addLine(to: CGPoint(x: 45.22, y: 36.27))
        backPath.close()
        backPath.usesEvenOddFillRule = true
        color.setFill()
        backPath.fill()
    }

    @objc dynamic public class func drawIcon_camera_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Video Drawing
        let videoPath = UIBezierPath()
        videoPath.move(to: CGPoint(x: 10.26, y: 8))
        videoPath.addLine(to: CGPoint(x: 29.74, y: 8))
        videoPath.addCurve(to: CGPoint(x: 35.91, y: 9.07), controlPoint1: CGPoint(x: 33.31, y: 8), controlPoint2: CGPoint(x: 34.6, y: 8.37))
        videoPath.addCurve(to: CGPoint(x: 38.93, y: 12.09), controlPoint1: CGPoint(x: 37.21, y: 9.77), controlPoint2: CGPoint(x: 38.23, y: 10.79))
        videoPath.addCurve(to: CGPoint(x: 40, y: 18.26), controlPoint1: CGPoint(x: 39.63, y: 13.4), controlPoint2: CGPoint(x: 40, y: 14.69))
        videoPath.addLine(to: CGPoint(x: 40, y: 45.74))
        videoPath.addCurve(to: CGPoint(x: 38.93, y: 51.91), controlPoint1: CGPoint(x: 40, y: 49.31), controlPoint2: CGPoint(x: 39.63, y: 50.6))
        videoPath.addCurve(to: CGPoint(x: 35.91, y: 54.93), controlPoint1: CGPoint(x: 38.23, y: 53.21), controlPoint2: CGPoint(x: 37.21, y: 54.23))
        videoPath.addCurve(to: CGPoint(x: 29.74, y: 56), controlPoint1: CGPoint(x: 34.6, y: 55.63), controlPoint2: CGPoint(x: 33.31, y: 56))
        videoPath.addLine(to: CGPoint(x: 10.26, y: 56))
        videoPath.addCurve(to: CGPoint(x: 4.09, y: 54.93), controlPoint1: CGPoint(x: 6.69, y: 56), controlPoint2: CGPoint(x: 5.4, y: 55.63))
        videoPath.addCurve(to: CGPoint(x: 1.07, y: 51.91), controlPoint1: CGPoint(x: 2.79, y: 54.23), controlPoint2: CGPoint(x: 1.77, y: 53.21))
        videoPath.addCurve(to: CGPoint(x: 0, y: 45.74), controlPoint1: CGPoint(x: 0.37, y: 50.6), controlPoint2: CGPoint(x: 0, y: 49.31))
        videoPath.addLine(to: CGPoint(x: 0, y: 18.26))
        videoPath.addCurve(to: CGPoint(x: 1.07, y: 12.09), controlPoint1: CGPoint(x: 0, y: 14.69), controlPoint2: CGPoint(x: 0.37, y: 13.4))
        videoPath.addCurve(to: CGPoint(x: 4.09, y: 9.07), controlPoint1: CGPoint(x: 1.77, y: 10.79), controlPoint2: CGPoint(x: 2.79, y: 9.77))
        videoPath.addCurve(to: CGPoint(x: 10.26, y: 8), controlPoint1: CGPoint(x: 5.4, y: 8.37), controlPoint2: CGPoint(x: 6.69, y: 8))
        videoPath.close()
        videoPath.move(to: CGPoint(x: 45.17, y: 29.18))
        videoPath.addLine(to: CGPoint(x: 57.18, y: 17.22))
        videoPath.addCurve(to: CGPoint(x: 62.83, y: 17.23), controlPoint1: CGPoint(x: 58.74, y: 15.66), controlPoint2: CGPoint(x: 61.27, y: 15.66))
        videoPath.addCurve(to: CGPoint(x: 64, y: 20.05), controlPoint1: CGPoint(x: 63.58, y: 17.98), controlPoint2: CGPoint(x: 64, y: 18.99))
        videoPath.addLine(to: CGPoint(x: 64, y: 43.98))
        videoPath.addCurve(to: CGPoint(x: 60, y: 47.98), controlPoint1: CGPoint(x: 64, y: 46.19), controlPoint2: CGPoint(x: 62.21, y: 47.98))
        videoPath.addCurve(to: CGPoint(x: 57.18, y: 46.82), controlPoint1: CGPoint(x: 58.94, y: 47.98), controlPoint2: CGPoint(x: 57.93, y: 47.57))
        videoPath.addLine(to: CGPoint(x: 45.17, y: 34.85))
        videoPath.addCurve(to: CGPoint(x: 45.16, y: 29.19), controlPoint1: CGPoint(x: 43.61, y: 33.29), controlPoint2: CGPoint(x: 43.6, y: 30.76))
        videoPath.addLine(to: CGPoint(x: 45.17, y: 29.18))
        videoPath.close()
        videoPath.usesEvenOddFillRule = true
        color.setFill()
        videoPath.fill()
    }

    @objc dynamic public class func drawIcon_play_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Play Drawing
        let playPath = UIBezierPath()
        playPath.move(to: CGPoint(x: 16, y: 62.31))
        playPath.addLine(to: CGPoint(x: 64, y: 32.16))
        playPath.addLine(to: CGPoint(x: 16, y: 2))
        playPath.addLine(to: CGPoint(x: 16, y: 62.31))
        playPath.close()
        playPath.usesEvenOddFillRule = true
        color.setFill()
        playPath.fill()
    }

    @objc dynamic public class func drawIcon_gear_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Settings Drawing
        let settingsPath = UIBezierPath()
        settingsPath.move(to: CGPoint(x: 11.32, y: 44.19))
        settingsPath.addCurve(to: CGPoint(x: 8.76, y: 38), controlPoint1: CGPoint(x: 10.19, y: 42.28), controlPoint2: CGPoint(x: 9.32, y: 40.2))
        settingsPath.addLine(to: CGPoint(x: 0, y: 38))
        settingsPath.addLine(to: CGPoint(x: 0, y: 26))
        settingsPath.addLine(to: CGPoint(x: 8.76, y: 26))
        settingsPath.addCurve(to: CGPoint(x: 11.32, y: 19.81), controlPoint1: CGPoint(x: 9.32, y: 23.8), controlPoint2: CGPoint(x: 10.19, y: 21.72))
        settingsPath.addLine(to: CGPoint(x: 5.13, y: 13.62))
        settingsPath.addLine(to: CGPoint(x: 13.62, y: 5.13))
        settingsPath.addLine(to: CGPoint(x: 19.81, y: 11.32))
        settingsPath.addCurve(to: CGPoint(x: 26, y: 8.76), controlPoint1: CGPoint(x: 21.72, y: 10.19), controlPoint2: CGPoint(x: 23.8, y: 9.32))
        settingsPath.addLine(to: CGPoint(x: 26, y: 0))
        settingsPath.addLine(to: CGPoint(x: 38, y: 0))
        settingsPath.addLine(to: CGPoint(x: 38, y: 8.76))
        settingsPath.addCurve(to: CGPoint(x: 44.19, y: 11.32), controlPoint1: CGPoint(x: 40.2, y: 9.32), controlPoint2: CGPoint(x: 42.28, y: 10.19))
        settingsPath.addLine(to: CGPoint(x: 50.38, y: 5.13))
        settingsPath.addLine(to: CGPoint(x: 58.87, y: 13.62))
        settingsPath.addLine(to: CGPoint(x: 52.68, y: 19.81))
        settingsPath.addCurve(to: CGPoint(x: 55.24, y: 26), controlPoint1: CGPoint(x: 53.81, y: 21.72), controlPoint2: CGPoint(x: 54.68, y: 23.8))
        settingsPath.addLine(to: CGPoint(x: 64, y: 26))
        settingsPath.addLine(to: CGPoint(x: 64, y: 38))
        settingsPath.addLine(to: CGPoint(x: 55.24, y: 38))
        settingsPath.addCurve(to: CGPoint(x: 52.68, y: 44.19), controlPoint1: CGPoint(x: 54.68, y: 40.2), controlPoint2: CGPoint(x: 53.81, y: 42.28))
        settingsPath.addLine(to: CGPoint(x: 58.87, y: 50.38))
        settingsPath.addLine(to: CGPoint(x: 50.38, y: 58.87))
        settingsPath.addLine(to: CGPoint(x: 44.19, y: 52.68))
        settingsPath.addCurve(to: CGPoint(x: 38, y: 55.24), controlPoint1: CGPoint(x: 42.28, y: 53.81), controlPoint2: CGPoint(x: 40.2, y: 54.68))
        settingsPath.addLine(to: CGPoint(x: 38, y: 64))
        settingsPath.addLine(to: CGPoint(x: 26, y: 64))
        settingsPath.addLine(to: CGPoint(x: 26, y: 55.24))
        settingsPath.addCurve(to: CGPoint(x: 19.81, y: 52.68), controlPoint1: CGPoint(x: 23.8, y: 54.68), controlPoint2: CGPoint(x: 21.72, y: 53.81))
        settingsPath.addLine(to: CGPoint(x: 13.62, y: 58.87))
        settingsPath.addLine(to: CGPoint(x: 5.13, y: 50.38))
        settingsPath.addLine(to: CGPoint(x: 11.32, y: 44.19))
        settingsPath.addLine(to: CGPoint(x: 11.32, y: 44.19))
        settingsPath.close()
        settingsPath.move(to: CGPoint(x: 32, y: 48))
        settingsPath.addCurve(to: CGPoint(x: 48, y: 32), controlPoint1: CGPoint(x: 40.84, y: 48), controlPoint2: CGPoint(x: 48, y: 40.84))
        settingsPath.addCurve(to: CGPoint(x: 32, y: 16), controlPoint1: CGPoint(x: 48, y: 23.16), controlPoint2: CGPoint(x: 40.84, y: 16))
        settingsPath.addCurve(to: CGPoint(x: 16, y: 32), controlPoint1: CGPoint(x: 23.16, y: 16), controlPoint2: CGPoint(x: 16, y: 23.16))
        settingsPath.addCurve(to: CGPoint(x: 32, y: 48), controlPoint1: CGPoint(x: 16, y: 40.84), controlPoint2: CGPoint(x: 23.16, y: 48))
        settingsPath.addLine(to: CGPoint(x: 32, y: 48))
        settingsPath.close()
        settingsPath.usesEvenOddFillRule = true
        color.setFill()
        settingsPath.fill()
    }

    @objc dynamic public class func drawIcon_pause_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Pause Drawing
        let pausePath = UIBezierPath()
        pausePath.move(to: CGPoint(x: 16, y: 0))
        pausePath.addLine(to: CGPoint(x: 24, y: 0))
        pausePath.addLine(to: CGPoint(x: 24, y: 64))
        pausePath.addLine(to: CGPoint(x: 16, y: 64))
        pausePath.addLine(to: CGPoint(x: 16, y: 0))
        pausePath.addLine(to: CGPoint(x: 16, y: 0))
        pausePath.close()
        pausePath.move(to: CGPoint(x: 40, y: 0))
        pausePath.addLine(to: CGPoint(x: 48, y: 0))
        pausePath.addLine(to: CGPoint(x: 48, y: 64))
        pausePath.addLine(to: CGPoint(x: 40, y: 64))
        pausePath.addLine(to: CGPoint(x: 40, y: 0))
        pausePath.addLine(to: CGPoint(x: 40, y: 0))
        pausePath.close()
        pausePath.usesEvenOddFillRule = true
        color.setFill()
        pausePath.fill()
    }

    @objc dynamic public class func drawIcon_backArrow_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Back Drawing
        let backPath = UIBezierPath()
        backPath.move(to: CGPoint(x: 19.78, y: 36.27))
        backPath.addLine(to: CGPoint(x: 39.99, y: 56.22))
        backPath.addLine(to: CGPoint(x: 34.53, y: 61.6))
        backPath.addLine(to: CGPoint(x: 5, y: 32.45))
        backPath.addLine(to: CGPoint(x: 34.53, y: 3.29))
        backPath.addLine(to: CGPoint(x: 39.99, y: 8.68))
        backPath.addLine(to: CGPoint(x: 19.75, y: 28.65))
        backPath.addLine(to: CGPoint(x: 59, y: 28.65))
        backPath.addLine(to: CGPoint(x: 59, y: 36.27))
        backPath.addLine(to: CGPoint(x: 19.78, y: 36.27))
        backPath.addLine(to: CGPoint(x: 19.78, y: 36.27))
        backPath.close()
        backPath.usesEvenOddFillRule = true
        color.setFill()
        backPath.fill()
    }

    @objc dynamic public class func drawIcon_cross_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Close Drawing
        let closePath = UIBezierPath()
        closePath.move(to: CGPoint(x: 11.52, y: 58))
        closePath.addLine(to: CGPoint(x: 32, y: 37.52))
        closePath.addLine(to: CGPoint(x: 52.48, y: 58))
        closePath.addLine(to: CGPoint(x: 58, y: 52.48))
        closePath.addLine(to: CGPoint(x: 37.52, y: 32))
        closePath.addLine(to: CGPoint(x: 58, y: 11.52))
        closePath.addLine(to: CGPoint(x: 52.48, y: 6))
        closePath.addLine(to: CGPoint(x: 32, y: 26.48))
        closePath.addLine(to: CGPoint(x: 11.52, y: 6))
        closePath.addLine(to: CGPoint(x: 6, y: 11.52))
        closePath.addLine(to: CGPoint(x: 26.48, y: 32))
        closePath.addLine(to: CGPoint(x: 6, y: 52.48))
        closePath.addLine(to: CGPoint(x: 11.52, y: 58))
        closePath.close()
        closePath.usesEvenOddFillRule = true
        color.setFill()
        closePath.fill()
    }

    @objc dynamic public class func drawIcon_phone_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Call Drawing
        let callPath = UIBezierPath()
        callPath.move(to: CGPoint(x: 50.85, y: 64))
        callPath.addLine(to: CGPoint(x: 50.85, y: 64))
        callPath.addCurve(to: CGPoint(x: 63.67, y: 50.49), controlPoint1: CGPoint(x: 56.04, y: 64), controlPoint2: CGPoint(x: 61.44, y: 58.16))
        callPath.addCurve(to: CGPoint(x: 62.61, y: 48.13), controlPoint1: CGPoint(x: 64.19, y: 48.7), controlPoint2: CGPoint(x: 64.26, y: 48.85))
        callPath.addCurve(to: CGPoint(x: 53.32, y: 43.89), controlPoint1: CGPoint(x: 60.36, y: 47.13), controlPoint2: CGPoint(x: 57.76, y: 45.94))
        callPath.addCurve(to: CGPoint(x: 47.63, y: 41.33), controlPoint1: CGPoint(x: 51.23, y: 42.96), controlPoint2: CGPoint(x: 49.12, y: 42.01))
        callPath.addCurve(to: CGPoint(x: 46.16, y: 40.82), controlPoint1: CGPoint(x: 46.7, y: 40.92), controlPoint2: CGPoint(x: 46.37, y: 40.82))
        callPath.addCurve(to: CGPoint(x: 45.61, y: 41.1), controlPoint1: CGPoint(x: 46.05, y: 40.82), controlPoint2: CGPoint(x: 45.89, y: 40.89))
        callPath.addCurve(to: CGPoint(x: 45.03, y: 41.64), controlPoint1: CGPoint(x: 45.45, y: 41.23), controlPoint2: CGPoint(x: 45.31, y: 41.36))
        callPath.addLine(to: CGPoint(x: 41.4, y: 45.27))
        callPath.addLine(to: CGPoint(x: 38.89, y: 47.79))
        callPath.addLine(to: CGPoint(x: 35.83, y: 45.97))
        callPath.addCurve(to: CGPoint(x: 25.81, y: 38.17), controlPoint1: CGPoint(x: 32.47, y: 43.96), controlPoint2: CGPoint(x: 29.01, y: 41.38))
        callPath.addCurve(to: CGPoint(x: 18.02, y: 28.18), controlPoint1: CGPoint(x: 22.59, y: 34.95), controlPoint2: CGPoint(x: 19.98, y: 31.47))
        callPath.addLine(to: CGPoint(x: 16.21, y: 25.14))
        callPath.addLine(to: CGPoint(x: 18.69, y: 22.62))
        callPath.addLine(to: CGPoint(x: 22.36, y: 18.91))
        callPath.addCurve(to: CGPoint(x: 22.7, y: 16.39), controlPoint1: CGPoint(x: 23.38, y: 17.9), controlPoint2: CGPoint(x: 23.38, y: 17.93))
        callPath.addCurve(to: CGPoint(x: 20.12, y: 10.73), controlPoint1: CGPoint(x: 22.13, y: 15.11), controlPoint2: CGPoint(x: 21.33, y: 13.34))
        callPath.addCurve(to: CGPoint(x: 15.82, y: 1.3), controlPoint1: CGPoint(x: 18.05, y: 6.23), controlPoint2: CGPoint(x: 16.86, y: 3.62))
        callPath.addCurve(to: CGPoint(x: 14.93, y: 0), controlPoint1: CGPoint(x: 15.32, y: 0.13), controlPoint2: CGPoint(x: 15.21, y: 0))
        callPath.addCurve(to: CGPoint(x: 13.51, y: 0.31), controlPoint1: CGPoint(x: 14.71, y: 0), controlPoint2: CGPoint(x: 14.29, y: 0.09))
        callPath.addCurve(to: CGPoint(x: 0, y: 13.22), controlPoint1: CGPoint(x: 5.78, y: 2.55), controlPoint2: CGPoint(x: -0.05, y: 7.99))
        callPath.addCurve(to: CGPoint(x: 17.87, y: 46.16), controlPoint1: CGPoint(x: 0.08, y: 21.38), controlPoint2: CGPoint(x: 7.17, y: 35.45))
        callPath.addCurve(to: CGPoint(x: 50.73, y: 64), controlPoint1: CGPoint(x: 28.54, y: 56.84), controlPoint2: CGPoint(x: 42.59, y: 63.92))
        callPath.addLine(to: CGPoint(x: 50.85, y: 64))
        callPath.close()
        callPath.usesEvenOddFillRule = true
        color.setFill()
        callPath.fill()
    }

    @objc dynamic public class func drawIcon_person_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Contacts Drawing
        let contactsPath = UIBezierPath()
        contactsPath.move(to: CGPoint(x: 46.43, y: 40))
        contactsPath.addLine(to: CGPoint(x: 47.99, y: 40))
        contactsPath.addCurve(to: CGPoint(x: 60, y: 52), controlPoint1: CGPoint(x: 54.62, y: 40), controlPoint2: CGPoint(x: 60, y: 45.39))
        contactsPath.addLine(to: CGPoint(x: 60, y: 57.08))
        contactsPath.addLine(to: CGPoint(x: 60, y: 57.08))
        contactsPath.addCurve(to: CGPoint(x: 32, y: 64), controlPoint1: CGPoint(x: 51.64, y: 61.5), controlPoint2: CGPoint(x: 42.11, y: 64))
        contactsPath.addCurve(to: CGPoint(x: 4, y: 57.08), controlPoint1: CGPoint(x: 21.89, y: 64), controlPoint2: CGPoint(x: 12.36, y: 61.5))
        contactsPath.addLine(to: CGPoint(x: 4, y: 52))
        contactsPath.addCurve(to: CGPoint(x: 16.01, y: 40), controlPoint1: CGPoint(x: 4, y: 45.37), controlPoint2: CGPoint(x: 9.37, y: 40))
        contactsPath.addLine(to: CGPoint(x: 17.57, y: 40))
        contactsPath.addCurve(to: CGPoint(x: 32, y: 44), controlPoint1: CGPoint(x: 21.78, y: 42.54), controlPoint2: CGPoint(x: 26.72, y: 44))
        contactsPath.addCurve(to: CGPoint(x: 46.43, y: 40), controlPoint1: CGPoint(x: 37.28, y: 44), controlPoint2: CGPoint(x: 42.22, y: 42.54))
        contactsPath.addLine(to: CGPoint(x: 46.43, y: 40))
        contactsPath.close()
        contactsPath.move(to: CGPoint(x: 32, y: 32))
        contactsPath.addCurve(to: CGPoint(x: 48, y: 16), controlPoint1: CGPoint(x: 40.84, y: 32), controlPoint2: CGPoint(x: 48, y: 24.84))
        contactsPath.addCurve(to: CGPoint(x: 32, y: 0), controlPoint1: CGPoint(x: 48, y: 7.16), controlPoint2: CGPoint(x: 40.84, y: 0))
        contactsPath.addCurve(to: CGPoint(x: 16, y: 16), controlPoint1: CGPoint(x: 23.16, y: 0), controlPoint2: CGPoint(x: 16, y: 7.16))
        contactsPath.addCurve(to: CGPoint(x: 32, y: 32), controlPoint1: CGPoint(x: 16, y: 24.84), controlPoint2: CGPoint(x: 23.16, y: 32))
        contactsPath.close()
        contactsPath.usesEvenOddFillRule = true
        color.setFill()
        contactsPath.fill()
    }

    @objc dynamic public class func drawIcon_document_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// File Drawing
        let filePath = UIBezierPath()
        filePath.move(to: CGPoint(x: 11.96, y: 0))
        filePath.addCurve(to: CGPoint(x: 8, y: 4), controlPoint1: CGPoint(x: 9.77, y: 0), controlPoint2: CGPoint(x: 8, y: 1.78))
        filePath.addLine(to: CGPoint(x: 8, y: 60))
        filePath.addCurve(to: CGPoint(x: 12.01, y: 64), controlPoint1: CGPoint(x: 8, y: 62.21), controlPoint2: CGPoint(x: 9.82, y: 64))
        filePath.addLine(to: CGPoint(x: 51.99, y: 64))
        filePath.addCurve(to: CGPoint(x: 56, y: 60.02), controlPoint1: CGPoint(x: 54.2, y: 64), controlPoint2: CGPoint(x: 56, y: 62.18))
        filePath.addLine(to: CGPoint(x: 56, y: 24))
        filePath.addLine(to: CGPoint(x: 40.11, y: 24))
        filePath.addCurve(to: CGPoint(x: 31.99, y: 15.98), controlPoint1: CGPoint(x: 35.62, y: 24), controlPoint2: CGPoint(x: 31.99, y: 20.45))
        filePath.addLine(to: CGPoint(x: 31.99, y: 0))
        filePath.addLine(to: CGPoint(x: 11.96, y: 0))
        filePath.close()
        filePath.move(to: CGPoint(x: 56, y: 20))
        filePath.addLine(to: CGPoint(x: 41.43, y: 20))
        filePath.addCurve(to: CGPoint(x: 36, y: 14.95), controlPoint1: CGPoint(x: 38.61, y: 20), controlPoint2: CGPoint(x: 36.32, y: 17.78))
        filePath.addLine(to: CGPoint(x: 36, y: 0))
        filePath.addLine(to: CGPoint(x: 56, y: 20))
        filePath.close()
        filePath.usesEvenOddFillRule = true
        color.setFill()
        filePath.fill()
    }

    @objc dynamic public class func drawIcon_eye_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// View Drawing
        let viewPath = UIBezierPath()
        viewPath.move(to: CGPoint(x: 64, y: 32))
        viewPath.addCurve(to: CGPoint(x: 32, y: 8), controlPoint1: CGPoint(x: 59.34, y: 18.02), controlPoint2: CGPoint(x: 46.77, y: 8))
        viewPath.addCurve(to: CGPoint(x: 0, y: 32), controlPoint1: CGPoint(x: 17.23, y: 8), controlPoint2: CGPoint(x: 4.66, y: 18.02))
        viewPath.addCurve(to: CGPoint(x: 32, y: 56), controlPoint1: CGPoint(x: 4.66, y: 45.98), controlPoint2: CGPoint(x: 17.23, y: 56))
        viewPath.addCurve(to: CGPoint(x: 64, y: 32), controlPoint1: CGPoint(x: 46.77, y: 56), controlPoint2: CGPoint(x: 59.34, y: 45.98))
        viewPath.addLine(to: CGPoint(x: 64, y: 32))
        viewPath.close()
        viewPath.move(to: CGPoint(x: 32, y: 44))
        viewPath.addCurve(to: CGPoint(x: 44, y: 32), controlPoint1: CGPoint(x: 38.63, y: 44), controlPoint2: CGPoint(x: 44, y: 38.63))
        viewPath.addCurve(to: CGPoint(x: 32, y: 20), controlPoint1: CGPoint(x: 44, y: 25.37), controlPoint2: CGPoint(x: 38.63, y: 20))
        viewPath.addCurve(to: CGPoint(x: 20, y: 32), controlPoint1: CGPoint(x: 25.37, y: 20), controlPoint2: CGPoint(x: 20, y: 25.37))
        viewPath.addCurve(to: CGPoint(x: 32, y: 44), controlPoint1: CGPoint(x: 20, y: 38.63), controlPoint2: CGPoint(x: 25.37, y: 44))
        viewPath.addLine(to: CGPoint(x: 32, y: 44))
        viewPath.close()
        viewPath.usesEvenOddFillRule = true
        color.setFill()
        viewPath.fill()
    }

    @objc dynamic public class func drawIcon_movie_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Movie Drawing
        let moviePath = UIBezierPath()
        moviePath.move(to: CGPoint(x: 44, y: 64))
        moviePath.addLine(to: CGPoint(x: 20, y: 64))
        moviePath.addCurve(to: CGPoint(x: 16, y: 60), controlPoint1: CGPoint(x: 20, y: 61.79), controlPoint2: CGPoint(x: 18.21, y: 60))
        moviePath.addCurve(to: CGPoint(x: 12, y: 64), controlPoint1: CGPoint(x: 13.79, y: 60), controlPoint2: CGPoint(x: 12, y: 61.79))
        moviePath.addLine(to: CGPoint(x: 8, y: 64))
        moviePath.addLine(to: CGPoint(x: 8, y: 0))
        moviePath.addLine(to: CGPoint(x: 12, y: 0))
        moviePath.addCurve(to: CGPoint(x: 16, y: 4), controlPoint1: CGPoint(x: 12, y: 2.21), controlPoint2: CGPoint(x: 13.79, y: 4))
        moviePath.addCurve(to: CGPoint(x: 20, y: 0), controlPoint1: CGPoint(x: 18.21, y: 4), controlPoint2: CGPoint(x: 20, y: 2.21))
        moviePath.addLine(to: CGPoint(x: 44, y: 0))
        moviePath.addCurve(to: CGPoint(x: 48, y: 4), controlPoint1: CGPoint(x: 44, y: 2.21), controlPoint2: CGPoint(x: 45.79, y: 4))
        moviePath.addCurve(to: CGPoint(x: 52, y: 0), controlPoint1: CGPoint(x: 50.21, y: 4), controlPoint2: CGPoint(x: 52, y: 2.21))
        moviePath.addLine(to: CGPoint(x: 56, y: 0))
        moviePath.addLine(to: CGPoint(x: 56, y: 64))
        moviePath.addLine(to: CGPoint(x: 52, y: 64))
        moviePath.addCurve(to: CGPoint(x: 48, y: 60), controlPoint1: CGPoint(x: 52, y: 61.79), controlPoint2: CGPoint(x: 50.21, y: 60))
        moviePath.addCurve(to: CGPoint(x: 44, y: 64), controlPoint1: CGPoint(x: 45.79, y: 60), controlPoint2: CGPoint(x: 44, y: 61.79))
        moviePath.close()
        moviePath.move(to: CGPoint(x: 16, y: 20))
        moviePath.addCurve(to: CGPoint(x: 20, y: 16), controlPoint1: CGPoint(x: 18.21, y: 20), controlPoint2: CGPoint(x: 20, y: 18.21))
        moviePath.addCurve(to: CGPoint(x: 16, y: 12), controlPoint1: CGPoint(x: 20, y: 13.79), controlPoint2: CGPoint(x: 18.21, y: 12))
        moviePath.addCurve(to: CGPoint(x: 12, y: 16), controlPoint1: CGPoint(x: 13.79, y: 12), controlPoint2: CGPoint(x: 12, y: 13.79))
        moviePath.addCurve(to: CGPoint(x: 16, y: 20), controlPoint1: CGPoint(x: 12, y: 18.21), controlPoint2: CGPoint(x: 13.79, y: 20))
        moviePath.close()
        moviePath.move(to: CGPoint(x: 16, y: 36))
        moviePath.addCurve(to: CGPoint(x: 20, y: 32), controlPoint1: CGPoint(x: 18.21, y: 36), controlPoint2: CGPoint(x: 20, y: 34.21))
        moviePath.addCurve(to: CGPoint(x: 16, y: 28), controlPoint1: CGPoint(x: 20, y: 29.79), controlPoint2: CGPoint(x: 18.21, y: 28))
        moviePath.addCurve(to: CGPoint(x: 12, y: 32), controlPoint1: CGPoint(x: 13.79, y: 28), controlPoint2: CGPoint(x: 12, y: 29.79))
        moviePath.addCurve(to: CGPoint(x: 16, y: 36), controlPoint1: CGPoint(x: 12, y: 34.21), controlPoint2: CGPoint(x: 13.79, y: 36))
        moviePath.close()
        moviePath.move(to: CGPoint(x: 16, y: 52))
        moviePath.addCurve(to: CGPoint(x: 20, y: 48), controlPoint1: CGPoint(x: 18.21, y: 52), controlPoint2: CGPoint(x: 20, y: 50.21))
        moviePath.addCurve(to: CGPoint(x: 16, y: 44), controlPoint1: CGPoint(x: 20, y: 45.79), controlPoint2: CGPoint(x: 18.21, y: 44))
        moviePath.addCurve(to: CGPoint(x: 12, y: 48), controlPoint1: CGPoint(x: 13.79, y: 44), controlPoint2: CGPoint(x: 12, y: 45.79))
        moviePath.addCurve(to: CGPoint(x: 16, y: 52), controlPoint1: CGPoint(x: 12, y: 50.21), controlPoint2: CGPoint(x: 13.79, y: 52))
        moviePath.close()
        moviePath.move(to: CGPoint(x: 48, y: 20))
        moviePath.addCurve(to: CGPoint(x: 52, y: 16), controlPoint1: CGPoint(x: 50.21, y: 20), controlPoint2: CGPoint(x: 52, y: 18.21))
        moviePath.addCurve(to: CGPoint(x: 48, y: 12), controlPoint1: CGPoint(x: 52, y: 13.79), controlPoint2: CGPoint(x: 50.21, y: 12))
        moviePath.addCurve(to: CGPoint(x: 44, y: 16), controlPoint1: CGPoint(x: 45.79, y: 12), controlPoint2: CGPoint(x: 44, y: 13.79))
        moviePath.addCurve(to: CGPoint(x: 48, y: 20), controlPoint1: CGPoint(x: 44, y: 18.21), controlPoint2: CGPoint(x: 45.79, y: 20))
        moviePath.close()
        moviePath.move(to: CGPoint(x: 48, y: 36))
        moviePath.addCurve(to: CGPoint(x: 52, y: 32), controlPoint1: CGPoint(x: 50.21, y: 36), controlPoint2: CGPoint(x: 52, y: 34.21))
        moviePath.addCurve(to: CGPoint(x: 48, y: 28), controlPoint1: CGPoint(x: 52, y: 29.79), controlPoint2: CGPoint(x: 50.21, y: 28))
        moviePath.addCurve(to: CGPoint(x: 44, y: 32), controlPoint1: CGPoint(x: 45.79, y: 28), controlPoint2: CGPoint(x: 44, y: 29.79))
        moviePath.addCurve(to: CGPoint(x: 48, y: 36), controlPoint1: CGPoint(x: 44, y: 34.21), controlPoint2: CGPoint(x: 45.79, y: 36))
        moviePath.close()
        moviePath.move(to: CGPoint(x: 48, y: 52))
        moviePath.addCurve(to: CGPoint(x: 52, y: 48), controlPoint1: CGPoint(x: 50.21, y: 52), controlPoint2: CGPoint(x: 52, y: 50.21))
        moviePath.addCurve(to: CGPoint(x: 48, y: 44), controlPoint1: CGPoint(x: 52, y: 45.79), controlPoint2: CGPoint(x: 50.21, y: 44))
        moviePath.addCurve(to: CGPoint(x: 44, y: 48), controlPoint1: CGPoint(x: 45.79, y: 44), controlPoint2: CGPoint(x: 44, y: 45.79))
        moviePath.addCurve(to: CGPoint(x: 48, y: 52), controlPoint1: CGPoint(x: 44, y: 50.21), controlPoint2: CGPoint(x: 45.79, y: 52))
        moviePath.close()
        moviePath.usesEvenOddFillRule = true
        color.setFill()
        moviePath.fill()
    }

    @objc dynamic public class func drawIcon_videoMessage_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Record Drawing
        let recordPath = UIBezierPath()
        recordPath.move(to: CGPoint(x: 32, y: 64))
        recordPath.addCurve(to: CGPoint(x: 0, y: 32), controlPoint1: CGPoint(x: 14.33, y: 64), controlPoint2: CGPoint(x: 0, y: 49.67))
        recordPath.addCurve(to: CGPoint(x: 32, y: 0), controlPoint1: CGPoint(x: 0, y: 14.33), controlPoint2: CGPoint(x: 14.33, y: 0))
        recordPath.addCurve(to: CGPoint(x: 64, y: 32), controlPoint1: CGPoint(x: 49.67, y: 0), controlPoint2: CGPoint(x: 64, y: 14.33))
        recordPath.addCurve(to: CGPoint(x: 32, y: 64), controlPoint1: CGPoint(x: 64, y: 49.67), controlPoint2: CGPoint(x: 49.67, y: 64))
        recordPath.close()
        recordPath.move(to: CGPoint(x: 32, y: 58))
        recordPath.addCurve(to: CGPoint(x: 58, y: 32), controlPoint1: CGPoint(x: 46.36, y: 58), controlPoint2: CGPoint(x: 58, y: 46.36))
        recordPath.addCurve(to: CGPoint(x: 32, y: 6), controlPoint1: CGPoint(x: 58, y: 17.64), controlPoint2: CGPoint(x: 46.36, y: 6))
        recordPath.addCurve(to: CGPoint(x: 6, y: 32), controlPoint1: CGPoint(x: 17.64, y: 6), controlPoint2: CGPoint(x: 6, y: 17.64))
        recordPath.addCurve(to: CGPoint(x: 32, y: 58), controlPoint1: CGPoint(x: 6, y: 46.36), controlPoint2: CGPoint(x: 17.64, y: 58))
        recordPath.close()
        recordPath.move(to: CGPoint(x: 32, y: 55))
        recordPath.addCurve(to: CGPoint(x: 55, y: 32), controlPoint1: CGPoint(x: 44.7, y: 55), controlPoint2: CGPoint(x: 55, y: 44.7))
        recordPath.addCurve(to: CGPoint(x: 32, y: 9), controlPoint1: CGPoint(x: 55, y: 19.3), controlPoint2: CGPoint(x: 44.7, y: 9))
        recordPath.addCurve(to: CGPoint(x: 9, y: 32), controlPoint1: CGPoint(x: 19.3, y: 9), controlPoint2: CGPoint(x: 9, y: 19.3))
        recordPath.addCurve(to: CGPoint(x: 32, y: 55), controlPoint1: CGPoint(x: 9, y: 44.7), controlPoint2: CGPoint(x: 19.3, y: 55))
        recordPath.close()
        recordPath.usesEvenOddFillRule = true
        color.setFill()
        recordPath.fill()
    }

    @objc dynamic public class func drawIcon_paperclip_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Attachment Drawing
        let attachmentPath = UIBezierPath()
        attachmentPath.move(to: CGPoint(x: 10.53, y: 30.8))
        attachmentPath.addLine(to: CGPoint(x: 29.48, y: 11.68))
        attachmentPath.addCurve(to: CGPoint(x: 48.42, y: 11.68), controlPoint1: CGPoint(x: 34.7, y: 6.41), controlPoint2: CGPoint(x: 43.2, y: 6.41))
        attachmentPath.addCurve(to: CGPoint(x: 48.42, y: 30.8), controlPoint1: CGPoint(x: 53.65, y: 16.96), controlPoint2: CGPoint(x: 53.66, y: 25.51))
        attachmentPath.addLine(to: CGPoint(x: 43.01, y: 36.26))
        attachmentPath.addLine(to: CGPoint(x: 25.41, y: 54.02))
        attachmentPath.addCurve(to: CGPoint(x: 14.59, y: 54.01), controlPoint1: CGPoint(x: 22.43, y: 57.03), controlPoint2: CGPoint(x: 17.58, y: 57.03))
        attachmentPath.addCurve(to: CGPoint(x: 14.59, y: 43.09), controlPoint1: CGPoint(x: 11.6, y: 51), controlPoint2: CGPoint(x: 11.6, y: 46.11))
        attachmentPath.addLine(to: CGPoint(x: 20.01, y: 37.62))
        attachmentPath.addLine(to: CGPoint(x: 37.62, y: 19.85))
        attachmentPath.addCurve(to: CGPoint(x: 40.3, y: 19.87), controlPoint1: CGPoint(x: 38.36, y: 19.11), controlPoint2: CGPoint(x: 39.54, y: 19.11))
        attachmentPath.addCurve(to: CGPoint(x: 40.32, y: 22.58), controlPoint1: CGPoint(x: 41.06, y: 20.64), controlPoint2: CGPoint(x: 41.06, y: 21.84))
        attachmentPath.addLine(to: CGPoint(x: 21.33, y: 41.75))
        attachmentPath.addCurve(to: CGPoint(x: 21.33, y: 47.21), controlPoint1: CGPoint(x: 19.84, y: 43.26), controlPoint2: CGPoint(x: 19.84, y: 45.71))
        attachmentPath.addCurve(to: CGPoint(x: 26.74, y: 47.21), controlPoint1: CGPoint(x: 22.83, y: 48.72), controlPoint2: CGPoint(x: 25.25, y: 48.72))
        attachmentPath.addLine(to: CGPoint(x: 45.74, y: 28.04))
        attachmentPath.addCurve(to: CGPoint(x: 45.71, y: 14.41), controlPoint1: CGPoint(x: 49.47, y: 24.27), controlPoint2: CGPoint(x: 49.45, y: 18.18))
        attachmentPath.addCurve(to: CGPoint(x: 32.21, y: 14.39), controlPoint1: CGPoint(x: 41.97, y: 10.63), controlPoint2: CGPoint(x: 35.94, y: 10.62))
        attachmentPath.addLine(to: CGPoint(x: 14.6, y: 32.16))
        attachmentPath.addLine(to: CGPoint(x: 9.18, y: 37.63))
        attachmentPath.addCurve(to: CGPoint(x: 9.18, y: 59.48), controlPoint1: CGPoint(x: 3.2, y: 43.66), controlPoint2: CGPoint(x: 3.2, y: 53.44))
        attachmentPath.addCurve(to: CGPoint(x: 30.83, y: 59.48), controlPoint1: CGPoint(x: 15.15, y: 65.5), controlPoint2: CGPoint(x: 24.85, y: 65.51))
        attachmentPath.addLine(to: CGPoint(x: 48.42, y: 41.73))
        attachmentPath.addLine(to: CGPoint(x: 53.83, y: 36.26))
        attachmentPath.addCurve(to: CGPoint(x: 53.83, y: 6.22), controlPoint1: CGPoint(x: 62.06, y: 27.96), controlPoint2: CGPoint(x: 62.05, y: 14.52))
        attachmentPath.addCurve(to: CGPoint(x: 24.07, y: 6.22), controlPoint1: CGPoint(x: 45.62, y: -2.07), controlPoint2: CGPoint(x: 32.28, y: -2.08))
        attachmentPath.addLine(to: CGPoint(x: 5.12, y: 25.34))
        attachmentPath.addCurve(to: CGPoint(x: 5.12, y: 30.8), controlPoint1: CGPoint(x: 3.63, y: 26.85), controlPoint2: CGPoint(x: 3.63, y: 29.29))
        attachmentPath.addCurve(to: CGPoint(x: 10.53, y: 30.8), controlPoint1: CGPoint(x: 6.62, y: 32.31), controlPoint2: CGPoint(x: 9.04, y: 32.31))
        attachmentPath.addLine(to: CGPoint(x: 10.53, y: 30.8))
        attachmentPath.close()
        attachmentPath.usesEvenOddFillRule = true
        color.setFill()
        attachmentPath.fill()
    }

    @objc dynamic public class func drawIcon_locationPin_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Location Drawing
        let locationPath = UIBezierPath()
        locationPath.move(to: CGPoint(x: 56, y: 24))
        locationPath.addCurve(to: CGPoint(x: 32, y: 0), controlPoint1: CGPoint(x: 56, y: 10.75), controlPoint2: CGPoint(x: 45.25, y: 0))
        locationPath.addCurve(to: CGPoint(x: 8, y: 24), controlPoint1: CGPoint(x: 18.75, y: 0), controlPoint2: CGPoint(x: 8, y: 10.75))
        locationPath.addCurve(to: CGPoint(x: 32, y: 64), controlPoint1: CGPoint(x: 8, y: 48), controlPoint2: CGPoint(x: 32, y: 64))
        locationPath.addCurve(to: CGPoint(x: 56, y: 24), controlPoint1: CGPoint(x: 32, y: 64), controlPoint2: CGPoint(x: 56, y: 48))
        locationPath.addLine(to: CGPoint(x: 56, y: 24))
        locationPath.close()
        locationPath.move(to: CGPoint(x: 32, y: 36))
        locationPath.addCurve(to: CGPoint(x: 44, y: 24), controlPoint1: CGPoint(x: 38.63, y: 36), controlPoint2: CGPoint(x: 44, y: 30.63))
        locationPath.addCurve(to: CGPoint(x: 32, y: 12), controlPoint1: CGPoint(x: 44, y: 17.37), controlPoint2: CGPoint(x: 38.63, y: 12))
        locationPath.addCurve(to: CGPoint(x: 20, y: 24), controlPoint1: CGPoint(x: 25.37, y: 12), controlPoint2: CGPoint(x: 20, y: 17.37))
        locationPath.addCurve(to: CGPoint(x: 32, y: 36), controlPoint1: CGPoint(x: 20, y: 30.63), controlPoint2: CGPoint(x: 25.37, y: 36))
        locationPath.addLine(to: CGPoint(x: 32, y: 36))
        locationPath.close()
        locationPath.usesEvenOddFillRule = true
        color.setFill()
        locationPath.fill()
    }

    @objc dynamic public class func drawIcon_recordDot_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Record Drawing
        let recordPath = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 64, height: 64))
        color.setFill()
        recordPath.fill()
    }

    @objc dynamic public class func drawIcon_stopRecording_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Stop Drawing
        let stopPath = UIBezierPath()
        stopPath.move(to: CGPoint(x: 0, y: 7.98))
        stopPath.addCurve(to: CGPoint(x: 7.98, y: 0), controlPoint1: CGPoint(x: 0, y: 3.57), controlPoint2: CGPoint(x: 3.58, y: 0))
        stopPath.addLine(to: CGPoint(x: 56.02, y: 0))
        stopPath.addCurve(to: CGPoint(x: 64, y: 7.98), controlPoint1: CGPoint(x: 60.43, y: 0), controlPoint2: CGPoint(x: 64, y: 3.58))
        stopPath.addLine(to: CGPoint(x: 64, y: 56.02))
        stopPath.addCurve(to: CGPoint(x: 56.02, y: 64), controlPoint1: CGPoint(x: 64, y: 60.43), controlPoint2: CGPoint(x: 60.42, y: 64))
        stopPath.addLine(to: CGPoint(x: 7.98, y: 64))
        stopPath.addCurve(to: CGPoint(x: 0, y: 56.02), controlPoint1: CGPoint(x: 3.57, y: 64), controlPoint2: CGPoint(x: 0, y: 60.42))
        stopPath.addLine(to: CGPoint(x: 0, y: 7.98))
        stopPath.close()
        stopPath.usesEvenOddFillRule = true
        color.setFill()
        stopPath.fill()
    }

    @objc dynamic public class func drawIcon_location_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Locate Drawing
        let locatePath = UIBezierPath()
        locatePath.move(to: CGPoint(x: 0, y: 34))
        locatePath.addLine(to: CGPoint(x: 60, y: 4))
        locatePath.addLine(to: CGPoint(x: 30, y: 64))
        locatePath.addLine(to: CGPoint(x: 22.5, y: 41.5))
        locatePath.addLine(to: CGPoint(x: 0, y: 34))
        locatePath.close()
        locatePath.usesEvenOddFillRule = true
        color.setFill()
        locatePath.fill()
    }

    @objc dynamic public class func drawIcon_effectBalloon_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Helium Drawing
        let heliumPath = UIBezierPath()
        heliumPath.move(to: CGPoint(x: 32, y: 0))
        heliumPath.addCurve(to: CGPoint(x: 8, y: 22), controlPoint1: CGPoint(x: 16.83, y: 0), controlPoint2: CGPoint(x: 8, y: 7.64))
        heliumPath.addCurve(to: CGPoint(x: 32, y: 52), controlPoint1: CGPoint(x: 8, y: 36.36), controlPoint2: CGPoint(x: 18.75, y: 52))
        heliumPath.addCurve(to: CGPoint(x: 56, y: 22), controlPoint1: CGPoint(x: 45.25, y: 52), controlPoint2: CGPoint(x: 56, y: 36.36))
        heliumPath.addCurve(to: CGPoint(x: 32, y: 0), controlPoint1: CGPoint(x: 56, y: 7.64), controlPoint2: CGPoint(x: 47.17, y: 0))
        heliumPath.close()
        heliumPath.move(to: CGPoint(x: 26.47, y: 60.65))
        heliumPath.addCurve(to: CGPoint(x: 32, y: 56), controlPoint1: CGPoint(x: 26.47, y: 60.65), controlPoint2: CGPoint(x: 28, y: 56))
        heliumPath.addCurve(to: CGPoint(x: 37.56, y: 60.7), controlPoint1: CGPoint(x: 36, y: 56), controlPoint2: CGPoint(x: 37.56, y: 60.7))
        heliumPath.addCurve(to: CGPoint(x: 36.17, y: 64), controlPoint1: CGPoint(x: 38.49, y: 62.52), controlPoint2: CGPoint(x: 37.91, y: 64))
        heliumPath.addLine(to: CGPoint(x: 27.83, y: 64))
        heliumPath.addCurve(to: CGPoint(x: 26.47, y: 60.65), controlPoint1: CGPoint(x: 26.13, y: 64), controlPoint2: CGPoint(x: 25.47, y: 62.46))
        heliumPath.close()
        heliumPath.usesEvenOddFillRule = true
        color.setFill()
        heliumPath.fill()
    }

    @objc dynamic public class func drawIcon_effectChurch_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Cathedral Drawing
        let cathedralPath = UIBezierPath()
        cathedralPath.move(to: CGPoint(x: 8, y: 28))
        cathedralPath.addLine(to: CGPoint(x: 0, y: 32))
        cathedralPath.addLine(to: CGPoint(x: 0, y: 64))
        cathedralPath.addLine(to: CGPoint(x: 8, y: 64))
        cathedralPath.addLine(to: CGPoint(x: 8, y: 28))
        cathedralPath.addLine(to: CGPoint(x: 8, y: 28))
        cathedralPath.addLine(to: CGPoint(x: 8, y: 28))
        cathedralPath.close()
        cathedralPath.move(to: CGPoint(x: 52, y: 16))
        cathedralPath.addLine(to: CGPoint(x: 32, y: 0))
        cathedralPath.addLine(to: CGPoint(x: 12, y: 16))
        cathedralPath.addLine(to: CGPoint(x: 12, y: 64))
        cathedralPath.addLine(to: CGPoint(x: 24, y: 64))
        cathedralPath.addLine(to: CGPoint(x: 24, y: 48))
        cathedralPath.addCurve(to: CGPoint(x: 32, y: 40), controlPoint1: CGPoint(x: 24, y: 43.58), controlPoint2: CGPoint(x: 27.55, y: 40))
        cathedralPath.addCurve(to: CGPoint(x: 40, y: 48), controlPoint1: CGPoint(x: 36.42, y: 40), controlPoint2: CGPoint(x: 40, y: 43.55))
        cathedralPath.addLine(to: CGPoint(x: 40, y: 64))
        cathedralPath.addLine(to: CGPoint(x: 52, y: 64))
        cathedralPath.addLine(to: CGPoint(x: 52, y: 16))
        cathedralPath.addLine(to: CGPoint(x: 52, y: 16))
        cathedralPath.close()
        cathedralPath.move(to: CGPoint(x: 56, y: 28))
        cathedralPath.addLine(to: CGPoint(x: 64, y: 32))
        cathedralPath.addLine(to: CGPoint(x: 64, y: 64))
        cathedralPath.addLine(to: CGPoint(x: 56, y: 64))
        cathedralPath.addLine(to: CGPoint(x: 56, y: 28))
        cathedralPath.addLine(to: CGPoint(x: 56, y: 28))
        cathedralPath.close()
        cathedralPath.move(to: CGPoint(x: 32, y: 28))
        cathedralPath.addCurve(to: CGPoint(x: 36, y: 24), controlPoint1: CGPoint(x: 34.21, y: 28), controlPoint2: CGPoint(x: 36, y: 26.21))
        cathedralPath.addCurve(to: CGPoint(x: 32, y: 20), controlPoint1: CGPoint(x: 36, y: 21.79), controlPoint2: CGPoint(x: 34.21, y: 20))
        cathedralPath.addCurve(to: CGPoint(x: 28, y: 24), controlPoint1: CGPoint(x: 29.79, y: 20), controlPoint2: CGPoint(x: 28, y: 21.79))
        cathedralPath.addCurve(to: CGPoint(x: 32, y: 28), controlPoint1: CGPoint(x: 28, y: 26.21), controlPoint2: CGPoint(x: 29.79, y: 28))
        cathedralPath.addLine(to: CGPoint(x: 32, y: 28))
        cathedralPath.close()
        cathedralPath.usesEvenOddFillRule = true
        color.setFill()
        cathedralPath.fill()
    }

    @objc dynamic public class func drawIcon_robot_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Robot Drawing
        let robotPath = UIBezierPath()
        robotPath.move(to: CGPoint(x: 32, y: 12))
        robotPath.addCurve(to: CGPoint(x: 8.33, y: 32), controlPoint1: CGPoint(x: 20.13, y: 12), controlPoint2: CGPoint(x: 10.24, y: 20.65))
        robotPath.addLine(to: CGPoint(x: 6, y: 32))
        robotPath.addCurve(to: CGPoint(x: 0, y: 38), controlPoint1: CGPoint(x: 2.66, y: 32), controlPoint2: CGPoint(x: 0, y: 34.69))
        robotPath.addCurve(to: CGPoint(x: 6, y: 44), controlPoint1: CGPoint(x: 0, y: 41.34), controlPoint2: CGPoint(x: 2.69, y: 44))
        robotPath.addLine(to: CGPoint(x: 8, y: 44))
        robotPath.addLine(to: CGPoint(x: 8, y: 64))
        robotPath.addLine(to: CGPoint(x: 56, y: 64))
        robotPath.addLine(to: CGPoint(x: 56, y: 44))
        robotPath.addLine(to: CGPoint(x: 58, y: 44))
        robotPath.addCurve(to: CGPoint(x: 64, y: 38), controlPoint1: CGPoint(x: 61.34, y: 44), controlPoint2: CGPoint(x: 64, y: 41.31))
        robotPath.addCurve(to: CGPoint(x: 58, y: 32), controlPoint1: CGPoint(x: 64, y: 34.66), controlPoint2: CGPoint(x: 61.31, y: 32))
        robotPath.addLine(to: CGPoint(x: 55.67, y: 32))
        robotPath.addCurve(to: CGPoint(x: 32, y: 12), controlPoint1: CGPoint(x: 53.76, y: 20.67), controlPoint2: CGPoint(x: 43.89, y: 12))
        robotPath.close()
        robotPath.move(to: CGPoint(x: 12, y: 14.4))
        robotPath.addCurve(to: CGPoint(x: 14, y: 12.4), controlPoint1: CGPoint(x: 13.1, y: 14.4), controlPoint2: CGPoint(x: 14, y: 13.5))
        robotPath.addCurve(to: CGPoint(x: 12, y: 10.4), controlPoint1: CGPoint(x: 14, y: 11.3), controlPoint2: CGPoint(x: 13.1, y: 10.4))
        robotPath.addCurve(to: CGPoint(x: 10, y: 12.4), controlPoint1: CGPoint(x: 10.9, y: 10.4), controlPoint2: CGPoint(x: 10, y: 11.3))
        robotPath.addCurve(to: CGPoint(x: 12, y: 14.4), controlPoint1: CGPoint(x: 10, y: 13.5), controlPoint2: CGPoint(x: 10.9, y: 14.4))
        robotPath.addLine(to: CGPoint(x: 12, y: 14.4))
        robotPath.close()
        robotPath.move(to: CGPoint(x: 52, y: 14))
        robotPath.addCurve(to: CGPoint(x: 54, y: 12), controlPoint1: CGPoint(x: 53.1, y: 14), controlPoint2: CGPoint(x: 54, y: 13.1))
        robotPath.addCurve(to: CGPoint(x: 52, y: 10), controlPoint1: CGPoint(x: 54, y: 10.9), controlPoint2: CGPoint(x: 53.1, y: 10))
        robotPath.addCurve(to: CGPoint(x: 50, y: 12), controlPoint1: CGPoint(x: 50.9, y: 10), controlPoint2: CGPoint(x: 50, y: 10.9))
        robotPath.addCurve(to: CGPoint(x: 52, y: 14), controlPoint1: CGPoint(x: 50, y: 13.1), controlPoint2: CGPoint(x: 50.9, y: 14))
        robotPath.addLine(to: CGPoint(x: 52, y: 14))
        robotPath.close()
        robotPath.move(to: CGPoint(x: 60, y: 8))
        robotPath.addCurve(to: CGPoint(x: 64, y: 4), controlPoint1: CGPoint(x: 62.21, y: 8), controlPoint2: CGPoint(x: 64, y: 6.21))
        robotPath.addCurve(to: CGPoint(x: 60, y: 0), controlPoint1: CGPoint(x: 64, y: 1.79), controlPoint2: CGPoint(x: 62.21, y: 0))
        robotPath.addCurve(to: CGPoint(x: 56, y: 4), controlPoint1: CGPoint(x: 57.79, y: 0), controlPoint2: CGPoint(x: 56, y: 1.79))
        robotPath.addCurve(to: CGPoint(x: 60, y: 8), controlPoint1: CGPoint(x: 56, y: 6.21), controlPoint2: CGPoint(x: 57.79, y: 8))
        robotPath.addLine(to: CGPoint(x: 60, y: 8))
        robotPath.close()
        robotPath.move(to: CGPoint(x: 4, y: 8))
        robotPath.addCurve(to: CGPoint(x: 8, y: 4), controlPoint1: CGPoint(x: 6.21, y: 8), controlPoint2: CGPoint(x: 8, y: 6.21))
        robotPath.addCurve(to: CGPoint(x: 4, y: 0), controlPoint1: CGPoint(x: 8, y: 1.79), controlPoint2: CGPoint(x: 6.21, y: 0))
        robotPath.addCurve(to: CGPoint(x: 0, y: 4), controlPoint1: CGPoint(x: 1.79, y: 0), controlPoint2: CGPoint(x: 0, y: 1.79))
        robotPath.addCurve(to: CGPoint(x: 4, y: 8), controlPoint1: CGPoint(x: 0, y: 6.21), controlPoint2: CGPoint(x: 1.79, y: 8))
        robotPath.close()
        robotPath.move(to: CGPoint(x: 22, y: 44))
        robotPath.addCurve(to: CGPoint(x: 28, y: 38), controlPoint1: CGPoint(x: 25.31, y: 44), controlPoint2: CGPoint(x: 28, y: 41.31))
        robotPath.addCurve(to: CGPoint(x: 22, y: 32), controlPoint1: CGPoint(x: 28, y: 34.69), controlPoint2: CGPoint(x: 25.31, y: 32))
        robotPath.addCurve(to: CGPoint(x: 16, y: 38), controlPoint1: CGPoint(x: 18.69, y: 32), controlPoint2: CGPoint(x: 16, y: 34.69))
        robotPath.addCurve(to: CGPoint(x: 22, y: 44), controlPoint1: CGPoint(x: 16, y: 41.31), controlPoint2: CGPoint(x: 18.69, y: 44))
        robotPath.close()
        robotPath.move(to: CGPoint(x: 42, y: 44))
        robotPath.addCurve(to: CGPoint(x: 48, y: 38), controlPoint1: CGPoint(x: 45.31, y: 44), controlPoint2: CGPoint(x: 48, y: 41.31))
        robotPath.addCurve(to: CGPoint(x: 42, y: 32), controlPoint1: CGPoint(x: 48, y: 34.69), controlPoint2: CGPoint(x: 45.31, y: 32))
        robotPath.addCurve(to: CGPoint(x: 36, y: 38), controlPoint1: CGPoint(x: 38.69, y: 32), controlPoint2: CGPoint(x: 36, y: 34.69))
        robotPath.addCurve(to: CGPoint(x: 42, y: 44), controlPoint1: CGPoint(x: 36, y: 41.31), controlPoint2: CGPoint(x: 38.69, y: 44))
        robotPath.close()
        robotPath.usesEvenOddFillRule = true
        color.setFill()
        robotPath.fill()
    }

    @objc dynamic public class func drawIcon_alien_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Alien Drawing
        let alienPath = UIBezierPath()
        alienPath.move(to: CGPoint(x: 32, y: 64))
        alienPath.addCurve(to: CGPoint(x: 60, y: 24), controlPoint1: CGPoint(x: 36.07, y: 64), controlPoint2: CGPoint(x: 60, y: 41.67))
        alienPath.addCurve(to: CGPoint(x: 32, y: 0), controlPoint1: CGPoint(x: 60, y: 6.33), controlPoint2: CGPoint(x: 45.25, y: 0))
        alienPath.addCurve(to: CGPoint(x: 4, y: 24), controlPoint1: CGPoint(x: 18.75, y: 0), controlPoint2: CGPoint(x: 4, y: 6.33))
        alienPath.addCurve(to: CGPoint(x: 32, y: 64), controlPoint1: CGPoint(x: 4, y: 41.67), controlPoint2: CGPoint(x: 27.93, y: 64))
        alienPath.close()
        alienPath.move(to: CGPoint(x: 17.38, y: 37.76))
        alienPath.addCurve(to: CGPoint(x: 27.56, y: 37.55), controlPoint1: CGPoint(x: 21.56, y: 40.83), controlPoint2: CGPoint(x: 26.11, y: 40.73))
        alienPath.addCurve(to: CGPoint(x: 22.62, y: 26.24), controlPoint1: CGPoint(x: 29, y: 34.36), controlPoint2: CGPoint(x: 26.79, y: 29.3))
        alienPath.addCurve(to: CGPoint(x: 12.44, y: 26.45), controlPoint1: CGPoint(x: 18.44, y: 23.17), controlPoint2: CGPoint(x: 13.89, y: 23.27))
        alienPath.addCurve(to: CGPoint(x: 17.38, y: 37.76), controlPoint1: CGPoint(x: 11, y: 29.64), controlPoint2: CGPoint(x: 13.21, y: 34.7))
        alienPath.close()
        alienPath.move(to: CGPoint(x: 36.44, y: 37.55))
        alienPath.addCurve(to: CGPoint(x: 41.38, y: 26.24), controlPoint1: CGPoint(x: 35, y: 34.36), controlPoint2: CGPoint(x: 37.21, y: 29.3))
        alienPath.addCurve(to: CGPoint(x: 51.56, y: 26.45), controlPoint1: CGPoint(x: 45.56, y: 23.17), controlPoint2: CGPoint(x: 50.11, y: 23.27))
        alienPath.addCurve(to: CGPoint(x: 46.62, y: 37.76), controlPoint1: CGPoint(x: 53, y: 29.64), controlPoint2: CGPoint(x: 50.79, y: 34.7))
        alienPath.addCurve(to: CGPoint(x: 36.44, y: 37.55), controlPoint1: CGPoint(x: 42.44, y: 40.83), controlPoint2: CGPoint(x: 37.89, y: 40.73))
        alienPath.close()
        alienPath.usesEvenOddFillRule = true
        color.setFill()
        alienPath.fill()
    }

    @objc dynamic public class func drawIcon_effectJellyfish_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Jellyfish Drawing
        let jellyfishPath = UIBezierPath()
        jellyfishPath.move(to: CGPoint(x: 4.28, y: 32.01))
        jellyfishPath.addCurve(to: CGPoint(x: 4, y: 28.01), controlPoint1: CGPoint(x: 4.1, y: 30.7), controlPoint2: CGPoint(x: 4, y: 29.37))
        jellyfishPath.addCurve(to: CGPoint(x: 32, y: 0), controlPoint1: CGPoint(x: 4, y: 12.54), controlPoint2: CGPoint(x: 16.54, y: 0))
        jellyfishPath.addCurve(to: CGPoint(x: 60, y: 28.01), controlPoint1: CGPoint(x: 47.46, y: 0), controlPoint2: CGPoint(x: 60, y: 12.54))
        jellyfishPath.addCurve(to: CGPoint(x: 59.72, y: 32.01), controlPoint1: CGPoint(x: 60, y: 29.37), controlPoint2: CGPoint(x: 59.9, y: 30.7))
        jellyfishPath.addLine(to: CGPoint(x: 4.28, y: 32.01))
        jellyfishPath.close()
        jellyfishPath.move(to: CGPoint(x: 36.08, y: 36.01))
        jellyfishPath.addLine(to: CGPoint(x: 36.08, y: 60))
        jellyfishPath.addCurve(to: CGPoint(x: 32.08, y: 64), controlPoint1: CGPoint(x: 36.08, y: 62.21), controlPoint2: CGPoint(x: 34.29, y: 64))
        jellyfishPath.addCurve(to: CGPoint(x: 28.08, y: 60), controlPoint1: CGPoint(x: 29.87, y: 64), controlPoint2: CGPoint(x: 28.08, y: 62.21))
        jellyfishPath.addLine(to: CGPoint(x: 28.08, y: 36.01))
        jellyfishPath.addLine(to: CGPoint(x: 36.08, y: 36.01))
        jellyfishPath.close()
        jellyfishPath.move(to: CGPoint(x: 48.06, y: 36.01))
        jellyfishPath.addCurve(to: CGPoint(x: 48.57, y: 41.9), controlPoint1: CGPoint(x: 48.14, y: 38.48), controlPoint2: CGPoint(x: 48.31, y: 40.48))
        jellyfishPath.addCurve(to: CGPoint(x: 51.53, y: 49.04), controlPoint1: CGPoint(x: 49.01, y: 44.32), controlPoint2: CGPoint(x: 50.06, y: 46.73))
        jellyfishPath.addCurve(to: CGPoint(x: 53.83, y: 52.11), controlPoint1: CGPoint(x: 52.26, y: 50.18), controlPoint2: CGPoint(x: 53.05, y: 51.21))
        jellyfishPath.addCurve(to: CGPoint(x: 54.76, y: 53.12), controlPoint1: CGPoint(x: 54.28, y: 52.64), controlPoint2: CGPoint(x: 54.61, y: 52.98))
        jellyfishPath.addCurve(to: CGPoint(x: 54.9, y: 58.78), controlPoint1: CGPoint(x: 56.36, y: 54.65), controlPoint2: CGPoint(x: 56.42, y: 57.18))
        jellyfishPath.addCurve(to: CGPoint(x: 49.24, y: 58.92), controlPoint1: CGPoint(x: 53.37, y: 60.38), controlPoint2: CGPoint(x: 50.84, y: 60.44))
        jellyfishPath.addCurve(to: CGPoint(x: 44.8, y: 53.35), controlPoint1: CGPoint(x: 48.07, y: 57.8), controlPoint2: CGPoint(x: 46.43, y: 55.9))
        jellyfishPath.addCurve(to: CGPoint(x: 40.7, y: 43.34), controlPoint1: CGPoint(x: 42.8, y: 50.23), controlPoint2: CGPoint(x: 41.35, y: 46.89))
        jellyfishPath.addCurve(to: CGPoint(x: 40.05, y: 36.01), controlPoint1: CGPoint(x: 40.35, y: 41.44), controlPoint2: CGPoint(x: 40.14, y: 38.97))
        jellyfishPath.addLine(to: CGPoint(x: 48.06, y: 36.01))
        jellyfishPath.addLine(to: CGPoint(x: 48.06, y: 36.01))
        jellyfishPath.close()
        jellyfishPath.move(to: CGPoint(x: 23.95, y: 36.01))
        jellyfishPath.addCurve(to: CGPoint(x: 23.3, y: 43.34), controlPoint1: CGPoint(x: 23.86, y: 38.97), controlPoint2: CGPoint(x: 23.65, y: 41.44))
        jellyfishPath.addCurve(to: CGPoint(x: 19.2, y: 53.35), controlPoint1: CGPoint(x: 22.65, y: 46.89), controlPoint2: CGPoint(x: 21.2, y: 50.23))
        jellyfishPath.addCurve(to: CGPoint(x: 14.76, y: 58.92), controlPoint1: CGPoint(x: 17.57, y: 55.9), controlPoint2: CGPoint(x: 15.93, y: 57.8))
        jellyfishPath.addCurve(to: CGPoint(x: 9.1, y: 58.78), controlPoint1: CGPoint(x: 13.16, y: 60.44), controlPoint2: CGPoint(x: 10.63, y: 60.38))
        jellyfishPath.addCurve(to: CGPoint(x: 9.24, y: 53.12), controlPoint1: CGPoint(x: 7.58, y: 57.18), controlPoint2: CGPoint(x: 7.64, y: 54.65))
        jellyfishPath.addCurve(to: CGPoint(x: 10.17, y: 52.11), controlPoint1: CGPoint(x: 9.39, y: 52.98), controlPoint2: CGPoint(x: 9.72, y: 52.64))
        jellyfishPath.addCurve(to: CGPoint(x: 12.47, y: 49.04), controlPoint1: CGPoint(x: 10.95, y: 51.21), controlPoint2: CGPoint(x: 11.74, y: 50.18))
        jellyfishPath.addCurve(to: CGPoint(x: 15.43, y: 41.9), controlPoint1: CGPoint(x: 13.94, y: 46.73), controlPoint2: CGPoint(x: 14.99, y: 44.32))
        jellyfishPath.addCurve(to: CGPoint(x: 15.94, y: 36.01), controlPoint1: CGPoint(x: 15.69, y: 40.48), controlPoint2: CGPoint(x: 15.86, y: 38.48))
        jellyfishPath.addLine(to: CGPoint(x: 23.95, y: 36.01))
        jellyfishPath.close()
        jellyfishPath.usesEvenOddFillRule = true
        color.setFill()
        jellyfishPath.fill()
    }

    @objc dynamic public class func drawIcon_effectRollercoaster_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 64, y: 44.94))
        bezierPath.addLine(to: CGPoint(x: 64, y: 64))
        bezierPath.addLine(to: CGPoint(x: 0, y: 64))
        bezierPath.addLine(to: CGPoint(x: 0, y: 32))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 20.13), controlPoint1: CGPoint(x: 0, y: 26.53), controlPoint2: CGPoint(x: 5.22, y: 21.05))
        bezierPath.addLine(to: CGPoint(x: 12, y: 14))
        bezierPath.addLine(to: CGPoint(x: 12, y: 4))
        bezierPath.addLine(to: CGPoint(x: 28, y: 10))
        bezierPath.addLine(to: CGPoint(x: 16, y: 14.5))
        bezierPath.addLine(to: CGPoint(x: 16, y: 20.13))
        bezierPath.addCurve(to: CGPoint(x: 28, y: 32), controlPoint1: CGPoint(x: 22.78, y: 21.05), controlPoint2: CGPoint(x: 28, y: 26.53))
        bezierPath.addLine(to: CGPoint(x: 28, y: 32.18))
        bezierPath.addCurve(to: CGPoint(x: 48, y: 48), controlPoint1: CGPoint(x: 28.25, y: 36.32), controlPoint2: CGPoint(x: 37.11, y: 48))
        bezierPath.addCurve(to: CGPoint(x: 60, y: 44), controlPoint1: CGPoint(x: 52.5, y: 48), controlPoint2: CGPoint(x: 56.66, y: 46.51))
        bezierPath.addLine(to: CGPoint(x: 60, y: 44))
        bezierPath.addCurve(to: CGPoint(x: 64, y: 40), controlPoint1: CGPoint(x: 61.52, y: 42.86), controlPoint2: CGPoint(x: 62.86, y: 41.52))
        bezierPath.addLine(to: CGPoint(x: 64, y: 44.94))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 60, y: 48.79))
        bezierPath.addLine(to: CGPoint(x: 60, y: 60))
        bezierPath.addLine(to: CGPoint(x: 52, y: 60))
        bezierPath.addLine(to: CGPoint(x: 52, y: 51.67))
        bezierPath.addCurve(to: CGPoint(x: 60, y: 48.79), controlPoint1: CGPoint(x: 54.87, y: 51.19), controlPoint2: CGPoint(x: 57.57, y: 50.19))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 48, y: 52))
        bezierPath.addLine(to: CGPoint(x: 48, y: 60))
        bezierPath.addLine(to: CGPoint(x: 40, y: 60))
        bezierPath.addLine(to: CGPoint(x: 40, y: 50.63))
        bezierPath.addCurve(to: CGPoint(x: 48, y: 52), controlPoint1: CGPoint(x: 42.5, y: 51.52), controlPoint2: CGPoint(x: 45.19, y: 52))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 36, y: 48.79))
        bezierPath.addLine(to: CGPoint(x: 36, y: 60))
        bezierPath.addLine(to: CGPoint(x: 28, y: 60))
        bezierPath.addLine(to: CGPoint(x: 28, y: 41.27))
        bezierPath.addCurve(to: CGPoint(x: 36, y: 48.79), controlPoint1: CGPoint(x: 30.05, y: 44.35), controlPoint2: CGPoint(x: 32.79, y: 46.93))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 24, y: 32))
        bezierPath.addLine(to: CGPoint(x: 24, y: 60))
        bezierPath.addLine(to: CGPoint(x: 16, y: 60))
        bezierPath.addLine(to: CGPoint(x: 16, y: 24.2))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 32), controlPoint1: CGPoint(x: 19.92, y: 25), controlPoint2: CGPoint(x: 23.03, y: 28.08))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 12, y: 24.2))
        bezierPath.addLine(to: CGPoint(x: 12, y: 60))
        bezierPath.addLine(to: CGPoint(x: 4, y: 60))
        bezierPath.addLine(to: CGPoint(x: 4, y: 32))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 24.2), controlPoint1: CGPoint(x: 4.97, y: 28.08), controlPoint2: CGPoint(x: 8.08, y: 25))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        color.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawIcon_effectRabbit_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Hare Drawing
        let harePath = UIBezierPath()
        harePath.move(to: CGPoint(x: 4, y: 6.75))
        harePath.addCurve(to: CGPoint(x: 0, y: 10.75), controlPoint1: CGPoint(x: 1.79, y: 6.75), controlPoint2: CGPoint(x: 0, y: 8.54))
        harePath.addCurve(to: CGPoint(x: 2.77, y: 14.55), controlPoint1: CGPoint(x: 0, y: 12.53), controlPoint2: CGPoint(x: 1.16, y: 14.03))
        harePath.addCurve(to: CGPoint(x: 0.69, y: 29.88), controlPoint1: CGPoint(x: 0.26, y: 18.35), controlPoint2: CGPoint(x: -0.81, y: 23.48))
        harePath.addCurve(to: CGPoint(x: 22.24, y: 48), controlPoint1: CGPoint(x: 4.78, y: 40.63), controlPoint2: CGPoint(x: 13.33, y: 41.21))
        harePath.addCurve(to: CGPoint(x: 35.74, y: 64), controlPoint1: CGPoint(x: 31.91, y: 55.37), controlPoint2: CGPoint(x: 35.74, y: 64))
        harePath.addLine(to: CGPoint(x: 48.06, y: 61.47))
        harePath.addLine(to: CGPoint(x: 48.03, y: 59.8))
        harePath.addCurve(to: CGPoint(x: 46.23, y: 57.41), controlPoint1: CGPoint(x: 48.01, y: 58.63), controlPoint2: CGPoint(x: 47.21, y: 57.61))
        harePath.addLine(to: CGPoint(x: 39.25, y: 55.97))
        harePath.addCurve(to: CGPoint(x: 39.25, y: 49.23), controlPoint1: CGPoint(x: 39.25, y: 55.97), controlPoint2: CGPoint(x: 39.25, y: 50.99))
        harePath.addCurve(to: CGPoint(x: 51.96, y: 40.63), controlPoint1: CGPoint(x: 45.43, y: 46.44), controlPoint2: CGPoint(x: 51.96, y: 40.63))
        harePath.addCurve(to: CGPoint(x: 62.03, y: 39.65), controlPoint1: CGPoint(x: 55.73, y: 42.64), controlPoint2: CGPoint(x: 59.66, y: 42.42))
        harePath.addCurve(to: CGPoint(x: 59.56, y: 22.34), controlPoint1: CGPoint(x: 65.43, y: 35.67), controlPoint2: CGPoint(x: 64.32, y: 27.92))
        harePath.addCurve(to: CGPoint(x: 56.12, y: 19.24), controlPoint1: CGPoint(x: 58.49, y: 21.08), controlPoint2: CGPoint(x: 57.33, y: 20.04))
        harePath.addCurve(to: CGPoint(x: 38.61, y: 0), controlPoint1: CGPoint(x: 51.17, y: 11.39), controlPoint2: CGPoint(x: 43.19, y: 0))
        harePath.addCurve(to: CGPoint(x: 48, y: 17.4), controlPoint1: CGPoint(x: 34.42, y: 6.09), controlPoint2: CGPoint(x: 45.16, y: 15.16))
        harePath.addCurve(to: CGPoint(x: 44.79, y: 19.45), controlPoint1: CGPoint(x: 46.77, y: 17.74), controlPoint2: CGPoint(x: 45.67, y: 18.42))
        harePath.addCurve(to: CGPoint(x: 42.91, y: 23.95), controlPoint1: CGPoint(x: 43.75, y: 20.66), controlPoint2: CGPoint(x: 43.14, y: 22.22))
        harePath.addCurve(to: CGPoint(x: 18.11, y: 6.69), controlPoint1: CGPoint(x: 37.85, y: 17.31), controlPoint2: CGPoint(x: 32.3, y: 6.69))
        harePath.addCurve(to: CGPoint(x: 7.85, y: 9.62), controlPoint1: CGPoint(x: 14.56, y: 6.69), controlPoint2: CGPoint(x: 10.92, y: 7.68))
        harePath.addCurve(to: CGPoint(x: 4, y: 6.75), controlPoint1: CGPoint(x: 7.36, y: 7.96), controlPoint2: CGPoint(x: 5.82, y: 6.75))
        harePath.close()
        harePath.move(to: CGPoint(x: 9.57, y: 59.75))
        harePath.addLine(to: CGPoint(x: 20.39, y: 50.75))
        harePath.addCurve(to: CGPoint(x: 26.61, y: 57.11), controlPoint1: CGPoint(x: 20.39, y: 50.75), controlPoint2: CGPoint(x: 24.72, y: 53.11))
        harePath.addLine(to: CGPoint(x: 11.55, y: 63.35))
        harePath.addCurve(to: CGPoint(x: 8.94, y: 62.33), controlPoint1: CGPoint(x: 10.63, y: 63.71), controlPoint2: CGPoint(x: 9.45, y: 63.23))
        harePath.addLine(to: CGPoint(x: 9.1, y: 62.62))
        harePath.addCurve(to: CGPoint(x: 9.57, y: 59.75), controlPoint1: CGPoint(x: 8.59, y: 61.69), controlPoint2: CGPoint(x: 8.83, y: 60.38))
        harePath.close()
        harePath.move(to: CGPoint(x: 53.99, y: 30.6))
        harePath.addCurve(to: CGPoint(x: 56.96, y: 27.54), controlPoint1: CGPoint(x: 55.63, y: 30.6), controlPoint2: CGPoint(x: 56.96, y: 29.23))
        harePath.addCurve(to: CGPoint(x: 53.99, y: 24.48), controlPoint1: CGPoint(x: 56.96, y: 25.85), controlPoint2: CGPoint(x: 55.63, y: 24.48))
        harePath.addCurve(to: CGPoint(x: 51.03, y: 27.54), controlPoint1: CGPoint(x: 52.36, y: 24.48), controlPoint2: CGPoint(x: 51.03, y: 25.85))
        harePath.addCurve(to: CGPoint(x: 53.99, y: 30.6), controlPoint1: CGPoint(x: 51.03, y: 29.23), controlPoint2: CGPoint(x: 52.36, y: 30.6))
        harePath.close()
        harePath.usesEvenOddFillRule = true
        color.setFill()
        harePath.fill()
    }

    @objc dynamic public class func drawIcon_fullScreen_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 64, y: 28))
        bezierPath.addLine(to: CGPoint(x: 64, y: 0))
        bezierPath.addLine(to: CGPoint(x: 36, y: 0))
        bezierPath.addLine(to: CGPoint(x: 36, y: 8))
        bezierPath.addLine(to: CGPoint(x: 50.36, y: 8))
        bezierPath.addLine(to: CGPoint(x: 32.02, y: 26.29))
        bezierPath.addLine(to: CGPoint(x: 37.68, y: 31.94))
        bezierPath.addLine(to: CGPoint(x: 56, y: 13.67))
        bezierPath.addLine(to: CGPoint(x: 56, y: 28))
        bezierPath.addLine(to: CGPoint(x: 64, y: 28))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 0, y: 36))
        bezierPath.addLine(to: CGPoint(x: 0, y: 64))
        bezierPath.addLine(to: CGPoint(x: 28, y: 64))
        bezierPath.addLine(to: CGPoint(x: 28, y: 56))
        bezierPath.addLine(to: CGPoint(x: 13.64, y: 56))
        bezierPath.addLine(to: CGPoint(x: 32.19, y: 37.5))
        bezierPath.addLine(to: CGPoint(x: 26.53, y: 31.85))
        bezierPath.addLine(to: CGPoint(x: 8, y: 50.33))
        bezierPath.addLine(to: CGPoint(x: 8, y: 36))
        bezierPath.addLine(to: CGPoint(x: 0, y: 36))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        color.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawIcon_trash_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Delete Drawing
        let deletePath = UIBezierPath()
        deletePath.move(to: CGPoint(x: 24, y: 8))
        deletePath.addLine(to: CGPoint(x: 8.03, y: 8))
        deletePath.addCurve(to: CGPoint(x: 4, y: 12), controlPoint1: CGPoint(x: 5.8, y: 8), controlPoint2: CGPoint(x: 4, y: 9.79))
        deletePath.addLine(to: CGPoint(x: 4, y: 16))
        deletePath.addLine(to: CGPoint(x: 60, y: 16))
        deletePath.addLine(to: CGPoint(x: 60, y: 12))
        deletePath.addCurve(to: CGPoint(x: 55.97, y: 8), controlPoint1: CGPoint(x: 60, y: 9.78), controlPoint2: CGPoint(x: 58.2, y: 8))
        deletePath.addLine(to: CGPoint(x: 40, y: 8))
        deletePath.addCurve(to: CGPoint(x: 32, y: 0), controlPoint1: CGPoint(x: 40, y: 3.55), controlPoint2: CGPoint(x: 36.42, y: 0))
        deletePath.addCurve(to: CGPoint(x: 24, y: 8), controlPoint1: CGPoint(x: 27.55, y: 0), controlPoint2: CGPoint(x: 24, y: 3.58))
        deletePath.addLine(to: CGPoint(x: 24, y: 8))
        deletePath.close()
        deletePath.move(to: CGPoint(x: 8, y: 24))
        deletePath.addLine(to: CGPoint(x: 56, y: 24))
        deletePath.addLine(to: CGPoint(x: 52.8, y: 56))
        deletePath.addCurve(to: CGPoint(x: 44, y: 64), controlPoint1: CGPoint(x: 52.36, y: 60.42), controlPoint2: CGPoint(x: 48.45, y: 64))
        deletePath.addLine(to: CGPoint(x: 20, y: 64))
        deletePath.addCurve(to: CGPoint(x: 11.2, y: 56), controlPoint1: CGPoint(x: 15.58, y: 64), controlPoint2: CGPoint(x: 11.65, y: 60.45))
        deletePath.addLine(to: CGPoint(x: 8, y: 24))
        deletePath.addLine(to: CGPoint(x: 8, y: 24))
        deletePath.close()
        deletePath.usesEvenOddFillRule = true
        color.setFill()
        deletePath.fill()
    }

    @objc dynamic public class func drawIcon_like_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Like Drawing
        let likePath = UIBezierPath()
        likePath.move(to: CGPoint(x: 32.84, y: 50.34))
        likePath.addCurve(to: CGPoint(x: 42.91, y: 43.23), controlPoint1: CGPoint(x: 36.29, y: 48.25), controlPoint2: CGPoint(x: 39.73, y: 45.85))
        likePath.addCurve(to: CGPoint(x: 56, y: 23.16), controlPoint1: CGPoint(x: 51.25, y: 36.35), controlPoint2: CGPoint(x: 56, y: 29.34))
        likePath.addCurve(to: CGPoint(x: 53.3, y: 14.71), controlPoint1: CGPoint(x: 56.02, y: 18.95), controlPoint2: CGPoint(x: 55.14, y: 16.54))
        likePath.addCurve(to: CGPoint(x: 40.09, y: 14.7), controlPoint1: CGPoint(x: 49.66, y: 11.1), controlPoint2: CGPoint(x: 43.72, y: 11.1))
        likePath.addLine(to: CGPoint(x: 32, y: 22.72))
        likePath.addLine(to: CGPoint(x: 23.91, y: 14.7))
        likePath.addCurve(to: CGPoint(x: 10.7, y: 14.71), controlPoint1: CGPoint(x: 20.28, y: 11.1), controlPoint2: CGPoint(x: 14.34, y: 11.1))
        likePath.addCurve(to: CGPoint(x: 8.01, y: 23.21), controlPoint1: CGPoint(x: 8.79, y: 16.6), controlPoint2: CGPoint(x: 7.89, y: 19.13))
        likePath.addCurve(to: CGPoint(x: 21.1, y: 43.23), controlPoint1: CGPoint(x: 8.01, y: 29.34), controlPoint2: CGPoint(x: 12.76, y: 36.36))
        likePath.addCurve(to: CGPoint(x: 31.16, y: 50.34), controlPoint1: CGPoint(x: 24.28, y: 45.86), controlPoint2: CGPoint(x: 27.72, y: 48.25))
        likePath.addCurve(to: CGPoint(x: 32, y: 50.85), controlPoint1: CGPoint(x: 31.44, y: 50.52), controlPoint2: CGPoint(x: 31.73, y: 50.68))
        likePath.addCurve(to: CGPoint(x: 32.84, y: 50.34), controlPoint1: CGPoint(x: 32.27, y: 50.68), controlPoint2: CGPoint(x: 32.56, y: 50.51))
        likePath.close()
        likePath.move(to: CGPoint(x: 32, y: 11.45))
        likePath.addLine(to: CGPoint(x: 34.46, y: 9.02))
        likePath.addCurve(to: CGPoint(x: 58.93, y: 9.03), controlPoint1: CGPoint(x: 41.21, y: 2.32), controlPoint2: CGPoint(x: 52.18, y: 2.34))
        likePath.addCurve(to: CGPoint(x: 64, y: 23.2), controlPoint1: CGPoint(x: 62.34, y: 12.41), controlPoint2: CGPoint(x: 64.03, y: 16.85))
        likePath.addCurve(to: CGPoint(x: 32, y: 60), controlPoint1: CGPoint(x: 64, y: 44), controlPoint2: CGPoint(x: 32, y: 60))
        likePath.addCurve(to: CGPoint(x: 0.01, y: 23.2), controlPoint1: CGPoint(x: 32, y: 60), controlPoint2: CGPoint(x: 0, y: 44))
        likePath.addCurve(to: CGPoint(x: 5.07, y: 9.03), controlPoint1: CGPoint(x: -0.18, y: 17.24), controlPoint2: CGPoint(x: 1.51, y: 12.55))
        likePath.addCurve(to: CGPoint(x: 29.54, y: 9.02), controlPoint1: CGPoint(x: 11.83, y: 2.32), controlPoint2: CGPoint(x: 22.8, y: 2.33))
        likePath.addLine(to: CGPoint(x: 32, y: 11.45))
        likePath.close()
        color.setFill()
        likePath.fill()
    }

    @objc dynamic public class func drawIcon_liked_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Liked Drawing
        let likedPath = UIBezierPath()
        likedPath.move(to: CGPoint(x: 29.54, y: 9.02))
        likedPath.addCurve(to: CGPoint(x: 5.07, y: 9.03), controlPoint1: CGPoint(x: 22.8, y: 2.33), controlPoint2: CGPoint(x: 11.83, y: 2.32))
        likedPath.addCurve(to: CGPoint(x: 0.01, y: 23.2), controlPoint1: CGPoint(x: 1.51, y: 12.55), controlPoint2: CGPoint(x: -0.18, y: 17.24))
        likedPath.addCurve(to: CGPoint(x: 32, y: 60), controlPoint1: CGPoint(x: -0, y: 44), controlPoint2: CGPoint(x: 32, y: 60))
        likedPath.addCurve(to: CGPoint(x: 64, y: 23.2), controlPoint1: CGPoint(x: 32, y: 60), controlPoint2: CGPoint(x: 64, y: 44))
        likedPath.addCurve(to: CGPoint(x: 58.93, y: 9.03), controlPoint1: CGPoint(x: 64.03, y: 16.85), controlPoint2: CGPoint(x: 62.34, y: 12.41))
        likedPath.addCurve(to: CGPoint(x: 34.46, y: 9.02), controlPoint1: CGPoint(x: 52.18, y: 2.34), controlPoint2: CGPoint(x: 41.21, y: 2.32))
        likedPath.addLine(to: CGPoint(x: 32, y: 11.45))
        likedPath.addLine(to: CGPoint(x: 29.54, y: 9.02))
        likedPath.close()
        likedPath.usesEvenOddFillRule = true
        color.setFill()
        likedPath.fill()
    }

    @objc dynamic public class func drawIcon_devices_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Devices Drawing
        let devicesPath = UIBezierPath()
        devicesPath.move(to: CGPoint(x: 44, y: 16))
        devicesPath.addLine(to: CGPoint(x: 53.74, y: 16))
        devicesPath.addCurve(to: CGPoint(x: 59.91, y: 17.07), controlPoint1: CGPoint(x: 57.31, y: 16), controlPoint2: CGPoint(x: 58.6, y: 16.37))
        devicesPath.addCurve(to: CGPoint(x: 62.93, y: 20.09), controlPoint1: CGPoint(x: 61.21, y: 17.77), controlPoint2: CGPoint(x: 62.23, y: 18.79))
        devicesPath.addCurve(to: CGPoint(x: 64, y: 26.26), controlPoint1: CGPoint(x: 63.63, y: 21.4), controlPoint2: CGPoint(x: 64, y: 22.69))
        devicesPath.addLine(to: CGPoint(x: 64, y: 53.74))
        devicesPath.addCurve(to: CGPoint(x: 62.93, y: 59.91), controlPoint1: CGPoint(x: 64, y: 57.31), controlPoint2: CGPoint(x: 63.63, y: 58.6))
        devicesPath.addCurve(to: CGPoint(x: 59.91, y: 62.93), controlPoint1: CGPoint(x: 62.23, y: 61.21), controlPoint2: CGPoint(x: 61.21, y: 62.23))
        devicesPath.addCurve(to: CGPoint(x: 53.74, y: 64), controlPoint1: CGPoint(x: 58.6, y: 63.63), controlPoint2: CGPoint(x: 57.31, y: 64))
        devicesPath.addLine(to: CGPoint(x: 38.26, y: 64))
        devicesPath.addCurve(to: CGPoint(x: 36, y: 63.93), controlPoint1: CGPoint(x: 37.38, y: 64), controlPoint2: CGPoint(x: 36.64, y: 63.98))
        devicesPath.addCurve(to: CGPoint(x: 33.74, y: 64), controlPoint1: CGPoint(x: 35.36, y: 63.98), controlPoint2: CGPoint(x: 34.62, y: 64))
        devicesPath.addLine(to: CGPoint(x: 10.26, y: 64))
        devicesPath.addCurve(to: CGPoint(x: 4.09, y: 62.93), controlPoint1: CGPoint(x: 6.69, y: 64), controlPoint2: CGPoint(x: 5.4, y: 63.63))
        devicesPath.addCurve(to: CGPoint(x: 1.07, y: 59.91), controlPoint1: CGPoint(x: 2.79, y: 62.23), controlPoint2: CGPoint(x: 1.77, y: 61.21))
        devicesPath.addCurve(to: CGPoint(x: 0, y: 53.74), controlPoint1: CGPoint(x: 0.37, y: 58.6), controlPoint2: CGPoint(x: 0, y: 57.31))
        devicesPath.addLine(to: CGPoint(x: 0, y: 10.26))
        devicesPath.addCurve(to: CGPoint(x: 1.07, y: 4.09), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0.37, y: 5.4))
        devicesPath.addCurve(to: CGPoint(x: 4.09, y: 1.07), controlPoint1: CGPoint(x: 1.77, y: 2.79), controlPoint2: CGPoint(x: 2.79, y: 1.77))
        devicesPath.addCurve(to: CGPoint(x: 10.26, y: 0), controlPoint1: CGPoint(x: 5.4, y: 0.37), controlPoint2: CGPoint(x: 6.69, y: 0))
        devicesPath.addLine(to: CGPoint(x: 33.74, y: 0))
        devicesPath.addCurve(to: CGPoint(x: 39.91, y: 1.07), controlPoint1: CGPoint(x: 37.31, y: 0), controlPoint2: CGPoint(x: 38.6, y: 0.37))
        devicesPath.addCurve(to: CGPoint(x: 42.93, y: 4.09), controlPoint1: CGPoint(x: 41.21, y: 1.77), controlPoint2: CGPoint(x: 42.23, y: 2.79))
        devicesPath.addCurve(to: CGPoint(x: 44, y: 10.26), controlPoint1: CGPoint(x: 43.63, y: 5.4), controlPoint2: CGPoint(x: 44, y: 6.69))
        devicesPath.addLine(to: CGPoint(x: 44, y: 16))
        devicesPath.close()
        devicesPath.move(to: CGPoint(x: 36, y: 16.07))
        devicesPath.addLine(to: CGPoint(x: 36, y: 12))
        devicesPath.addCurve(to: CGPoint(x: 35.45, y: 9.98), controlPoint1: CGPoint(x: 36, y: 11.26), controlPoint2: CGPoint(x: 35.8, y: 10.57))
        devicesPath.addCurve(to: CGPoint(x: 34.02, y: 8.55), controlPoint1: CGPoint(x: 35.11, y: 9.39), controlPoint2: CGPoint(x: 34.61, y: 8.89))
        devicesPath.addCurve(to: CGPoint(x: 32, y: 8), controlPoint1: CGPoint(x: 33.43, y: 8.2), controlPoint2: CGPoint(x: 32.74, y: 8))
        devicesPath.addLine(to: CGPoint(x: 30, y: 8))
        devicesPath.addCurve(to: CGPoint(x: 28.99, y: 8.27), controlPoint1: CGPoint(x: 29.63, y: 8), controlPoint2: CGPoint(x: 29.29, y: 8.1))
        devicesPath.addCurve(to: CGPoint(x: 28.27, y: 8.99), controlPoint1: CGPoint(x: 28.69, y: 8.45), controlPoint2: CGPoint(x: 28.45, y: 8.69))
        devicesPath.addCurve(to: CGPoint(x: 28, y: 10), controlPoint1: CGPoint(x: 28.1, y: 9.29), controlPoint2: CGPoint(x: 28, y: 9.63))
        devicesPath.addCurve(to: CGPoint(x: 26, y: 12), controlPoint1: CGPoint(x: 28, y: 11.1), controlPoint2: CGPoint(x: 27.1, y: 12))
        devicesPath.addLine(to: CGPoint(x: 18, y: 12))
        devicesPath.addCurve(to: CGPoint(x: 16, y: 10), controlPoint1: CGPoint(x: 16.9, y: 12), controlPoint2: CGPoint(x: 16, y: 11.1))
        devicesPath.addCurve(to: CGPoint(x: 14, y: 8), controlPoint1: CGPoint(x: 16, y: 8.9), controlPoint2: CGPoint(x: 15.1, y: 8))
        devicesPath.addLine(to: CGPoint(x: 12, y: 8))
        devicesPath.addCurve(to: CGPoint(x: 9.98, y: 8.55), controlPoint1: CGPoint(x: 11.26, y: 8), controlPoint2: CGPoint(x: 10.57, y: 8.2))
        devicesPath.addCurve(to: CGPoint(x: 8.55, y: 9.98), controlPoint1: CGPoint(x: 9.39, y: 8.89), controlPoint2: CGPoint(x: 8.89, y: 9.39))
        devicesPath.addCurve(to: CGPoint(x: 8, y: 12), controlPoint1: CGPoint(x: 8.2, y: 10.57), controlPoint2: CGPoint(x: 8, y: 11.26))
        devicesPath.addLine(to: CGPoint(x: 8, y: 50.87))
        devicesPath.addCurve(to: CGPoint(x: 8.53, y: 53.95), controlPoint1: CGPoint(x: 8, y: 52.66), controlPoint2: CGPoint(x: 8.19, y: 53.3))
        devicesPath.addCurve(to: CGPoint(x: 10.05, y: 55.47), controlPoint1: CGPoint(x: 8.88, y: 54.61), controlPoint2: CGPoint(x: 9.39, y: 55.12))
        devicesPath.addCurve(to: CGPoint(x: 13.13, y: 56), controlPoint1: CGPoint(x: 10.7, y: 55.81), controlPoint2: CGPoint(x: 11.34, y: 56))
        devicesPath.addLine(to: CGPoint(x: 28.07, y: 56))
        devicesPath.addCurve(to: CGPoint(x: 28, y: 53.74), controlPoint1: CGPoint(x: 28.02, y: 55.36), controlPoint2: CGPoint(x: 28, y: 54.62))
        devicesPath.addLine(to: CGPoint(x: 28, y: 26.26))
        devicesPath.addCurve(to: CGPoint(x: 29.07, y: 20.09), controlPoint1: CGPoint(x: 28, y: 22.69), controlPoint2: CGPoint(x: 28.37, y: 21.4))
        devicesPath.addCurve(to: CGPoint(x: 32.09, y: 17.07), controlPoint1: CGPoint(x: 29.77, y: 18.79), controlPoint2: CGPoint(x: 30.79, y: 17.77))
        devicesPath.addCurve(to: CGPoint(x: 36, y: 16.07), controlPoint1: CGPoint(x: 33.08, y: 16.54), controlPoint2: CGPoint(x: 34.05, y: 16.2))
        devicesPath.close()
        devicesPath.move(to: CGPoint(x: 41.13, y: 24))
        devicesPath.addCurve(to: CGPoint(x: 38.05, y: 24.53), controlPoint1: CGPoint(x: 39.34, y: 24), controlPoint2: CGPoint(x: 38.7, y: 24.19))
        devicesPath.addCurve(to: CGPoint(x: 36.53, y: 26.05), controlPoint1: CGPoint(x: 37.39, y: 24.88), controlPoint2: CGPoint(x: 36.88, y: 25.39))
        devicesPath.addCurve(to: CGPoint(x: 36, y: 29.13), controlPoint1: CGPoint(x: 36.19, y: 26.7), controlPoint2: CGPoint(x: 36, y: 27.34))
        devicesPath.addLine(to: CGPoint(x: 36, y: 50.87))
        devicesPath.addCurve(to: CGPoint(x: 36.53, y: 53.95), controlPoint1: CGPoint(x: 36, y: 52.66), controlPoint2: CGPoint(x: 36.19, y: 53.3))
        devicesPath.addCurve(to: CGPoint(x: 38.05, y: 55.47), controlPoint1: CGPoint(x: 36.88, y: 54.61), controlPoint2: CGPoint(x: 37.39, y: 55.12))
        devicesPath.addCurve(to: CGPoint(x: 41.13, y: 56), controlPoint1: CGPoint(x: 38.7, y: 55.81), controlPoint2: CGPoint(x: 39.34, y: 56))
        devicesPath.addLine(to: CGPoint(x: 50.87, y: 56))
        devicesPath.addCurve(to: CGPoint(x: 53.95, y: 55.47), controlPoint1: CGPoint(x: 52.66, y: 56), controlPoint2: CGPoint(x: 53.3, y: 55.81))
        devicesPath.addCurve(to: CGPoint(x: 55.47, y: 53.95), controlPoint1: CGPoint(x: 54.61, y: 55.12), controlPoint2: CGPoint(x: 55.12, y: 54.61))
        devicesPath.addCurve(to: CGPoint(x: 56, y: 50.87), controlPoint1: CGPoint(x: 55.81, y: 53.3), controlPoint2: CGPoint(x: 56, y: 52.66))
        devicesPath.addLine(to: CGPoint(x: 56, y: 29.13))
        devicesPath.addCurve(to: CGPoint(x: 55.47, y: 26.05), controlPoint1: CGPoint(x: 56, y: 27.34), controlPoint2: CGPoint(x: 55.81, y: 26.7))
        devicesPath.addCurve(to: CGPoint(x: 53.95, y: 24.53), controlPoint1: CGPoint(x: 55.12, y: 25.39), controlPoint2: CGPoint(x: 54.61, y: 24.88))
        devicesPath.addCurve(to: CGPoint(x: 50.87, y: 24), controlPoint1: CGPoint(x: 53.3, y: 24.19), controlPoint2: CGPoint(x: 52.66, y: 24))
        devicesPath.addLine(to: CGPoint(x: 41.13, y: 24))
        devicesPath.close()
        color.setFill()
        devicesPath.fill()
    }

    @objc dynamic public class func drawIcon_settingsOptions_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Options Drawing
        let optionsPath = UIBezierPath()
        optionsPath.move(to: CGPoint(x: 38.93, y: 60))
        optionsPath.addLine(to: CGPoint(x: 60, y: 60))
        optionsPath.addCurve(to: CGPoint(x: 64, y: 56), controlPoint1: CGPoint(x: 62.22, y: 60), controlPoint2: CGPoint(x: 64, y: 58.21))
        optionsPath.addCurve(to: CGPoint(x: 60, y: 52), controlPoint1: CGPoint(x: 64, y: 53.78), controlPoint2: CGPoint(x: 62.21, y: 52))
        optionsPath.addLine(to: CGPoint(x: 38.93, y: 52))
        optionsPath.addCurve(to: CGPoint(x: 32, y: 48), controlPoint1: CGPoint(x: 37.55, y: 49.61), controlPoint2: CGPoint(x: 34.96, y: 48))
        optionsPath.addCurve(to: CGPoint(x: 25.07, y: 52), controlPoint1: CGPoint(x: 29.04, y: 48), controlPoint2: CGPoint(x: 26.45, y: 49.61))
        optionsPath.addLine(to: CGPoint(x: 4, y: 52))
        optionsPath.addCurve(to: CGPoint(x: 0, y: 56), controlPoint1: CGPoint(x: 1.78, y: 52), controlPoint2: CGPoint(x: 0, y: 53.79))
        optionsPath.addCurve(to: CGPoint(x: 4, y: 60), controlPoint1: CGPoint(x: 0, y: 58.22), controlPoint2: CGPoint(x: 1.79, y: 60))
        optionsPath.addLine(to: CGPoint(x: 25.07, y: 60))
        optionsPath.addCurve(to: CGPoint(x: 32, y: 64), controlPoint1: CGPoint(x: 26.45, y: 62.39), controlPoint2: CGPoint(x: 29.04, y: 64))
        optionsPath.addCurve(to: CGPoint(x: 38.93, y: 60), controlPoint1: CGPoint(x: 34.96, y: 64), controlPoint2: CGPoint(x: 37.55, y: 62.39))
        optionsPath.addLine(to: CGPoint(x: 38.93, y: 60))
        optionsPath.addLine(to: CGPoint(x: 38.93, y: 60))
        optionsPath.close()
        optionsPath.move(to: CGPoint(x: 26.93, y: 36))
        optionsPath.addLine(to: CGPoint(x: 60, y: 36))
        optionsPath.addCurve(to: CGPoint(x: 64, y: 32), controlPoint1: CGPoint(x: 62.22, y: 36), controlPoint2: CGPoint(x: 64, y: 34.21))
        optionsPath.addCurve(to: CGPoint(x: 60, y: 28), controlPoint1: CGPoint(x: 64, y: 29.78), controlPoint2: CGPoint(x: 62.21, y: 28))
        optionsPath.addLine(to: CGPoint(x: 26.93, y: 28))
        optionsPath.addCurve(to: CGPoint(x: 20, y: 24), controlPoint1: CGPoint(x: 25.55, y: 25.61), controlPoint2: CGPoint(x: 22.96, y: 24))
        optionsPath.addCurve(to: CGPoint(x: 13.07, y: 28), controlPoint1: CGPoint(x: 17.04, y: 24), controlPoint2: CGPoint(x: 14.45, y: 25.61))
        optionsPath.addLine(to: CGPoint(x: 4, y: 28))
        optionsPath.addCurve(to: CGPoint(x: 0, y: 32), controlPoint1: CGPoint(x: 1.78, y: 28), controlPoint2: CGPoint(x: 0, y: 29.79))
        optionsPath.addCurve(to: CGPoint(x: 4, y: 36), controlPoint1: CGPoint(x: 0, y: 34.22), controlPoint2: CGPoint(x: 1.79, y: 36))
        optionsPath.addLine(to: CGPoint(x: 13.07, y: 36))
        optionsPath.addCurve(to: CGPoint(x: 20, y: 40), controlPoint1: CGPoint(x: 14.45, y: 38.39), controlPoint2: CGPoint(x: 17.04, y: 40))
        optionsPath.addCurve(to: CGPoint(x: 26.93, y: 36), controlPoint1: CGPoint(x: 22.96, y: 40), controlPoint2: CGPoint(x: 25.55, y: 38.39))
        optionsPath.addLine(to: CGPoint(x: 26.93, y: 36))
        optionsPath.addLine(to: CGPoint(x: 26.93, y: 36))
        optionsPath.close()
        optionsPath.move(to: CGPoint(x: 50.93, y: 12))
        optionsPath.addLine(to: CGPoint(x: 60, y: 12))
        optionsPath.addCurve(to: CGPoint(x: 64, y: 8), controlPoint1: CGPoint(x: 62.22, y: 12), controlPoint2: CGPoint(x: 64, y: 10.21))
        optionsPath.addCurve(to: CGPoint(x: 60, y: 4), controlPoint1: CGPoint(x: 64, y: 5.78), controlPoint2: CGPoint(x: 62.21, y: 4))
        optionsPath.addLine(to: CGPoint(x: 50.93, y: 4))
        optionsPath.addCurve(to: CGPoint(x: 44, y: 0), controlPoint1: CGPoint(x: 49.55, y: 1.61), controlPoint2: CGPoint(x: 46.96, y: 0))
        optionsPath.addCurve(to: CGPoint(x: 37.07, y: 4), controlPoint1: CGPoint(x: 41.04, y: 0), controlPoint2: CGPoint(x: 38.45, y: 1.61))
        optionsPath.addLine(to: CGPoint(x: 4, y: 4))
        optionsPath.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 1.78, y: 4), controlPoint2: CGPoint(x: 0, y: 5.79))
        optionsPath.addCurve(to: CGPoint(x: 4, y: 12), controlPoint1: CGPoint(x: 0, y: 10.22), controlPoint2: CGPoint(x: 1.79, y: 12))
        optionsPath.addLine(to: CGPoint(x: 37.07, y: 12))
        optionsPath.addCurve(to: CGPoint(x: 44, y: 16), controlPoint1: CGPoint(x: 38.45, y: 14.39), controlPoint2: CGPoint(x: 41.04, y: 16))
        optionsPath.addCurve(to: CGPoint(x: 50.93, y: 12), controlPoint1: CGPoint(x: 46.96, y: 16), controlPoint2: CGPoint(x: 49.55, y: 14.39))
        optionsPath.addLine(to: CGPoint(x: 50.93, y: 12))
        optionsPath.addLine(to: CGPoint(x: 50.93, y: 12))
        optionsPath.close()
        optionsPath.usesEvenOddFillRule = true
        color.setFill()
        optionsPath.fill()
    }

    @objc dynamic public class func drawIcon_settingsAdvanced_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Advanced Drawing
        let advancedPath = UIBezierPath()
        advancedPath.move(to: CGPoint(x: 26.1, y: 29.58))
        advancedPath.addLine(to: CGPoint(x: 23.37, y: 32.3))
        advancedPath.addLine(to: CGPoint(x: 21.99, y: 30.92))
        advancedPath.addLine(to: CGPoint(x: 19.22, y: 33.69))
        advancedPath.addLine(to: CGPoint(x: 21.99, y: 36.46))
        advancedPath.addLine(to: CGPoint(x: 4.15, y: 54.3))
        advancedPath.addLine(to: CGPoint(x: 0, y: 61.23))
        advancedPath.addLine(to: CGPoint(x: 2.77, y: 64))
        advancedPath.addLine(to: CGPoint(x: 9.69, y: 59.84))
        advancedPath.addLine(to: CGPoint(x: 27.52, y: 42))
        advancedPath.addLine(to: CGPoint(x: 30.29, y: 44.76))
        advancedPath.addLine(to: CGPoint(x: 33.06, y: 42))
        advancedPath.addLine(to: CGPoint(x: 31.68, y: 40.61))
        advancedPath.addLine(to: CGPoint(x: 34.12, y: 38.16))
        advancedPath.addLine(to: CGPoint(x: 57.17, y: 62.82))
        advancedPath.addCurve(to: CGPoint(x: 62.83, y: 62.83), controlPoint1: CGPoint(x: 58.74, y: 64.4), controlPoint2: CGPoint(x: 61.26, y: 64.39))
        advancedPath.addCurve(to: CGPoint(x: 63.96, y: 59.41), controlPoint1: CGPoint(x: 63.76, y: 61.89), controlPoint2: CGPoint(x: 64.14, y: 60.61))
        advancedPath.addCurve(to: CGPoint(x: 62.82, y: 57.17), controlPoint1: CGPoint(x: 63.83, y: 58.59), controlPoint2: CGPoint(x: 63.45, y: 57.8))
        advancedPath.addLine(to: CGPoint(x: 41.11, y: 33.94))
        advancedPath.addLine(to: CGPoint(x: 61.64, y: 13.39))
        advancedPath.addCurve(to: CGPoint(x: 61.66, y: 2.3), controlPoint1: CGPoint(x: 64.74, y: 10.29), controlPoint2: CGPoint(x: 64.72, y: 5.36))
        advancedPath.addCurve(to: CGPoint(x: 50.57, y: 2.31), controlPoint1: CGPoint(x: 58.58, y: -0.78), controlPoint2: CGPoint(x: 53.64, y: -0.75))
        advancedPath.addLine(to: CGPoint(x: 30.41, y: 22.49))
        advancedPath.addLine(to: CGPoint(x: 22.61, y: 14.14))
        advancedPath.addLine(to: CGPoint(x: 33.92, y: 2.83))
        advancedPath.addLine(to: CGPoint(x: 19.79, y: 0))
        advancedPath.addLine(to: CGPoint(x: 14.13, y: 5.66))
        advancedPath.addCurve(to: CGPoint(x: 8.48, y: 5.66), controlPoint1: CGPoint(x: 12.56, y: 4.09), controlPoint2: CGPoint(x: 10.04, y: 4.1))
        advancedPath.addCurve(to: CGPoint(x: 8.48, y: 11.31), controlPoint1: CGPoint(x: 6.91, y: 7.23), controlPoint2: CGPoint(x: 6.92, y: 9.75))
        advancedPath.addLine(to: CGPoint(x: 0, y: 19.8))
        advancedPath.addLine(to: CGPoint(x: 8.48, y: 28.29))
        advancedPath.addLine(to: CGPoint(x: 16.96, y: 19.8))
        advancedPath.addLine(to: CGPoint(x: 24.76, y: 28.14))
        advancedPath.addLine(to: CGPoint(x: 24.83, y: 28.21))
        advancedPath.addLine(to: CGPoint(x: 26.1, y: 29.58))
        advancedPath.addLine(to: CGPoint(x: 26.1, y: 29.58))
        advancedPath.close()
        advancedPath.usesEvenOddFillRule = true
        color.setFill()
        advancedPath.fill()
    }

    @objc dynamic public class func drawIcon_settingsSupport_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Support Drawing
        let supportPath = UIBezierPath()
        supportPath.move(to: CGPoint(x: 45.32, y: 56.63))
        supportPath.addCurve(to: CGPoint(x: 56.63, y: 45.32), controlPoint1: CGPoint(x: 50.1, y: 54.04), controlPoint2: CGPoint(x: 54.04, y: 50.1))
        supportPath.addLine(to: CGPoint(x: 47.46, y: 36.14))
        supportPath.addCurve(to: CGPoint(x: 48, y: 32), controlPoint1: CGPoint(x: 47.81, y: 34.82), controlPoint2: CGPoint(x: 48, y: 33.43))
        supportPath.addCurve(to: CGPoint(x: 47.46, y: 27.86), controlPoint1: CGPoint(x: 48, y: 30.57), controlPoint2: CGPoint(x: 47.81, y: 29.18))
        supportPath.addLine(to: CGPoint(x: 56.63, y: 18.68))
        supportPath.addCurve(to: CGPoint(x: 45.32, y: 7.37), controlPoint1: CGPoint(x: 54.04, y: 13.9), controlPoint2: CGPoint(x: 50.1, y: 9.96))
        supportPath.addLine(to: CGPoint(x: 36.14, y: 16.54))
        supportPath.addCurve(to: CGPoint(x: 32, y: 16), controlPoint1: CGPoint(x: 34.82, y: 16.19), controlPoint2: CGPoint(x: 33.43, y: 16))
        supportPath.addCurve(to: CGPoint(x: 27.86, y: 16.54), controlPoint1: CGPoint(x: 30.57, y: 16), controlPoint2: CGPoint(x: 29.18, y: 16.19))
        supportPath.addLine(to: CGPoint(x: 27.86, y: 16.54))
        supportPath.addLine(to: CGPoint(x: 18.68, y: 7.37))
        supportPath.addCurve(to: CGPoint(x: 7.37, y: 18.68), controlPoint1: CGPoint(x: 13.9, y: 9.96), controlPoint2: CGPoint(x: 9.96, y: 13.9))
        supportPath.addLine(to: CGPoint(x: 16.54, y: 27.86))
        supportPath.addCurve(to: CGPoint(x: 16, y: 32), controlPoint1: CGPoint(x: 16.19, y: 29.18), controlPoint2: CGPoint(x: 16, y: 30.57))
        supportPath.addCurve(to: CGPoint(x: 16.54, y: 36.14), controlPoint1: CGPoint(x: 16, y: 33.43), controlPoint2: CGPoint(x: 16.19, y: 34.82))
        supportPath.addLine(to: CGPoint(x: 16.54, y: 36.14))
        supportPath.addLine(to: CGPoint(x: 7.37, y: 45.32))
        supportPath.addCurve(to: CGPoint(x: 18.68, y: 56.63), controlPoint1: CGPoint(x: 9.96, y: 50.1), controlPoint2: CGPoint(x: 13.9, y: 54.04))
        supportPath.addLine(to: CGPoint(x: 27.86, y: 47.46))
        supportPath.addLine(to: CGPoint(x: 27.86, y: 47.46))
        supportPath.addCurve(to: CGPoint(x: 32, y: 48), controlPoint1: CGPoint(x: 29.18, y: 47.81), controlPoint2: CGPoint(x: 30.57, y: 48))
        supportPath.addCurve(to: CGPoint(x: 36.14, y: 47.46), controlPoint1: CGPoint(x: 33.43, y: 48), controlPoint2: CGPoint(x: 34.82, y: 47.81))
        supportPath.addLine(to: CGPoint(x: 45.32, y: 56.63))
        supportPath.addLine(to: CGPoint(x: 45.32, y: 56.63))
        supportPath.close()
        supportPath.move(to: CGPoint(x: 32, y: 64))
        supportPath.addCurve(to: CGPoint(x: 0, y: 32), controlPoint1: CGPoint(x: 14.33, y: 64), controlPoint2: CGPoint(x: 0, y: 49.67))
        supportPath.addCurve(to: CGPoint(x: 32, y: 0), controlPoint1: CGPoint(x: 0, y: 14.33), controlPoint2: CGPoint(x: 14.33, y: 0))
        supportPath.addCurve(to: CGPoint(x: 64, y: 32), controlPoint1: CGPoint(x: 49.67, y: 0), controlPoint2: CGPoint(x: 64, y: 14.33))
        supportPath.addCurve(to: CGPoint(x: 32, y: 64), controlPoint1: CGPoint(x: 64, y: 49.67), controlPoint2: CGPoint(x: 49.67, y: 64))
        supportPath.addLine(to: CGPoint(x: 32, y: 64))
        supportPath.close()
        supportPath.move(to: CGPoint(x: 32, y: 48))
        supportPath.addLine(to: CGPoint(x: 32, y: 48))
        supportPath.addCurve(to: CGPoint(x: 48, y: 32), controlPoint1: CGPoint(x: 40.84, y: 48), controlPoint2: CGPoint(x: 48, y: 40.84))
        supportPath.addCurve(to: CGPoint(x: 32, y: 16), controlPoint1: CGPoint(x: 48, y: 23.16), controlPoint2: CGPoint(x: 40.84, y: 16))
        supportPath.addCurve(to: CGPoint(x: 16, y: 32), controlPoint1: CGPoint(x: 23.16, y: 16), controlPoint2: CGPoint(x: 16, y: 23.16))
        supportPath.addCurve(to: CGPoint(x: 32, y: 48), controlPoint1: CGPoint(x: 16, y: 40.84), controlPoint2: CGPoint(x: 23.16, y: 48))
        supportPath.addLine(to: CGPoint(x: 32, y: 48))
        supportPath.addLine(to: CGPoint(x: 32, y: 48))
        supportPath.addLine(to: CGPoint(x: 32, y: 48))
        supportPath.addLine(to: CGPoint(x: 32, y: 48))
        supportPath.close()
        supportPath.move(to: CGPoint(x: 32, y: 52))
        supportPath.addLine(to: CGPoint(x: 32, y: 52))
        supportPath.addCurve(to: CGPoint(x: 12, y: 32), controlPoint1: CGPoint(x: 20.95, y: 52), controlPoint2: CGPoint(x: 12, y: 43.05))
        supportPath.addCurve(to: CGPoint(x: 32, y: 12), controlPoint1: CGPoint(x: 12, y: 20.95), controlPoint2: CGPoint(x: 20.95, y: 12))
        supportPath.addCurve(to: CGPoint(x: 52, y: 32), controlPoint1: CGPoint(x: 43.05, y: 12), controlPoint2: CGPoint(x: 52, y: 20.95))
        supportPath.addCurve(to: CGPoint(x: 32, y: 52), controlPoint1: CGPoint(x: 52, y: 43.05), controlPoint2: CGPoint(x: 43.05, y: 52))
        supportPath.addLine(to: CGPoint(x: 32, y: 52))
        supportPath.addLine(to: CGPoint(x: 32, y: 52))
        supportPath.addLine(to: CGPoint(x: 32, y: 52))
        supportPath.addLine(to: CGPoint(x: 32, y: 52))
        supportPath.close()
        color.setFill()
        supportPath.fill()
    }

    @objc dynamic public class func drawIcon_about_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Info Drawing
        let infoPath = UIBezierPath()
        infoPath.move(to: CGPoint(x: 32, y: 64))
        infoPath.addCurve(to: CGPoint(x: 0, y: 32), controlPoint1: CGPoint(x: 14.33, y: 64), controlPoint2: CGPoint(x: 0, y: 49.67))
        infoPath.addCurve(to: CGPoint(x: 32, y: 0), controlPoint1: CGPoint(x: 0, y: 14.33), controlPoint2: CGPoint(x: 14.33, y: 0))
        infoPath.addCurve(to: CGPoint(x: 64, y: 32), controlPoint1: CGPoint(x: 49.67, y: 0), controlPoint2: CGPoint(x: 64, y: 14.33))
        infoPath.addCurve(to: CGPoint(x: 32, y: 64), controlPoint1: CGPoint(x: 64, y: 49.67), controlPoint2: CGPoint(x: 49.67, y: 64))
        infoPath.close()
        infoPath.move(to: CGPoint(x: 32, y: 56))
        infoPath.addCurve(to: CGPoint(x: 56, y: 32), controlPoint1: CGPoint(x: 45.25, y: 56), controlPoint2: CGPoint(x: 56, y: 45.25))
        infoPath.addCurve(to: CGPoint(x: 32, y: 8), controlPoint1: CGPoint(x: 56, y: 18.75), controlPoint2: CGPoint(x: 45.25, y: 8))
        infoPath.addCurve(to: CGPoint(x: 8, y: 32), controlPoint1: CGPoint(x: 18.75, y: 8), controlPoint2: CGPoint(x: 8, y: 18.75))
        infoPath.addCurve(to: CGPoint(x: 32, y: 56), controlPoint1: CGPoint(x: 8, y: 45.25), controlPoint2: CGPoint(x: 18.75, y: 56))
        infoPath.close()
        infoPath.move(to: CGPoint(x: 32, y: 28))
        infoPath.addCurve(to: CGPoint(x: 36, y: 32), controlPoint1: CGPoint(x: 34.21, y: 28), controlPoint2: CGPoint(x: 36, y: 29.79))
        infoPath.addLine(to: CGPoint(x: 36, y: 44))
        infoPath.addCurve(to: CGPoint(x: 32, y: 48), controlPoint1: CGPoint(x: 36, y: 46.21), controlPoint2: CGPoint(x: 34.21, y: 48))
        infoPath.addCurve(to: CGPoint(x: 28, y: 44), controlPoint1: CGPoint(x: 29.79, y: 48), controlPoint2: CGPoint(x: 28, y: 46.21))
        infoPath.addLine(to: CGPoint(x: 28, y: 32))
        infoPath.addCurve(to: CGPoint(x: 32, y: 28), controlPoint1: CGPoint(x: 28, y: 29.79), controlPoint2: CGPoint(x: 29.79, y: 28))
        infoPath.close()
        infoPath.move(to: CGPoint(x: 32, y: 24))
        infoPath.addCurve(to: CGPoint(x: 28, y: 20), controlPoint1: CGPoint(x: 29.79, y: 24), controlPoint2: CGPoint(x: 28, y: 22.21))
        infoPath.addCurve(to: CGPoint(x: 32, y: 16), controlPoint1: CGPoint(x: 28, y: 17.79), controlPoint2: CGPoint(x: 29.79, y: 16))
        infoPath.addCurve(to: CGPoint(x: 36, y: 20), controlPoint1: CGPoint(x: 34.21, y: 16), controlPoint2: CGPoint(x: 36, y: 17.79))
        infoPath.addCurve(to: CGPoint(x: 32, y: 24), controlPoint1: CGPoint(x: 36, y: 22.21), controlPoint2: CGPoint(x: 34.21, y: 24))
        infoPath.close()
        color.setFill()
        infoPath.fill()
    }

    @objc dynamic public class func drawIcon_send_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Send Drawing
        let sendPath = UIBezierPath()
        sendPath.move(to: CGPoint(x: 8, y: 54.06))
        sendPath.addCurve(to: CGPoint(x: 16.2, y: 59.08), controlPoint1: CGPoint(x: 8, y: 59.19), controlPoint2: CGPoint(x: 11.67, y: 61.4))
        sendPath.addLine(to: CGPoint(x: 60.62, y: 36.21))
        sendPath.addCurve(to: CGPoint(x: 60.62, y: 27.77), controlPoint1: CGPoint(x: 65.11, y: 33.9), controlPoint2: CGPoint(x: 65.15, y: 30.11))
        sendPath.addLine(to: CGPoint(x: 16.2, y: 4.91))
        sendPath.addCurve(to: CGPoint(x: 8, y: 9.93), controlPoint1: CGPoint(x: 11.71, y: 2.6), controlPoint2: CGPoint(x: 8, y: 4.83))
        sendPath.addLine(to: CGPoint(x: 8, y: 32))
        sendPath.addLine(to: CGPoint(x: 50, y: 32))
        sendPath.addLine(to: CGPoint(x: 8, y: 39))
        sendPath.addLine(to: CGPoint(x: 8, y: 54.06))
        sendPath.close()
        sendPath.usesEvenOddFillRule = true
        color.setFill()
        sendPath.fill()
    }

    @objc dynamic public class func drawIcon_emoji_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Emoji Drawing
        let emojiPath = UIBezierPath()
        emojiPath.move(to: CGPoint(x: 32, y: 64))
        emojiPath.addCurve(to: CGPoint(x: 0, y: 32), controlPoint1: CGPoint(x: 14.33, y: 64), controlPoint2: CGPoint(x: 0, y: 49.67))
        emojiPath.addCurve(to: CGPoint(x: 32, y: 0), controlPoint1: CGPoint(x: 0, y: 14.33), controlPoint2: CGPoint(x: 14.33, y: 0))
        emojiPath.addCurve(to: CGPoint(x: 64, y: 32), controlPoint1: CGPoint(x: 49.67, y: 0), controlPoint2: CGPoint(x: 64, y: 14.33))
        emojiPath.addCurve(to: CGPoint(x: 32, y: 64), controlPoint1: CGPoint(x: 64, y: 49.67), controlPoint2: CGPoint(x: 49.67, y: 64))
        emojiPath.close()
        emojiPath.move(to: CGPoint(x: 32, y: 58))
        emojiPath.addCurve(to: CGPoint(x: 58, y: 32), controlPoint1: CGPoint(x: 46.36, y: 58), controlPoint2: CGPoint(x: 58, y: 46.36))
        emojiPath.addCurve(to: CGPoint(x: 32, y: 6), controlPoint1: CGPoint(x: 58, y: 17.64), controlPoint2: CGPoint(x: 46.36, y: 6))
        emojiPath.addCurve(to: CGPoint(x: 6, y: 32), controlPoint1: CGPoint(x: 17.64, y: 6), controlPoint2: CGPoint(x: 6, y: 17.64))
        emojiPath.addCurve(to: CGPoint(x: 32, y: 58), controlPoint1: CGPoint(x: 6, y: 46.36), controlPoint2: CGPoint(x: 17.64, y: 58))
        emojiPath.close()
        emojiPath.move(to: CGPoint(x: 51.6, y: 36))
        emojiPath.addLine(to: CGPoint(x: 12.4, y: 36))
        emojiPath.addCurve(to: CGPoint(x: 32, y: 52), controlPoint1: CGPoint(x: 14.25, y: 45.13), controlPoint2: CGPoint(x: 22.32, y: 52))
        emojiPath.addCurve(to: CGPoint(x: 51.6, y: 36), controlPoint1: CGPoint(x: 41.68, y: 52), controlPoint2: CGPoint(x: 49.75, y: 45.13))
        emojiPath.close()
        emojiPath.move(to: CGPoint(x: 45.9, y: 40))
        emojiPath.addCurve(to: CGPoint(x: 18.17, y: 40.06), controlPoint1: CGPoint(x: 35.15, y: 40), controlPoint2: CGPoint(x: 18.17, y: 40.06))
        emojiPath.addCurve(to: CGPoint(x: 21.42, y: 44), controlPoint1: CGPoint(x: 19.04, y: 41.54), controlPoint2: CGPoint(x: 20.14, y: 42.87))
        emojiPath.addLine(to: CGPoint(x: 42.58, y: 44))
        emojiPath.addCurve(to: CGPoint(x: 45.9, y: 40), controlPoint1: CGPoint(x: 44.94, y: 41.93), controlPoint2: CGPoint(x: 45.9, y: 40))
        emojiPath.close()
        emojiPath.move(to: CGPoint(x: 40, y: 28))
        emojiPath.addCurve(to: CGPoint(x: 44, y: 24), controlPoint1: CGPoint(x: 42.21, y: 28), controlPoint2: CGPoint(x: 44, y: 26.21))
        emojiPath.addCurve(to: CGPoint(x: 40, y: 20), controlPoint1: CGPoint(x: 44, y: 21.79), controlPoint2: CGPoint(x: 42.21, y: 20))
        emojiPath.addCurve(to: CGPoint(x: 36, y: 24), controlPoint1: CGPoint(x: 37.79, y: 20), controlPoint2: CGPoint(x: 36, y: 21.79))
        emojiPath.addCurve(to: CGPoint(x: 40, y: 28), controlPoint1: CGPoint(x: 36, y: 26.21), controlPoint2: CGPoint(x: 37.79, y: 28))
        emojiPath.close()
        emojiPath.move(to: CGPoint(x: 24, y: 28))
        emojiPath.addCurve(to: CGPoint(x: 28, y: 24), controlPoint1: CGPoint(x: 26.21, y: 28), controlPoint2: CGPoint(x: 28, y: 26.21))
        emojiPath.addCurve(to: CGPoint(x: 24, y: 20), controlPoint1: CGPoint(x: 28, y: 21.79), controlPoint2: CGPoint(x: 26.21, y: 20))
        emojiPath.addCurve(to: CGPoint(x: 20, y: 24), controlPoint1: CGPoint(x: 21.79, y: 20), controlPoint2: CGPoint(x: 20, y: 21.79))
        emojiPath.addCurve(to: CGPoint(x: 24, y: 28), controlPoint1: CGPoint(x: 20, y: 26.21), controlPoint2: CGPoint(x: 21.79, y: 28))
        emojiPath.close()
        emojiPath.usesEvenOddFillRule = true
        color.setFill()
        emojiPath.fill()
    }

    @objc dynamic public class func drawIcon_flower_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Flower Drawing
        let flowerPath = UIBezierPath()
        flowerPath.move(to: CGPoint(x: 39.73, y: 13.34))
        flowerPath.addCurve(to: CGPoint(x: 32, y: 0), controlPoint1: CGPoint(x: 38.82, y: 5.66), controlPoint2: CGPoint(x: 35.7, y: 0))
        flowerPath.addCurve(to: CGPoint(x: 24.27, y: 13.34), controlPoint1: CGPoint(x: 28.3, y: 0), controlPoint2: CGPoint(x: 25.18, y: 5.66))
        flowerPath.addCurve(to: CGPoint(x: 9.37, y: 9.37), controlPoint1: CGPoint(x: 18.19, y: 8.55), controlPoint2: CGPoint(x: 11.99, y: 6.75))
        flowerPath.addCurve(to: CGPoint(x: 13.34, y: 24.27), controlPoint1: CGPoint(x: 6.75, y: 11.99), controlPoint2: CGPoint(x: 8.55, y: 18.19))
        flowerPath.addLine(to: CGPoint(x: 13.34, y: 24.27))
        flowerPath.addCurve(to: CGPoint(x: 0, y: 32), controlPoint1: CGPoint(x: 5.66, y: 25.18), controlPoint2: CGPoint(x: 0, y: 28.3))
        flowerPath.addCurve(to: CGPoint(x: 13.34, y: 39.73), controlPoint1: CGPoint(x: 0, y: 35.7), controlPoint2: CGPoint(x: 5.66, y: 38.82))
        flowerPath.addCurve(to: CGPoint(x: 9.37, y: 54.63), controlPoint1: CGPoint(x: 8.55, y: 45.81), controlPoint2: CGPoint(x: 6.75, y: 52.01))
        flowerPath.addCurve(to: CGPoint(x: 24.27, y: 50.66), controlPoint1: CGPoint(x: 11.99, y: 57.25), controlPoint2: CGPoint(x: 18.19, y: 55.45))
        flowerPath.addCurve(to: CGPoint(x: 32, y: 64), controlPoint1: CGPoint(x: 25.18, y: 58.34), controlPoint2: CGPoint(x: 28.3, y: 64))
        flowerPath.addCurve(to: CGPoint(x: 39.73, y: 50.66), controlPoint1: CGPoint(x: 35.7, y: 64), controlPoint2: CGPoint(x: 38.82, y: 58.34))
        flowerPath.addCurve(to: CGPoint(x: 54.63, y: 54.63), controlPoint1: CGPoint(x: 45.81, y: 55.45), controlPoint2: CGPoint(x: 52.01, y: 57.25))
        flowerPath.addCurve(to: CGPoint(x: 50.66, y: 39.73), controlPoint1: CGPoint(x: 57.25, y: 52.01), controlPoint2: CGPoint(x: 55.45, y: 45.81))
        flowerPath.addCurve(to: CGPoint(x: 64, y: 32), controlPoint1: CGPoint(x: 58.34, y: 38.82), controlPoint2: CGPoint(x: 64, y: 35.7))
        flowerPath.addCurve(to: CGPoint(x: 50.66, y: 24.27), controlPoint1: CGPoint(x: 64, y: 28.3), controlPoint2: CGPoint(x: 58.34, y: 25.18))
        flowerPath.addCurve(to: CGPoint(x: 54.63, y: 9.37), controlPoint1: CGPoint(x: 55.45, y: 18.19), controlPoint2: CGPoint(x: 57.25, y: 11.99))
        flowerPath.addCurve(to: CGPoint(x: 39.73, y: 13.34), controlPoint1: CGPoint(x: 52.01, y: 6.75), controlPoint2: CGPoint(x: 45.81, y: 8.55))
        flowerPath.addLine(to: CGPoint(x: 39.73, y: 13.34))
        flowerPath.addLine(to: CGPoint(x: 39.73, y: 13.34))
        flowerPath.close()
        flowerPath.move(to: CGPoint(x: 32, y: 44))
        flowerPath.addCurve(to: CGPoint(x: 44, y: 32), controlPoint1: CGPoint(x: 38.63, y: 44), controlPoint2: CGPoint(x: 44, y: 38.63))
        flowerPath.addCurve(to: CGPoint(x: 32, y: 20), controlPoint1: CGPoint(x: 44, y: 25.37), controlPoint2: CGPoint(x: 38.63, y: 20))
        flowerPath.addCurve(to: CGPoint(x: 20, y: 32), controlPoint1: CGPoint(x: 25.37, y: 20), controlPoint2: CGPoint(x: 20, y: 25.37))
        flowerPath.addCurve(to: CGPoint(x: 32, y: 44), controlPoint1: CGPoint(x: 20, y: 38.63), controlPoint2: CGPoint(x: 25.37, y: 44))
        flowerPath.addLine(to: CGPoint(x: 32, y: 44))
        flowerPath.close()
        flowerPath.usesEvenOddFillRule = true
        color.setFill()
        flowerPath.fill()
    }

    @objc dynamic public class func drawIcon_cake_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Cake Drawing
        let cakePath = UIBezierPath()
        cakePath.move(to: CGPoint(x: 52, y: 28))
        cakePath.addLine(to: CGPoint(x: 52, y: 16))
        cakePath.addLine(to: CGPoint(x: 44, y: 16))
        cakePath.addLine(to: CGPoint(x: 44, y: 28))
        cakePath.addLine(to: CGPoint(x: 36, y: 28))
        cakePath.addLine(to: CGPoint(x: 36, y: 12))
        cakePath.addLine(to: CGPoint(x: 28, y: 12))
        cakePath.addLine(to: CGPoint(x: 28, y: 28))
        cakePath.addLine(to: CGPoint(x: 20, y: 28))
        cakePath.addLine(to: CGPoint(x: 20, y: 16))
        cakePath.addLine(to: CGPoint(x: 12, y: 16))
        cakePath.addLine(to: CGPoint(x: 12, y: 28))
        cakePath.addLine(to: CGPoint(x: 7.98, y: 28))
        cakePath.addCurve(to: CGPoint(x: 0, y: 35.99), controlPoint1: CGPoint(x: 3.58, y: 28), controlPoint2: CGPoint(x: 0, y: 31.58))
        cakePath.addLine(to: CGPoint(x: 0, y: 42.98))
        cakePath.addCurve(to: CGPoint(x: 16, y: 48), controlPoint1: CGPoint(x: 4.54, y: 46.14), controlPoint2: CGPoint(x: 10.05, y: 48))
        cakePath.addCurve(to: CGPoint(x: 32, y: 42.98), controlPoint1: CGPoint(x: 21.95, y: 48), controlPoint2: CGPoint(x: 27.46, y: 46.14))
        cakePath.addCurve(to: CGPoint(x: 48, y: 48), controlPoint1: CGPoint(x: 36.54, y: 46.14), controlPoint2: CGPoint(x: 42.05, y: 48))
        cakePath.addCurve(to: CGPoint(x: 64, y: 43.7), controlPoint1: CGPoint(x: 53.95, y: 48), controlPoint2: CGPoint(x: 59.46, y: 46.14))
        cakePath.addLine(to: CGPoint(x: 64, y: 35.99))
        cakePath.addCurve(to: CGPoint(x: 56.02, y: 28), controlPoint1: CGPoint(x: 64, y: 31.58), controlPoint2: CGPoint(x: 60.43, y: 28))
        cakePath.addLine(to: CGPoint(x: 52, y: 28))
        cakePath.close()
        cakePath.move(to: CGPoint(x: 13.17, y: 12.49))
        cakePath.addCurve(to: CGPoint(x: 18.83, y: 12.49), controlPoint1: CGPoint(x: 14.73, y: 14.05), controlPoint2: CGPoint(x: 17.27, y: 14.05))
        cakePath.addCurve(to: CGPoint(x: 18.83, y: 6.83), controlPoint1: CGPoint(x: 20.39, y: 10.92), controlPoint2: CGPoint(x: 20.39, y: 8.39))
        cakePath.addLine(to: CGPoint(x: 16, y: 4))
        cakePath.addLine(to: CGPoint(x: 13.17, y: 6.83))
        cakePath.addCurve(to: CGPoint(x: 13.17, y: 12.49), controlPoint1: CGPoint(x: 11.61, y: 8.39), controlPoint2: CGPoint(x: 11.61, y: 10.92))
        cakePath.close()
        cakePath.move(to: CGPoint(x: 45.17, y: 12.49))
        cakePath.addCurve(to: CGPoint(x: 50.83, y: 12.49), controlPoint1: CGPoint(x: 46.73, y: 14.05), controlPoint2: CGPoint(x: 49.27, y: 14.05))
        cakePath.addCurve(to: CGPoint(x: 50.83, y: 6.83), controlPoint1: CGPoint(x: 52.39, y: 10.92), controlPoint2: CGPoint(x: 52.39, y: 8.39))
        cakePath.addLine(to: CGPoint(x: 48, y: 4))
        cakePath.addLine(to: CGPoint(x: 45.17, y: 6.83))
        cakePath.addCurve(to: CGPoint(x: 45.17, y: 12.49), controlPoint1: CGPoint(x: 43.61, y: 8.39), controlPoint2: CGPoint(x: 43.61, y: 10.92))
        cakePath.close()
        cakePath.move(to: CGPoint(x: 29.17, y: 8.49))
        cakePath.addCurve(to: CGPoint(x: 34.83, y: 8.49), controlPoint1: CGPoint(x: 30.73, y: 10.05), controlPoint2: CGPoint(x: 33.27, y: 10.05))
        cakePath.addCurve(to: CGPoint(x: 34.83, y: 2.83), controlPoint1: CGPoint(x: 36.39, y: 6.92), controlPoint2: CGPoint(x: 36.39, y: 4.39))
        cakePath.addLine(to: CGPoint(x: 32, y: 0))
        cakePath.addLine(to: CGPoint(x: 29.17, y: 2.83))
        cakePath.addCurve(to: CGPoint(x: 29.17, y: 8.49), controlPoint1: CGPoint(x: 27.61, y: 4.39), controlPoint2: CGPoint(x: 27.61, y: 6.92))
        cakePath.close()
        cakePath.move(to: CGPoint(x: 64, y: 47.72))
        cakePath.addLine(to: CGPoint(x: 64, y: 64))
        cakePath.addLine(to: CGPoint(x: 0, y: 64))
        cakePath.addLine(to: CGPoint(x: 0, y: 47.72))
        cakePath.addCurve(to: CGPoint(x: 16, y: 52), controlPoint1: CGPoint(x: 4.71, y: 50.44), controlPoint2: CGPoint(x: 10.17, y: 52))
        cakePath.addCurve(to: CGPoint(x: 32, y: 47.72), controlPoint1: CGPoint(x: 21.83, y: 52), controlPoint2: CGPoint(x: 27.29, y: 50.44))
        cakePath.addCurve(to: CGPoint(x: 48, y: 52), controlPoint1: CGPoint(x: 36.71, y: 50.44), controlPoint2: CGPoint(x: 42.17, y: 52))
        cakePath.addCurve(to: CGPoint(x: 64, y: 47.72), controlPoint1: CGPoint(x: 53.83, y: 52), controlPoint2: CGPoint(x: 59.29, y: 50.44))
        cakePath.addLine(to: CGPoint(x: 64, y: 47.72))
        cakePath.close()
        cakePath.usesEvenOddFillRule = true
        color.setFill()
        cakePath.fill()
    }

    @objc dynamic public class func drawIcon_car_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 64, y: 45.01))
        bezierPath.addLine(to: CGPoint(x: 64, y: 32))
        bezierPath.addLine(to: CGPoint(x: 57.94, y: 7.75))
        bezierPath.addCurve(to: CGPoint(x: 47.97, y: 0), controlPoint1: CGPoint(x: 56.87, y: 3.47), controlPoint2: CGPoint(x: 52.39, y: 0))
        bezierPath.addLine(to: CGPoint(x: 16.03, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 6.06, y: 7.75), controlPoint1: CGPoint(x: 11.6, y: 0), controlPoint2: CGPoint(x: 7.13, y: 3.49))
        bezierPath.addLine(to: CGPoint(x: 0, y: 32))
        bezierPath.addLine(to: CGPoint(x: 0, y: 45.01))
        bezierPath.addLine(to: CGPoint(x: 0, y: 57.98))
        bezierPath.addCurve(to: CGPoint(x: 6, y: 64), controlPoint1: CGPoint(x: 0, y: 61.33), controlPoint2: CGPoint(x: 2.69, y: 64))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 57.98), controlPoint1: CGPoint(x: 9.34, y: 64), controlPoint2: CGPoint(x: 12, y: 61.31))
        bezierPath.addLine(to: CGPoint(x: 12, y: 52))
        bezierPath.addLine(to: CGPoint(x: 52, y: 52))
        bezierPath.addLine(to: CGPoint(x: 52, y: 57.98))
        bezierPath.addCurve(to: CGPoint(x: 58, y: 64), controlPoint1: CGPoint(x: 52, y: 61.33), controlPoint2: CGPoint(x: 54.69, y: 64))
        bezierPath.addCurve(to: CGPoint(x: 64, y: 57.98), controlPoint1: CGPoint(x: 61.34, y: 64), controlPoint2: CGPoint(x: 64, y: 61.31))
        bezierPath.addLine(to: CGPoint(x: 64, y: 45.01))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 9, y: 24))
        bezierPath.addLine(to: CGPoint(x: 55, y: 24))
        bezierPath.addLine(to: CGPoint(x: 51.87, y: 9.91))
        bezierPath.addCurve(to: CGPoint(x: 47.01, y: 6), controlPoint1: CGPoint(x: 51.39, y: 7.75), controlPoint2: CGPoint(x: 49.22, y: 6))
        bezierPath.addLine(to: CGPoint(x: 16.99, y: 6))
        bezierPath.addCurve(to: CGPoint(x: 12.13, y: 9.91), controlPoint1: CGPoint(x: 14.79, y: 6), controlPoint2: CGPoint(x: 12.62, y: 7.73))
        bezierPath.addLine(to: CGPoint(x: 9, y: 24))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 14, y: 44))
        bezierPath.addCurve(to: CGPoint(x: 20, y: 38), controlPoint1: CGPoint(x: 17.31, y: 44), controlPoint2: CGPoint(x: 20, y: 41.31))
        bezierPath.addCurve(to: CGPoint(x: 14, y: 32), controlPoint1: CGPoint(x: 20, y: 34.69), controlPoint2: CGPoint(x: 17.31, y: 32))
        bezierPath.addCurve(to: CGPoint(x: 8, y: 38), controlPoint1: CGPoint(x: 10.69, y: 32), controlPoint2: CGPoint(x: 8, y: 34.69))
        bezierPath.addCurve(to: CGPoint(x: 14, y: 44), controlPoint1: CGPoint(x: 8, y: 41.31), controlPoint2: CGPoint(x: 10.69, y: 44))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 50, y: 44))
        bezierPath.addCurve(to: CGPoint(x: 56, y: 38), controlPoint1: CGPoint(x: 53.31, y: 44), controlPoint2: CGPoint(x: 56, y: 41.31))
        bezierPath.addCurve(to: CGPoint(x: 50, y: 32), controlPoint1: CGPoint(x: 56, y: 34.69), controlPoint2: CGPoint(x: 53.31, y: 32))
        bezierPath.addCurve(to: CGPoint(x: 44, y: 38), controlPoint1: CGPoint(x: 46.69, y: 32), controlPoint2: CGPoint(x: 44, y: 34.69))
        bezierPath.addCurve(to: CGPoint(x: 50, y: 44), controlPoint1: CGPoint(x: 44, y: 41.31), controlPoint2: CGPoint(x: 46.69, y: 44))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        color.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawIcon_ball_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Ball Drawing
        let ballPath = UIBezierPath()
        ballPath.move(to: CGPoint(x: 34.14, y: 29.86))
        ballPath.addLine(to: CGPoint(x: 44.95, y: 29.86))
        ballPath.addCurve(to: CGPoint(x: 54.06, y: 8.72), controlPoint1: CGPoint(x: 45.46, y: 21.71), controlPoint2: CGPoint(x: 48.84, y: 14.35))
        ballPath.addCurve(to: CGPoint(x: 34.14, y: 0), controlPoint1: CGPoint(x: 48.79, y: 3.72), controlPoint2: CGPoint(x: 41.85, y: 0.51))
        ballPath.addLine(to: CGPoint(x: 34.14, y: 29.86))
        ballPath.close()
        ballPath.move(to: CGPoint(x: 29.86, y: 29.86))
        ballPath.addLine(to: CGPoint(x: 29.86, y: 0))
        ballPath.addCurve(to: CGPoint(x: 9.93, y: 8.72), controlPoint1: CGPoint(x: 22.15, y: 0.51), controlPoint2: CGPoint(x: 15.2, y: 3.72))
        ballPath.addCurve(to: CGPoint(x: 19.05, y: 29.86), controlPoint1: CGPoint(x: 15.16, y: 14.35), controlPoint2: CGPoint(x: 18.54, y: 21.71))
        ballPath.addLine(to: CGPoint(x: 29.86, y: 29.86))
        ballPath.close()
        ballPath.move(to: CGPoint(x: 14.76, y: 29.86))
        ballPath.addCurve(to: CGPoint(x: 7.03, y: 11.85), controlPoint1: CGPoint(x: 14.27, y: 22.95), controlPoint2: CGPoint(x: 11.42, y: 16.68))
        ballPath.addCurve(to: CGPoint(x: 0, y: 29.86), controlPoint1: CGPoint(x: 2.99, y: 16.84), controlPoint2: CGPoint(x: 0.45, y: 23.06))
        ballPath.addLine(to: CGPoint(x: 14.76, y: 29.86))
        ballPath.close()
        ballPath.move(to: CGPoint(x: 64, y: 29.86))
        ballPath.addCurve(to: CGPoint(x: 56.97, y: 11.85), controlPoint1: CGPoint(x: 63.55, y: 23.06), controlPoint2: CGPoint(x: 61.01, y: 16.84))
        ballPath.addCurve(to: CGPoint(x: 49.23, y: 29.86), controlPoint1: CGPoint(x: 52.58, y: 16.68), controlPoint2: CGPoint(x: 49.72, y: 22.95))
        ballPath.addLine(to: CGPoint(x: 64, y: 29.86))
        ballPath.close()
        ballPath.move(to: CGPoint(x: 29.86, y: 34.14))
        ballPath.addLine(to: CGPoint(x: 19.05, y: 34.14))
        ballPath.addCurve(to: CGPoint(x: 9.93, y: 55.28), controlPoint1: CGPoint(x: 18.54, y: 42.29), controlPoint2: CGPoint(x: 15.16, y: 49.65))
        ballPath.addCurve(to: CGPoint(x: 29.86, y: 64), controlPoint1: CGPoint(x: 15.2, y: 60.28), controlPoint2: CGPoint(x: 22.15, y: 63.49))
        ballPath.addLine(to: CGPoint(x: 29.86, y: 34.14))
        ballPath.close()
        ballPath.move(to: CGPoint(x: 44.95, y: 34.14))
        ballPath.addLine(to: CGPoint(x: 34.14, y: 34.14))
        ballPath.addLine(to: CGPoint(x: 34.14, y: 64))
        ballPath.addCurve(to: CGPoint(x: 54.06, y: 55.28), controlPoint1: CGPoint(x: 41.85, y: 63.49), controlPoint2: CGPoint(x: 48.79, y: 60.28))
        ballPath.addCurve(to: CGPoint(x: 44.95, y: 34.14), controlPoint1: CGPoint(x: 48.84, y: 49.65), controlPoint2: CGPoint(x: 45.46, y: 42.29))
        ballPath.close()
        ballPath.move(to: CGPoint(x: 0, y: 34.14))
        ballPath.addCurve(to: CGPoint(x: 7.03, y: 52.15), controlPoint1: CGPoint(x: 0.45, y: 40.94), controlPoint2: CGPoint(x: 2.99, y: 47.17))
        ballPath.addCurve(to: CGPoint(x: 14.76, y: 34.14), controlPoint1: CGPoint(x: 11.42, y: 47.32), controlPoint2: CGPoint(x: 14.27, y: 41.05))
        ballPath.addLine(to: CGPoint(x: 0, y: 34.14))
        ballPath.close()
        ballPath.move(to: CGPoint(x: 49.23, y: 34.14))
        ballPath.addCurve(to: CGPoint(x: 56.97, y: 52.15), controlPoint1: CGPoint(x: 49.72, y: 41.05), controlPoint2: CGPoint(x: 52.58, y: 47.32))
        ballPath.addCurve(to: CGPoint(x: 64, y: 34.14), controlPoint1: CGPoint(x: 61.01, y: 47.17), controlPoint2: CGPoint(x: 63.55, y: 40.94))
        ballPath.addLine(to: CGPoint(x: 49.23, y: 34.14))
        ballPath.close()
        ballPath.usesEvenOddFillRule = true
        color.setFill()
        ballPath.fill()
    }

    @objc dynamic public class func drawIcon_crown_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Crown Drawing
        let crownPath = UIBezierPath()
        crownPath.move(to: CGPoint(x: 30.21, y: 7.58))
        crownPath.addLine(to: CGPoint(x: 19.3, y: 29.39))
        crownPath.addLine(to: CGPoint(x: 7.01, y: 18.63))
        crownPath.addCurve(to: CGPoint(x: 8, y: 16), controlPoint1: CGPoint(x: 7.63, y: 17.93), controlPoint2: CGPoint(x: 8, y: 17.01))
        crownPath.addCurve(to: CGPoint(x: 4, y: 12), controlPoint1: CGPoint(x: 8, y: 13.79), controlPoint2: CGPoint(x: 6.21, y: 12))
        crownPath.addCurve(to: CGPoint(x: 0, y: 16), controlPoint1: CGPoint(x: 1.79, y: 12), controlPoint2: CGPoint(x: 0, y: 13.79))
        crownPath.addCurve(to: CGPoint(x: 4, y: 20), controlPoint1: CGPoint(x: 0, y: 18.21), controlPoint2: CGPoint(x: 1.79, y: 20))
        crownPath.addLine(to: CGPoint(x: 4, y: 37.33))
        crownPath.addLine(to: CGPoint(x: 4, y: 56))
        crownPath.addLine(to: CGPoint(x: 60, y: 56))
        crownPath.addLine(to: CGPoint(x: 60, y: 37.33))
        crownPath.addLine(to: CGPoint(x: 60, y: 20))
        crownPath.addCurve(to: CGPoint(x: 64, y: 16), controlPoint1: CGPoint(x: 62.21, y: 20), controlPoint2: CGPoint(x: 64, y: 18.21))
        crownPath.addCurve(to: CGPoint(x: 60, y: 12), controlPoint1: CGPoint(x: 64, y: 13.79), controlPoint2: CGPoint(x: 62.21, y: 12))
        crownPath.addCurve(to: CGPoint(x: 56, y: 16), controlPoint1: CGPoint(x: 57.79, y: 12), controlPoint2: CGPoint(x: 56, y: 13.79))
        crownPath.addCurve(to: CGPoint(x: 56.99, y: 18.63), controlPoint1: CGPoint(x: 56, y: 17.01), controlPoint2: CGPoint(x: 56.37, y: 17.93))
        crownPath.addLine(to: CGPoint(x: 44.7, y: 29.39))
        crownPath.addLine(to: CGPoint(x: 33.79, y: 7.58))
        crownPath.addCurve(to: CGPoint(x: 36, y: 4), controlPoint1: CGPoint(x: 35.1, y: 6.92), controlPoint2: CGPoint(x: 36, y: 5.57))
        crownPath.addCurve(to: CGPoint(x: 32, y: 0), controlPoint1: CGPoint(x: 36, y: 1.79), controlPoint2: CGPoint(x: 34.21, y: 0))
        crownPath.addCurve(to: CGPoint(x: 28, y: 4), controlPoint1: CGPoint(x: 29.79, y: 0), controlPoint2: CGPoint(x: 28, y: 1.79))
        crownPath.addCurve(to: CGPoint(x: 30.21, y: 7.58), controlPoint1: CGPoint(x: 28, y: 5.57), controlPoint2: CGPoint(x: 28.9, y: 6.92))
        crownPath.addLine(to: CGPoint(x: 30.21, y: 7.58))
        crownPath.close()
        crownPath.move(to: CGPoint(x: 4, y: 60))
        crownPath.addLine(to: CGPoint(x: 60, y: 60))
        crownPath.addLine(to: CGPoint(x: 60, y: 64))
        crownPath.addLine(to: CGPoint(x: 4, y: 64))
        crownPath.addLine(to: CGPoint(x: 4, y: 60))
        crownPath.close()
        crownPath.move(to: CGPoint(x: 32, y: 48))
        crownPath.addCurve(to: CGPoint(x: 36, y: 44), controlPoint1: CGPoint(x: 34.21, y: 48), controlPoint2: CGPoint(x: 36, y: 46.21))
        crownPath.addCurve(to: CGPoint(x: 32, y: 40), controlPoint1: CGPoint(x: 36, y: 41.79), controlPoint2: CGPoint(x: 34.21, y: 40))
        crownPath.addCurve(to: CGPoint(x: 28, y: 44), controlPoint1: CGPoint(x: 29.79, y: 40), controlPoint2: CGPoint(x: 28, y: 41.79))
        crownPath.addCurve(to: CGPoint(x: 32, y: 48), controlPoint1: CGPoint(x: 28, y: 46.21), controlPoint2: CGPoint(x: 29.79, y: 48))
        crownPath.close()
        crownPath.move(to: CGPoint(x: 16, y: 48))
        crownPath.addCurve(to: CGPoint(x: 20, y: 44), controlPoint1: CGPoint(x: 18.21, y: 48), controlPoint2: CGPoint(x: 20, y: 46.21))
        crownPath.addCurve(to: CGPoint(x: 16, y: 40), controlPoint1: CGPoint(x: 20, y: 41.79), controlPoint2: CGPoint(x: 18.21, y: 40))
        crownPath.addCurve(to: CGPoint(x: 12, y: 44), controlPoint1: CGPoint(x: 13.79, y: 40), controlPoint2: CGPoint(x: 12, y: 41.79))
        crownPath.addCurve(to: CGPoint(x: 16, y: 48), controlPoint1: CGPoint(x: 12, y: 46.21), controlPoint2: CGPoint(x: 13.79, y: 48))
        crownPath.close()
        crownPath.move(to: CGPoint(x: 48, y: 48))
        crownPath.addCurve(to: CGPoint(x: 52, y: 44), controlPoint1: CGPoint(x: 50.21, y: 48), controlPoint2: CGPoint(x: 52, y: 46.21))
        crownPath.addCurve(to: CGPoint(x: 48, y: 40), controlPoint1: CGPoint(x: 52, y: 41.79), controlPoint2: CGPoint(x: 50.21, y: 40))
        crownPath.addCurve(to: CGPoint(x: 44, y: 44), controlPoint1: CGPoint(x: 45.79, y: 40), controlPoint2: CGPoint(x: 44, y: 41.79))
        crownPath.addCurve(to: CGPoint(x: 48, y: 48), controlPoint1: CGPoint(x: 44, y: 46.21), controlPoint2: CGPoint(x: 45.79, y: 48))
        crownPath.close()
        crownPath.usesEvenOddFillRule = true
        color.setFill()
        crownPath.fill()
    }

    @objc dynamic public class func drawIcon_asterisk_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Symbol Drawing
        let symbolPath = UIBezierPath()
        symbolPath.move(to: CGPoint(x: 27.55, y: 24.23))
        symbolPath.addLine(to: CGPoint(x: 26.04, y: 0))
        symbolPath.addLine(to: CGPoint(x: 37.96, y: 0))
        symbolPath.addLine(to: CGPoint(x: 36.45, y: 24.23))
        symbolPath.addLine(to: CGPoint(x: 56.54, y: 10.8))
        symbolPath.addLine(to: CGPoint(x: 62.5, y: 21.2))
        symbolPath.addLine(to: CGPoint(x: 40.91, y: 32))
        symbolPath.addLine(to: CGPoint(x: 62.5, y: 42.8))
        symbolPath.addLine(to: CGPoint(x: 56.54, y: 53.2))
        symbolPath.addLine(to: CGPoint(x: 36.45, y: 39.77))
        symbolPath.addLine(to: CGPoint(x: 37.96, y: 64))
        symbolPath.addLine(to: CGPoint(x: 26.04, y: 64))
        symbolPath.addLine(to: CGPoint(x: 27.55, y: 39.77))
        symbolPath.addLine(to: CGPoint(x: 7.46, y: 53.2))
        symbolPath.addLine(to: CGPoint(x: 1.5, y: 42.8))
        symbolPath.addLine(to: CGPoint(x: 23.09, y: 32))
        symbolPath.addLine(to: CGPoint(x: 1.5, y: 21.2))
        symbolPath.addLine(to: CGPoint(x: 7.46, y: 10.8))
        symbolPath.addLine(to: CGPoint(x: 27.55, y: 24.23))
        symbolPath.addLine(to: CGPoint(x: 27.55, y: 24.23))
        symbolPath.close()
        symbolPath.usesEvenOddFillRule = true
        color.setFill()
        symbolPath.fill()
    }

    @objc dynamic public class func drawIcon_flag_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Flag Drawing
        let flagPath = UIBezierPath()
        flagPath.move(to: CGPoint(x: 8.23, y: 6.46))
        flagPath.addCurve(to: CGPoint(x: 32, y: 5.89), controlPoint1: CGPoint(x: 13.43, y: 4.99), controlPoint2: CGPoint(x: 22.72, y: 3.24))
        flagPath.addCurve(to: CGPoint(x: 60, y: 3.89), controlPoint1: CGPoint(x: 46, y: 9.89), controlPoint2: CGPoint(x: 60, y: 3.89))
        flagPath.addLine(to: CGPoint(x: 64, y: 39.89))
        flagPath.addCurve(to: CGPoint(x: 36, y: 41.89), controlPoint1: CGPoint(x: 64, y: 39.89), controlPoint2: CGPoint(x: 50, y: 45.89))
        flagPath.addCurve(to: CGPoint(x: 11.41, y: 42.7), controlPoint1: CGPoint(x: 26.2, y: 39.1), controlPoint2: CGPoint(x: 16.41, y: 41.19))
        flagPath.addLine(to: CGPoint(x: 13.21, y: 63.3))
        flagPath.addLine(to: CGPoint(x: 5.24, y: 64))
        flagPath.addLine(to: CGPoint(x: 0.02, y: 4.34))
        flagPath.addCurve(to: CGPoint(x: 3.65, y: 0.02), controlPoint1: CGPoint(x: -0.18, y: 2.15), controlPoint2: CGPoint(x: 1.44, y: 0.21))
        flagPath.addCurve(to: CGPoint(x: 7.99, y: 3.65), controlPoint1: CGPoint(x: 5.85, y: -0.18), controlPoint2: CGPoint(x: 7.79, y: 1.44))
        flagPath.addLine(to: CGPoint(x: 8.23, y: 6.46))
        flagPath.addLine(to: CGPoint(x: 8.23, y: 6.46))
        flagPath.close()
        flagPath.usesEvenOddFillRule = true
        color.setFill()
        flagPath.fill()
    }

    @objc dynamic public class func drawIcon_typingDots_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// More Drawing
        let morePath = UIBezierPath()
        morePath.move(to: CGPoint(x: 8, y: 64))
        morePath.addCurve(to: CGPoint(x: 16, y: 56), controlPoint1: CGPoint(x: 12.42, y: 64), controlPoint2: CGPoint(x: 16, y: 60.42))
        morePath.addCurve(to: CGPoint(x: 8, y: 48), controlPoint1: CGPoint(x: 16, y: 51.58), controlPoint2: CGPoint(x: 12.42, y: 48))
        morePath.addCurve(to: CGPoint(x: 0, y: 56), controlPoint1: CGPoint(x: 3.58, y: 48), controlPoint2: CGPoint(x: 0, y: 51.58))
        morePath.addCurve(to: CGPoint(x: 8, y: 64), controlPoint1: CGPoint(x: 0, y: 60.42), controlPoint2: CGPoint(x: 3.58, y: 64))
        morePath.addLine(to: CGPoint(x: 8, y: 64))
        morePath.close()
        morePath.move(to: CGPoint(x: 56, y: 64))
        morePath.addCurve(to: CGPoint(x: 64, y: 56), controlPoint1: CGPoint(x: 60.42, y: 64), controlPoint2: CGPoint(x: 64, y: 60.42))
        morePath.addCurve(to: CGPoint(x: 56, y: 48), controlPoint1: CGPoint(x: 64, y: 51.58), controlPoint2: CGPoint(x: 60.42, y: 48))
        morePath.addCurve(to: CGPoint(x: 48, y: 56), controlPoint1: CGPoint(x: 51.58, y: 48), controlPoint2: CGPoint(x: 48, y: 51.58))
        morePath.addCurve(to: CGPoint(x: 56, y: 64), controlPoint1: CGPoint(x: 48, y: 60.42), controlPoint2: CGPoint(x: 51.58, y: 64))
        morePath.addLine(to: CGPoint(x: 56, y: 64))
        morePath.close()
        morePath.move(to: CGPoint(x: 32, y: 64))
        morePath.addCurve(to: CGPoint(x: 40, y: 56), controlPoint1: CGPoint(x: 36.42, y: 64), controlPoint2: CGPoint(x: 40, y: 60.42))
        morePath.addCurve(to: CGPoint(x: 32, y: 48), controlPoint1: CGPoint(x: 40, y: 51.58), controlPoint2: CGPoint(x: 36.42, y: 48))
        morePath.addCurve(to: CGPoint(x: 24, y: 56), controlPoint1: CGPoint(x: 27.58, y: 48), controlPoint2: CGPoint(x: 24, y: 51.58))
        morePath.addCurve(to: CGPoint(x: 32, y: 64), controlPoint1: CGPoint(x: 24, y: 60.42), controlPoint2: CGPoint(x: 27.58, y: 64))
        morePath.addLine(to: CGPoint(x: 32, y: 64))
        morePath.close()
        morePath.usesEvenOddFillRule = true
        color.setFill()
        morePath.fill()
    }

    @objc dynamic public class func drawIcon_hourglass_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Timed message Drawing
        let timedMessagePath = UIBezierPath()
        timedMessagePath.move(to: CGPoint(x: 35.51, y: 8))
        timedMessagePath.addLine(to: CGPoint(x: 35.51, y: 12.31))
        timedMessagePath.addCurve(to: CGPoint(x: 57.51, y: 38), controlPoint1: CGPoint(x: 47.97, y: 14.23), controlPoint2: CGPoint(x: 57.51, y: 25))
        timedMessagePath.addCurve(to: CGPoint(x: 31.51, y: 64), controlPoint1: CGPoint(x: 57.51, y: 52.36), controlPoint2: CGPoint(x: 45.87, y: 64))
        timedMessagePath.addCurve(to: CGPoint(x: 5.5, y: 38), controlPoint1: CGPoint(x: 17.14, y: 64), controlPoint2: CGPoint(x: 5.5, y: 52.36))
        timedMessagePath.addCurve(to: CGPoint(x: 27.51, y: 12.31), controlPoint1: CGPoint(x: 5.5, y: 25), controlPoint2: CGPoint(x: 15.04, y: 14.23))
        timedMessagePath.addLine(to: CGPoint(x: 27.51, y: 8))
        timedMessagePath.addLine(to: CGPoint(x: 25.51, y: 8))
        timedMessagePath.addCurve(to: CGPoint(x: 21.5, y: 4), controlPoint1: CGPoint(x: 23.3, y: 8), controlPoint2: CGPoint(x: 21.5, y: 6.21))
        timedMessagePath.addCurve(to: CGPoint(x: 25.51, y: 0), controlPoint1: CGPoint(x: 21.5, y: 1.79), controlPoint2: CGPoint(x: 23.3, y: 0))
        timedMessagePath.addLine(to: CGPoint(x: 37.51, y: 0))
        timedMessagePath.addCurve(to: CGPoint(x: 41.51, y: 4), controlPoint1: CGPoint(x: 39.72, y: 0), controlPoint2: CGPoint(x: 41.51, y: 1.79))
        timedMessagePath.addCurve(to: CGPoint(x: 37.51, y: 8), controlPoint1: CGPoint(x: 41.51, y: 6.21), controlPoint2: CGPoint(x: 39.72, y: 8))
        timedMessagePath.addLine(to: CGPoint(x: 35.51, y: 8))
        timedMessagePath.close()
        timedMessagePath.move(to: CGPoint(x: 31.51, y: 56))
        timedMessagePath.addCurve(to: CGPoint(x: 49.51, y: 38), controlPoint1: CGPoint(x: 41.45, y: 56), controlPoint2: CGPoint(x: 49.51, y: 47.94))
        timedMessagePath.addCurve(to: CGPoint(x: 31.51, y: 20), controlPoint1: CGPoint(x: 49.51, y: 28.06), controlPoint2: CGPoint(x: 41.45, y: 20))
        timedMessagePath.addCurve(to: CGPoint(x: 13.5, y: 38), controlPoint1: CGPoint(x: 21.56, y: 20), controlPoint2: CGPoint(x: 13.5, y: 28.06))
        timedMessagePath.addCurve(to: CGPoint(x: 31.51, y: 56), controlPoint1: CGPoint(x: 13.5, y: 47.94), controlPoint2: CGPoint(x: 21.56, y: 56))
        timedMessagePath.close()
        timedMessagePath.move(to: CGPoint(x: 31.51, y: 52))
        timedMessagePath.addCurve(to: CGPoint(x: 17.5, y: 38), controlPoint1: CGPoint(x: 23.77, y: 52), controlPoint2: CGPoint(x: 17.5, y: 45.73))
        timedMessagePath.addCurve(to: CGPoint(x: 31.51, y: 24), controlPoint1: CGPoint(x: 17.5, y: 30.27), controlPoint2: CGPoint(x: 23.77, y: 24))
        timedMessagePath.addLine(to: CGPoint(x: 31.51, y: 38))
        timedMessagePath.addLine(to: CGPoint(x: 41.44, y: 47.87))
        timedMessagePath.addCurve(to: CGPoint(x: 31.51, y: 52), controlPoint1: CGPoint(x: 38.91, y: 50.42), controlPoint2: CGPoint(x: 35.39, y: 52))
        timedMessagePath.close()
        timedMessagePath.move(to: CGPoint(x: 58, y: 10.83))
        timedMessagePath.addLine(to: CGPoint(x: 60.83, y: 13.66))
        timedMessagePath.addCurve(to: CGPoint(x: 60.83, y: 19.31), controlPoint1: CGPoint(x: 62.39, y: 15.22), controlPoint2: CGPoint(x: 62.39, y: 17.75))
        timedMessagePath.addCurve(to: CGPoint(x: 55.17, y: 19.31), controlPoint1: CGPoint(x: 59.27, y: 20.88), controlPoint2: CGPoint(x: 56.73, y: 20.88))
        timedMessagePath.addLine(to: CGPoint(x: 52.34, y: 16.49))
        timedMessagePath.addCurve(to: CGPoint(x: 52.34, y: 10.83), controlPoint1: CGPoint(x: 50.78, y: 14.92), controlPoint2: CGPoint(x: 50.78, y: 12.39))
        timedMessagePath.addCurve(to: CGPoint(x: 58, y: 10.83), controlPoint1: CGPoint(x: 53.9, y: 9.27), controlPoint2: CGPoint(x: 56.44, y: 9.27))
        timedMessagePath.close()
        color.setFill()
        timedMessagePath.fill()
    }

    @objc dynamic public class func drawIcon_timeoutSecond_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 40.3, y: 16.02))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 14), controlPoint1: CGPoint(x: 37.82, y: 14.73), controlPoint2: CGPoint(x: 34.99, y: 14))
        bezierPath.addCurve(to: CGPoint(x: 14, y: 32), controlPoint1: CGPoint(x: 22.06, y: 14), controlPoint2: CGPoint(x: 14, y: 22.06))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 50), controlPoint1: CGPoint(x: 14, y: 41.94), controlPoint2: CGPoint(x: 22.06, y: 50))
        bezierPath.addCurve(to: CGPoint(x: 50, y: 32), controlPoint1: CGPoint(x: 41.94, y: 50), controlPoint2: CGPoint(x: 50, y: 41.94))
        bezierPath.addLine(to: CGPoint(x: 54, y: 32))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 54), controlPoint1: CGPoint(x: 54, y: 44.15), controlPoint2: CGPoint(x: 44.15, y: 54))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 32), controlPoint1: CGPoint(x: 19.85, y: 54), controlPoint2: CGPoint(x: 10, y: 44.15))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 10), controlPoint1: CGPoint(x: 10, y: 19.85), controlPoint2: CGPoint(x: 19.85, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 42.04, y: 12.42), controlPoint1: CGPoint(x: 35.62, y: 10), controlPoint2: CGPoint(x: 39.03, y: 10.87))
        bezierPath.addCurve(to: CGPoint(x: 40.3, y: 16.01), controlPoint1: CGPoint(x: 41.46, y: 13.63), controlPoint2: CGPoint(x: 40.88, y: 14.83))
        bezierPath.addLine(to: CGPoint(x: 40.3, y: 16.02))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        color.setFill()
        bezierPath.fill()

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 43.82, y: 19.27))
        bezier2Path.addCurve(to: CGPoint(x: 48.28, y: 16), controlPoint1: CGPoint(x: 43.82, y: 17.34), controlPoint2: CGPoint(x: 45.65, y: 16))
        bezier2Path.addCurve(to: CGPoint(x: 52.77, y: 19.07), controlPoint1: CGPoint(x: 50.92, y: 16), controlPoint2: CGPoint(x: 52.58, y: 17.12))
        bezier2Path.addLine(to: CGPoint(x: 50.39, y: 19.07))
        bezier2Path.addCurve(to: CGPoint(x: 48.29, y: 17.84), controlPoint1: CGPoint(x: 50.21, y: 18.32), controlPoint2: CGPoint(x: 49.47, y: 17.84))
        bezier2Path.addCurve(to: CGPoint(x: 46.27, y: 19.14), controlPoint1: CGPoint(x: 47.14, y: 17.84), controlPoint2: CGPoint(x: 46.27, y: 18.36))
        bezier2Path.addCurve(to: CGPoint(x: 47.92, y: 20.36), controlPoint1: CGPoint(x: 46.27, y: 19.74), controlPoint2: CGPoint(x: 46.8, y: 20.11))
        bezier2Path.addLine(to: CGPoint(x: 49.88, y: 20.79))
        bezier2Path.addCurve(to: CGPoint(x: 53, y: 23.7), controlPoint1: CGPoint(x: 52.01, y: 21.25), controlPoint2: CGPoint(x: 53, y: 22.13))
        bezier2Path.addCurve(to: CGPoint(x: 48.26, y: 27.12), controlPoint1: CGPoint(x: 53, y: 25.75), controlPoint2: CGPoint(x: 51.04, y: 27.12))
        bezier2Path.addCurve(to: CGPoint(x: 43.53, y: 24.02), controlPoint1: CGPoint(x: 45.48, y: 27.12), controlPoint2: CGPoint(x: 43.73, y: 25.97))
        bezier2Path.addLine(to: CGPoint(x: 46.03, y: 24.02))
        bezier2Path.addCurve(to: CGPoint(x: 48.32, y: 25.28), controlPoint1: CGPoint(x: 46.27, y: 24.81), controlPoint2: CGPoint(x: 47.05, y: 25.28))
        bezier2Path.addCurve(to: CGPoint(x: 50.48, y: 23.95), controlPoint1: CGPoint(x: 49.59, y: 25.28), controlPoint2: CGPoint(x: 50.48, y: 24.74))
        bezier2Path.addCurve(to: CGPoint(x: 48.94, y: 22.74), controlPoint1: CGPoint(x: 50.48, y: 23.35), controlPoint2: CGPoint(x: 50, y: 22.97))
        bezier2Path.addLine(to: CGPoint(x: 46.96, y: 22.3))
        bezier2Path.addCurve(to: CGPoint(x: 43.82, y: 19.27), controlPoint1: CGPoint(x: 44.82, y: 21.83), controlPoint2: CGPoint(x: 43.82, y: 20.88))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        color.setFill()
        bezier2Path.fill()
    }

    @objc dynamic public class func drawIcon_timeoutMinute_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 42.89, y: 27))
        bezier2Path.addLine(to: CGPoint(x: 42.89, y: 16.22))
        bezier2Path.addLine(to: CGPoint(x: 45.36, y: 16.22))
        bezier2Path.addLine(to: CGPoint(x: 45.36, y: 17.96))
        bezier2Path.addLine(to: CGPoint(x: 45.53, y: 17.96))
        bezier2Path.addCurve(to: CGPoint(x: 48.67, y: 16), controlPoint1: CGPoint(x: 46.02, y: 16.73), controlPoint2: CGPoint(x: 47.17, y: 16))
        bezier2Path.addCurve(to: CGPoint(x: 51.78, y: 17.96), controlPoint1: CGPoint(x: 50.22, y: 16), controlPoint2: CGPoint(x: 51.31, y: 16.75))
        bezier2Path.addLine(to: CGPoint(x: 51.96, y: 17.96))
        bezier2Path.addCurve(to: CGPoint(x: 55.38, y: 16), controlPoint1: CGPoint(x: 52.51, y: 16.78), controlPoint2: CGPoint(x: 53.81, y: 16))
        bezier2Path.addCurve(to: CGPoint(x: 59, y: 19.59), controlPoint1: CGPoint(x: 57.64, y: 16), controlPoint2: CGPoint(x: 59, y: 17.35))
        bezier2Path.addLine(to: CGPoint(x: 59, y: 27))
        bezier2Path.addLine(to: CGPoint(x: 56.45, y: 27))
        bezier2Path.addLine(to: CGPoint(x: 56.45, y: 20.21))
        bezier2Path.addCurve(to: CGPoint(x: 54.39, y: 18.13), controlPoint1: CGPoint(x: 56.45, y: 18.82), controlPoint2: CGPoint(x: 55.76, y: 18.13))
        bezier2Path.addCurve(to: CGPoint(x: 52.18, y: 20.29), controlPoint1: CGPoint(x: 53.06, y: 18.13), controlPoint2: CGPoint(x: 52.18, y: 19.06))
        bezier2Path.addLine(to: CGPoint(x: 52.18, y: 27))
        bezier2Path.addLine(to: CGPoint(x: 49.7, y: 27))
        bezier2Path.addLine(to: CGPoint(x: 49.7, y: 20.03))
        bezier2Path.addCurve(to: CGPoint(x: 47.66, y: 18.13), controlPoint1: CGPoint(x: 49.7, y: 18.85), controlPoint2: CGPoint(x: 48.91, y: 18.13))
        bezier2Path.addCurve(to: CGPoint(x: 45.45, y: 20.45), controlPoint1: CGPoint(x: 46.39, y: 18.13), controlPoint2: CGPoint(x: 45.45, y: 19.12))
        bezier2Path.addLine(to: CGPoint(x: 45.45, y: 27))
        bezier2Path.addLine(to: CGPoint(x: 42.89, y: 27))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        color.setFill()
        bezier2Path.fill()

        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 40.3, y: 16.02))
        bezier3Path.addCurve(to: CGPoint(x: 32, y: 14), controlPoint1: CGPoint(x: 37.82, y: 14.73), controlPoint2: CGPoint(x: 34.99, y: 14))
        bezier3Path.addCurve(to: CGPoint(x: 14, y: 32), controlPoint1: CGPoint(x: 22.06, y: 14), controlPoint2: CGPoint(x: 14, y: 22.06))
        bezier3Path.addCurve(to: CGPoint(x: 32, y: 50), controlPoint1: CGPoint(x: 14, y: 41.94), controlPoint2: CGPoint(x: 22.06, y: 50))
        bezier3Path.addCurve(to: CGPoint(x: 50, y: 32), controlPoint1: CGPoint(x: 41.94, y: 50), controlPoint2: CGPoint(x: 50, y: 41.94))
        bezier3Path.addLine(to: CGPoint(x: 54, y: 32))
        bezier3Path.addCurve(to: CGPoint(x: 32, y: 54), controlPoint1: CGPoint(x: 54, y: 44.15), controlPoint2: CGPoint(x: 44.15, y: 54))
        bezier3Path.addCurve(to: CGPoint(x: 10, y: 32), controlPoint1: CGPoint(x: 19.85, y: 54), controlPoint2: CGPoint(x: 10, y: 44.15))
        bezier3Path.addCurve(to: CGPoint(x: 32, y: 10), controlPoint1: CGPoint(x: 10, y: 19.85), controlPoint2: CGPoint(x: 19.85, y: 10))
        bezier3Path.addCurve(to: CGPoint(x: 42.04, y: 12.42), controlPoint1: CGPoint(x: 35.62, y: 10), controlPoint2: CGPoint(x: 39.03, y: 10.87))
        bezier3Path.addCurve(to: CGPoint(x: 40.3, y: 16.01), controlPoint1: CGPoint(x: 41.46, y: 13.63), controlPoint2: CGPoint(x: 40.88, y: 14.83))
        bezier3Path.addLine(to: CGPoint(x: 40.3, y: 16.02))
        bezier3Path.close()
        bezier3Path.usesEvenOddFillRule = true
        color.setFill()
        bezier3Path.fill()
    }

    @objc dynamic public class func drawIcon_timeoutHour_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 42, y: 27))
        bezier3Path.addLine(to: CGPoint(x: 42, y: 11))
        bezier3Path.addLine(to: CGPoint(x: 44.52, y: 11))
        bezier3Path.addLine(to: CGPoint(x: 44.52, y: 17.33))
        bezier3Path.addLine(to: CGPoint(x: 44.7, y: 17.33))
        bezier3Path.addCurve(to: CGPoint(x: 48.12, y: 15.25), controlPoint1: CGPoint(x: 45.24, y: 16.03), controlPoint2: CGPoint(x: 46.44, y: 15.25))
        bezier3Path.addCurve(to: CGPoint(x: 52, y: 19.55), controlPoint1: CGPoint(x: 50.54, y: 15.25), controlPoint2: CGPoint(x: 52, y: 16.81))
        bezier3Path.addLine(to: CGPoint(x: 52, y: 27))
        bezier3Path.addLine(to: CGPoint(x: 49.44, y: 27))
        bezier3Path.addLine(to: CGPoint(x: 49.44, y: 20.18))
        bezier3Path.addCurve(to: CGPoint(x: 47.18, y: 17.53), controlPoint1: CGPoint(x: 49.44, y: 18.43), controlPoint2: CGPoint(x: 48.66, y: 17.53))
        bezier3Path.addCurve(to: CGPoint(x: 44.56, y: 20.3), controlPoint1: CGPoint(x: 45.49, y: 17.53), controlPoint2: CGPoint(x: 44.56, y: 18.65))
        bezier3Path.addLine(to: CGPoint(x: 44.56, y: 27))
        bezier3Path.addLine(to: CGPoint(x: 42, y: 27))
        bezier3Path.close()
        bezier3Path.usesEvenOddFillRule = true
        color.setFill()
        bezier3Path.fill()

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 32, y: 14))
        bezierPath.addCurve(to: CGPoint(x: 14, y: 32), controlPoint1: CGPoint(x: 22.06, y: 14), controlPoint2: CGPoint(x: 14, y: 22.06))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 50), controlPoint1: CGPoint(x: 14, y: 41.94), controlPoint2: CGPoint(x: 22.06, y: 50))
        bezierPath.addCurve(to: CGPoint(x: 50, y: 32), controlPoint1: CGPoint(x: 41.94, y: 50), controlPoint2: CGPoint(x: 50, y: 41.94))
        bezierPath.addLine(to: CGPoint(x: 54, y: 32))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 54), controlPoint1: CGPoint(x: 54, y: 44.15), controlPoint2: CGPoint(x: 44.15, y: 54))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 32), controlPoint1: CGPoint(x: 19.85, y: 54), controlPoint2: CGPoint(x: 10, y: 44.15))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 10), controlPoint1: CGPoint(x: 10, y: 19.85), controlPoint2: CGPoint(x: 19.85, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 35.89, y: 10.34), controlPoint1: CGPoint(x: 33.33, y: 10), controlPoint2: CGPoint(x: 34.63, y: 10.12))
        bezierPath.addCurve(to: CGPoint(x: 35.19, y: 14.28), controlPoint1: CGPoint(x: 35.66, y: 11.65), controlPoint2: CGPoint(x: 35.43, y: 12.97))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 14), controlPoint1: CGPoint(x: 34.16, y: 14.1), controlPoint2: CGPoint(x: 33.09, y: 14))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        color.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawIcon_timeoutDay_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 49.03, y: 27.1))
        bezier2Path.addCurve(to: CGPoint(x: 44.53, y: 21.16), controlPoint1: CGPoint(x: 46.26, y: 27.1), controlPoint2: CGPoint(x: 44.53, y: 24.81))
        bezier2Path.addCurve(to: CGPoint(x: 49.03, y: 15.25), controlPoint1: CGPoint(x: 44.53, y: 17.53), controlPoint2: CGPoint(x: 46.27, y: 15.25))
        bezier2Path.addCurve(to: CGPoint(x: 52.35, y: 17.26), controlPoint1: CGPoint(x: 50.53, y: 15.25), controlPoint2: CGPoint(x: 51.77, y: 16))
        bezier2Path.addLine(to: CGPoint(x: 52.52, y: 17.26))
        bezier2Path.addLine(to: CGPoint(x: 52.52, y: 11))
        bezier2Path.addLine(to: CGPoint(x: 55, y: 11))
        bezier2Path.addLine(to: CGPoint(x: 55, y: 26.91))
        bezier2Path.addLine(to: CGPoint(x: 52.6, y: 26.91))
        bezier2Path.addLine(to: CGPoint(x: 52.6, y: 25.09))
        bezier2Path.addLine(to: CGPoint(x: 52.43, y: 25.09))
        bezier2Path.addCurve(to: CGPoint(x: 49.03, y: 27.1), controlPoint1: CGPoint(x: 51.81, y: 26.35), controlPoint2: CGPoint(x: 50.55, y: 27.1))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 49.8, y: 17.46))
        bezier2Path.addCurve(to: CGPoint(x: 47.07, y: 21.17), controlPoint1: CGPoint(x: 48.11, y: 17.46), controlPoint2: CGPoint(x: 47.07, y: 18.86))
        bezier2Path.addCurve(to: CGPoint(x: 49.8, y: 24.88), controlPoint1: CGPoint(x: 47.07, y: 23.49), controlPoint2: CGPoint(x: 48.1, y: 24.88))
        bezier2Path.addCurve(to: CGPoint(x: 52.55, y: 21.17), controlPoint1: CGPoint(x: 51.51, y: 24.88), controlPoint2: CGPoint(x: 52.55, y: 23.48))
        bezier2Path.addCurve(to: CGPoint(x: 49.8, y: 17.46), controlPoint1: CGPoint(x: 52.55, y: 18.89), controlPoint2: CGPoint(x: 51.5, y: 17.46))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        color.setFill()
        bezier2Path.fill()

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 40.3, y: 16.02))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 14), controlPoint1: CGPoint(x: 37.82, y: 14.73), controlPoint2: CGPoint(x: 34.99, y: 14))
        bezierPath.addCurve(to: CGPoint(x: 14, y: 32), controlPoint1: CGPoint(x: 22.06, y: 14), controlPoint2: CGPoint(x: 14, y: 22.06))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 50), controlPoint1: CGPoint(x: 14, y: 41.94), controlPoint2: CGPoint(x: 22.06, y: 50))
        bezierPath.addCurve(to: CGPoint(x: 50, y: 32), controlPoint1: CGPoint(x: 41.94, y: 50), controlPoint2: CGPoint(x: 50, y: 41.94))
        bezierPath.addLine(to: CGPoint(x: 54, y: 32))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 54), controlPoint1: CGPoint(x: 54, y: 44.15), controlPoint2: CGPoint(x: 44.15, y: 54))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 32), controlPoint1: CGPoint(x: 19.85, y: 54), controlPoint2: CGPoint(x: 10, y: 44.15))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 10), controlPoint1: CGPoint(x: 10, y: 19.85), controlPoint2: CGPoint(x: 19.85, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 42.04, y: 12.42), controlPoint1: CGPoint(x: 35.62, y: 10), controlPoint2: CGPoint(x: 39.03, y: 10.87))
        bezierPath.addCurve(to: CGPoint(x: 40.3, y: 16.01), controlPoint1: CGPoint(x: 41.46, y: 13.63), controlPoint2: CGPoint(x: 40.88, y: 14.83))
        bezierPath.addLine(to: CGPoint(x: 40.3, y: 16.02))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        color.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawIcon_link_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 20, y: 13))
        bezierPath.addCurve(to: CGPoint(x: 40.85, y: 0), controlPoint1: CGPoint(x: 23.74, y: 5.31), controlPoint2: CGPoint(x: 31.67, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 64, y: 23), controlPoint1: CGPoint(x: 53.64, y: 0), controlPoint2: CGPoint(x: 64, y: 10.3))
        bezierPath.addCurve(to: CGPoint(x: 40.85, y: 46), controlPoint1: CGPoint(x: 64, y: 35.7), controlPoint2: CGPoint(x: 53.64, y: 46))
        bezierPath.addCurve(to: CGPoint(x: 20, y: 33), controlPoint1: CGPoint(x: 31.67, y: 46), controlPoint2: CGPoint(x: 23.74, y: 40.69))
        bezierPath.addLine(to: CGPoint(x: 29.6, y: 33))
        bezierPath.addCurve(to: CGPoint(x: 40.85, y: 38), controlPoint1: CGPoint(x: 32.36, y: 36.07), controlPoint2: CGPoint(x: 36.38, y: 38))
        bezierPath.addCurve(to: CGPoint(x: 55.95, y: 23), controlPoint1: CGPoint(x: 49.19, y: 38), controlPoint2: CGPoint(x: 55.95, y: 31.28))
        bezierPath.addCurve(to: CGPoint(x: 40.85, y: 8), controlPoint1: CGPoint(x: 55.95, y: 14.72), controlPoint2: CGPoint(x: 49.19, y: 8))
        bezierPath.addCurve(to: CGPoint(x: 29.6, y: 13), controlPoint1: CGPoint(x: 36.38, y: 8), controlPoint2: CGPoint(x: 32.36, y: 9.93))
        bezierPath.addLine(to: CGPoint(x: 20, y: 13))
        bezierPath.addLine(to: CGPoint(x: 20, y: 13))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 44, y: 31))
        bezierPath.addCurve(to: CGPoint(x: 23.15, y: 18), controlPoint1: CGPoint(x: 40.26, y: 23.31), controlPoint2: CGPoint(x: 32.33, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 41), controlPoint1: CGPoint(x: 10.36, y: 18), controlPoint2: CGPoint(x: 0, y: 28.3))
        bezierPath.addCurve(to: CGPoint(x: 23.15, y: 64), controlPoint1: CGPoint(x: 0, y: 53.7), controlPoint2: CGPoint(x: 10.36, y: 64))
        bezierPath.addCurve(to: CGPoint(x: 44, y: 51), controlPoint1: CGPoint(x: 32.33, y: 64), controlPoint2: CGPoint(x: 40.26, y: 58.69))
        bezierPath.addLine(to: CGPoint(x: 34.4, y: 51))
        bezierPath.addCurve(to: CGPoint(x: 23.15, y: 56), controlPoint1: CGPoint(x: 31.64, y: 54.07), controlPoint2: CGPoint(x: 27.62, y: 56))
        bezierPath.addCurve(to: CGPoint(x: 8.05, y: 41), controlPoint1: CGPoint(x: 14.81, y: 56), controlPoint2: CGPoint(x: 8.05, y: 49.28))
        bezierPath.addCurve(to: CGPoint(x: 23.15, y: 26), controlPoint1: CGPoint(x: 8.05, y: 32.72), controlPoint2: CGPoint(x: 14.81, y: 26))
        bezierPath.addCurve(to: CGPoint(x: 34.4, y: 31), controlPoint1: CGPoint(x: 27.62, y: 26), controlPoint2: CGPoint(x: 31.64, y: 27.93))
        bezierPath.addLine(to: CGPoint(x: 44, y: 31))
        bezierPath.addLine(to: CGPoint(x: 44, y: 31))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        color.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawIcon_library_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Collection Drawing
        let collectionPath = UIBezierPath()
        collectionPath.move(to: CGPoint(x: 0.02, y: 27.98))
        collectionPath.addCurve(to: CGPoint(x: 3.67, y: 24), controlPoint1: CGPoint(x: -0.2, y: 25.78), controlPoint2: CGPoint(x: 1.42, y: 24))
        collectionPath.addLine(to: CGPoint(x: 60.33, y: 24))
        collectionPath.addCurve(to: CGPoint(x: 63.98, y: 27.98), controlPoint1: CGPoint(x: 62.57, y: 24), controlPoint2: CGPoint(x: 64.2, y: 25.77))
        collectionPath.addLine(to: CGPoint(x: 60.33, y: 64))
        collectionPath.addLine(to: CGPoint(x: 3.67, y: 64))
        collectionPath.addLine(to: CGPoint(x: 0.02, y: 27.98))
        collectionPath.close()
        collectionPath.move(to: CGPoint(x: 3.67, y: 15))
        collectionPath.addCurve(to: CGPoint(x: 6.71, y: 12), controlPoint1: CGPoint(x: 3.67, y: 13.34), controlPoint2: CGPoint(x: 5.01, y: 12))
        collectionPath.addLine(to: CGPoint(x: 57.29, y: 12))
        collectionPath.addCurve(to: CGPoint(x: 60.33, y: 15), controlPoint1: CGPoint(x: 58.97, y: 12), controlPoint2: CGPoint(x: 60.33, y: 13.33))
        collectionPath.addLine(to: CGPoint(x: 60.33, y: 18))
        collectionPath.addLine(to: CGPoint(x: 3.67, y: 18))
        collectionPath.addLine(to: CGPoint(x: 3.67, y: 15))
        collectionPath.close()
        collectionPath.move(to: CGPoint(x: 7.71, y: 3))
        collectionPath.addCurve(to: CGPoint(x: 10.75, y: 0), controlPoint1: CGPoint(x: 7.71, y: 1.34), controlPoint2: CGPoint(x: 9.06, y: 0))
        collectionPath.addLine(to: CGPoint(x: 53.25, y: 0))
        collectionPath.addCurve(to: CGPoint(x: 56.29, y: 3), controlPoint1: CGPoint(x: 54.93, y: 0), controlPoint2: CGPoint(x: 56.29, y: 1.33))
        collectionPath.addLine(to: CGPoint(x: 56.29, y: 6))
        collectionPath.addLine(to: CGPoint(x: 7.71, y: 6))
        collectionPath.addLine(to: CGPoint(x: 7.71, y: 3))
        collectionPath.close()
        collectionPath.usesEvenOddFillRule = true
        color.setFill()
        collectionPath.fill()
    }

    @objc dynamic public class func drawIcon_copy_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Copy Drawing
        let copyPath = UIBezierPath()
        copyPath.move(to: CGPoint(x: 24, y: 40))
        copyPath.addLine(to: CGPoint(x: 56, y: 40))
        copyPath.addLine(to: CGPoint(x: 56, y: 8))
        copyPath.addLine(to: CGPoint(x: 24, y: 8))
        copyPath.addLine(to: CGPoint(x: 24, y: 40))
        copyPath.close()
        copyPath.move(to: CGPoint(x: 19.98, y: 0))
        copyPath.addCurve(to: CGPoint(x: 16, y: 4.01), controlPoint1: CGPoint(x: 17.82, y: 0), controlPoint2: CGPoint(x: 16, y: 1.8))
        copyPath.addLine(to: CGPoint(x: 16, y: 43.99))
        copyPath.addCurve(to: CGPoint(x: 19.98, y: 48), controlPoint1: CGPoint(x: 16, y: 46.18), controlPoint2: CGPoint(x: 17.78, y: 48))
        copyPath.addLine(to: CGPoint(x: 60.02, y: 48))
        copyPath.addCurve(to: CGPoint(x: 64, y: 43.99), controlPoint1: CGPoint(x: 62.18, y: 48), controlPoint2: CGPoint(x: 64, y: 46.21))
        copyPath.addLine(to: CGPoint(x: 64, y: 4.01))
        copyPath.addCurve(to: CGPoint(x: 60.02, y: 0), controlPoint1: CGPoint(x: 64, y: 1.82), controlPoint2: CGPoint(x: 62.22, y: 0))
        copyPath.addLine(to: CGPoint(x: 19.98, y: 0))
        copyPath.close()
        copyPath.move(to: CGPoint(x: 8, y: 16))
        copyPath.addLine(to: CGPoint(x: 3.98, y: 16))
        copyPath.addCurve(to: CGPoint(x: 0, y: 20.01), controlPoint1: CGPoint(x: 1.82, y: 16), controlPoint2: CGPoint(x: 0, y: 17.79))
        copyPath.addLine(to: CGPoint(x: 0, y: 59.99))
        copyPath.addCurve(to: CGPoint(x: 3.98, y: 64), controlPoint1: CGPoint(x: 0, y: 62.18), controlPoint2: CGPoint(x: 1.78, y: 64))
        copyPath.addLine(to: CGPoint(x: 44.02, y: 64))
        copyPath.addCurve(to: CGPoint(x: 48, y: 59.99), controlPoint1: CGPoint(x: 46.18, y: 64), controlPoint2: CGPoint(x: 48, y: 62.21))
        copyPath.addLine(to: CGPoint(x: 48, y: 56))
        copyPath.addLine(to: CGPoint(x: 8, y: 56))
        copyPath.addLine(to: CGPoint(x: 8, y: 16))
        copyPath.close()
        copyPath.usesEvenOddFillRule = true
        color.setFill()
        copyPath.fill()
    }

    @objc dynamic public class func drawIcon_activeSearch_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Return-search Drawing
        let returnsearchPath = UIBezierPath()
        returnsearchPath.move(to: CGPoint(x: 55.9, y: 27.97))
        returnsearchPath.addCurve(to: CGPoint(x: 50.33, y: 44.73), controlPoint1: CGPoint(x: 55.9, y: 34.26), controlPoint2: CGPoint(x: 53.83, y: 40.06))
        returnsearchPath.addLine(to: CGPoint(x: 64, y: 58.35))
        returnsearchPath.addLine(to: CGPoint(x: 58.35, y: 64))
        returnsearchPath.addLine(to: CGPoint(x: 44.69, y: 50.38))
        returnsearchPath.addCurve(to: CGPoint(x: 27.95, y: 55.95), controlPoint1: CGPoint(x: 40.02, y: 53.87), controlPoint2: CGPoint(x: 34.23, y: 55.95))
        returnsearchPath.addCurve(to: CGPoint(x: 0, y: 27.97), controlPoint1: CGPoint(x: 12.51, y: 55.95), controlPoint2: CGPoint(x: 0, y: 43.42))
        returnsearchPath.addCurve(to: CGPoint(x: 27.95, y: 0), controlPoint1: CGPoint(x: 0, y: 12.52), controlPoint2: CGPoint(x: 12.51, y: 0))
        returnsearchPath.addCurve(to: CGPoint(x: 55.9, y: 27.97), controlPoint1: CGPoint(x: 43.38, y: 0), controlPoint2: CGPoint(x: 55.9, y: 12.52))
        returnsearchPath.close()
        returnsearchPath.move(to: CGPoint(x: 28, y: 48))
        returnsearchPath.addCurve(to: CGPoint(x: 48, y: 28), controlPoint1: CGPoint(x: 39.05, y: 48), controlPoint2: CGPoint(x: 48, y: 39.05))
        returnsearchPath.addCurve(to: CGPoint(x: 28, y: 8), controlPoint1: CGPoint(x: 48, y: 16.95), controlPoint2: CGPoint(x: 39.05, y: 8))
        returnsearchPath.addCurve(to: CGPoint(x: 8, y: 28), controlPoint1: CGPoint(x: 16.95, y: 8), controlPoint2: CGPoint(x: 8, y: 16.95))
        returnsearchPath.addCurve(to: CGPoint(x: 28, y: 48), controlPoint1: CGPoint(x: 8, y: 39.05), controlPoint2: CGPoint(x: 16.95, y: 48))
        returnsearchPath.close()
        returnsearchPath.move(to: CGPoint(x: 36, y: 28))
        returnsearchPath.addCurve(to: CGPoint(x: 28, y: 36), controlPoint1: CGPoint(x: 36, y: 32.42), controlPoint2: CGPoint(x: 32.42, y: 36))
        returnsearchPath.addCurve(to: CGPoint(x: 20, y: 28), controlPoint1: CGPoint(x: 23.58, y: 36), controlPoint2: CGPoint(x: 20, y: 32.42))
        returnsearchPath.addCurve(to: CGPoint(x: 28, y: 20), controlPoint1: CGPoint(x: 20, y: 23.58), controlPoint2: CGPoint(x: 23.58, y: 20))
        returnsearchPath.addCurve(to: CGPoint(x: 36, y: 28), controlPoint1: CGPoint(x: 32.42, y: 20), controlPoint2: CGPoint(x: 36, y: 23.58))
        returnsearchPath.close()
        color.setFill()
        returnsearchPath.fill()
    }

    @objc dynamic public class func drawIcon_clearInput_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Dismiss Drawing
        let dismissPath = UIBezierPath()
        dismissPath.move(to: CGPoint(x: 44.97, y: 13.37))
        dismissPath.addLine(to: CGPoint(x: 32, y: 26.34))
        dismissPath.addLine(to: CGPoint(x: 19.03, y: 13.37))
        dismissPath.addCurve(to: CGPoint(x: 15.24, y: 17.16), controlPoint1: CGPoint(x: 19.03, y: 13.37), controlPoint2: CGPoint(x: 16.89, y: 15.51))
        dismissPath.addCurve(to: CGPoint(x: 13.37, y: 19.03), controlPoint1: CGPoint(x: 14.21, y: 18.19), controlPoint2: CGPoint(x: 13.37, y: 19.03))
        dismissPath.addLine(to: CGPoint(x: 26.34, y: 32))
        dismissPath.addLine(to: CGPoint(x: 13.37, y: 44.97))
        dismissPath.addLine(to: CGPoint(x: 19.03, y: 50.63))
        dismissPath.addLine(to: CGPoint(x: 32, y: 37.66))
        dismissPath.addLine(to: CGPoint(x: 44.97, y: 50.63))
        dismissPath.addLine(to: CGPoint(x: 50.63, y: 44.97))
        dismissPath.addLine(to: CGPoint(x: 37.66, y: 32))
        dismissPath.addLine(to: CGPoint(x: 50.63, y: 19.03))
        dismissPath.addLine(to: CGPoint(x: 44.97, y: 13.37))
        dismissPath.close()
        dismissPath.move(to: CGPoint(x: 64, y: 32))
        dismissPath.addCurve(to: CGPoint(x: 32, y: 64), controlPoint1: CGPoint(x: 64, y: 49.67), controlPoint2: CGPoint(x: 49.67, y: 64))
        dismissPath.addCurve(to: CGPoint(x: 0, y: 32), controlPoint1: CGPoint(x: 14.33, y: 64), controlPoint2: CGPoint(x: 0, y: 49.67))
        dismissPath.addCurve(to: CGPoint(x: 6.5, y: 12.67), controlPoint1: CGPoint(x: 0, y: 24.74), controlPoint2: CGPoint(x: 2.42, y: 18.04))
        dismissPath.addCurve(to: CGPoint(x: 32, y: 0), controlPoint1: CGPoint(x: 12.34, y: 4.97), controlPoint2: CGPoint(x: 21.59, y: 0))
        dismissPath.addCurve(to: CGPoint(x: 64, y: 32), controlPoint1: CGPoint(x: 49.67, y: 0), controlPoint2: CGPoint(x: 64, y: 14.33))
        dismissPath.close()
        color.setFill()
        dismissPath.fill()
    }

    @objc dynamic public class func drawIcon_backArrowWithDot_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Unread Drawing
        let unreadPath = UIBezierPath()
        unreadPath.move(to: CGPoint(x: 16, y: 8))
        unreadPath.addCurve(to: CGPoint(x: 8, y: 16), controlPoint1: CGPoint(x: 16, y: 12.42), controlPoint2: CGPoint(x: 12.42, y: 16))
        unreadPath.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 3.58, y: 16), controlPoint2: CGPoint(x: 0, y: 12.42))
        unreadPath.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 0, y: 3.58), controlPoint2: CGPoint(x: 3.58, y: 0))
        unreadPath.addCurve(to: CGPoint(x: 16, y: 8), controlPoint1: CGPoint(x: 12.42, y: 0), controlPoint2: CGPoint(x: 16, y: 3.58))
        unreadPath.close()
        unreadPath.move(to: CGPoint(x: 19.78, y: 36.27))
        unreadPath.addLine(to: CGPoint(x: 39.99, y: 56.22))
        unreadPath.addLine(to: CGPoint(x: 34.53, y: 61.6))
        unreadPath.addLine(to: CGPoint(x: 5, y: 32.45))
        unreadPath.addLine(to: CGPoint(x: 34.53, y: 3.29))
        unreadPath.addLine(to: CGPoint(x: 39.99, y: 8.68))
        unreadPath.addLine(to: CGPoint(x: 19.75, y: 28.65))
        unreadPath.addLine(to: CGPoint(x: 59, y: 28.65))
        unreadPath.addLine(to: CGPoint(x: 59, y: 36.27))
        unreadPath.addLine(to: CGPoint(x: 19.78, y: 36.27))
        unreadPath.addLine(to: CGPoint(x: 19.78, y: 36.27))
        unreadPath.close()
        color.setFill()
        unreadPath.fill()
    }

    @objc dynamic public class func drawIcon_team_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Spaces Drawing
        let spacesPath = UIBezierPath()
        spacesPath.move(to: CGPoint(x: 11.63, y: 20.01))
        spacesPath.addLine(to: CGPoint(x: 11.63, y: 43.99))
        spacesPath.addLine(to: CGPoint(x: 32, y: 56.05))
        spacesPath.addLine(to: CGPoint(x: 52.37, y: 43.99))
        spacesPath.addLine(to: CGPoint(x: 52.37, y: 20.01))
        spacesPath.addLine(to: CGPoint(x: 32, y: 7.95))
        spacesPath.addLine(to: CGPoint(x: 11.63, y: 20.01))
        spacesPath.close()
        spacesPath.move(to: CGPoint(x: 28.68, y: 0.81))
        spacesPath.addCurve(to: CGPoint(x: 35.32, y: 0.81), controlPoint1: CGPoint(x: 30.51, y: -0.28), controlPoint2: CGPoint(x: 33.51, y: -0.26))
        spacesPath.addLine(to: CGPoint(x: 56.68, y: 13.46))
        spacesPath.addCurve(to: CGPoint(x: 60, y: 19.36), controlPoint1: CGPoint(x: 58.51, y: 14.54), controlPoint2: CGPoint(x: 60, y: 17.2))
        spacesPath.addLine(to: CGPoint(x: 60, y: 44.64))
        spacesPath.addCurve(to: CGPoint(x: 56.68, y: 50.54), controlPoint1: CGPoint(x: 60, y: 46.82), controlPoint2: CGPoint(x: 58.49, y: 49.47))
        spacesPath.addLine(to: CGPoint(x: 35.32, y: 63.19))
        spacesPath.addCurve(to: CGPoint(x: 28.68, y: 63.19), controlPoint1: CGPoint(x: 33.49, y: 64.28), controlPoint2: CGPoint(x: 30.49, y: 64.26))
        spacesPath.addLine(to: CGPoint(x: 7.32, y: 50.54))
        spacesPath.addCurve(to: CGPoint(x: 4, y: 44.64), controlPoint1: CGPoint(x: 5.49, y: 49.46), controlPoint2: CGPoint(x: 4, y: 46.8))
        spacesPath.addLine(to: CGPoint(x: 4, y: 19.36))
        spacesPath.addCurve(to: CGPoint(x: 7.32, y: 13.46), controlPoint1: CGPoint(x: 4, y: 17.18), controlPoint2: CGPoint(x: 5.51, y: 14.53))
        spacesPath.addLine(to: CGPoint(x: 28.68, y: 0.81))
        spacesPath.close()
        color.setFill()
        spacesPath.fill()
    }

    @objc dynamic public class func drawIcon_personalProfile_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Profile Drawing
        let profilePath = UIBezierPath()
        profilePath.move(to: CGPoint(x: 32, y: 64))
        profilePath.addCurve(to: CGPoint(x: 0, y: 32), controlPoint1: CGPoint(x: 14.33, y: 64), controlPoint2: CGPoint(x: 0, y: 49.67))
        profilePath.addCurve(to: CGPoint(x: 32, y: 0), controlPoint1: CGPoint(x: 0, y: 14.33), controlPoint2: CGPoint(x: 14.33, y: 0))
        profilePath.addCurve(to: CGPoint(x: 64, y: 32), controlPoint1: CGPoint(x: 49.67, y: 0), controlPoint2: CGPoint(x: 64, y: 14.33))
        profilePath.addCurve(to: CGPoint(x: 32, y: 64), controlPoint1: CGPoint(x: 64, y: 49.67), controlPoint2: CGPoint(x: 49.67, y: 64))
        profilePath.close()
        profilePath.move(to: CGPoint(x: 8, y: 32))
        profilePath.addCurve(to: CGPoint(x: 13.89, y: 47.75), controlPoint1: CGPoint(x: 8, y: 38.03), controlPoint2: CGPoint(x: 10.22, y: 43.54))
        profilePath.addLine(to: CGPoint(x: 14.21, y: 45.93))
        profilePath.addCurve(to: CGPoint(x: 21.24, y: 40), controlPoint1: CGPoint(x: 14.78, y: 42.66), controlPoint2: CGPoint(x: 17.93, y: 40))
        profilePath.addLine(to: CGPoint(x: 42.76, y: 40))
        profilePath.addCurve(to: CGPoint(x: 49.79, y: 45.93), controlPoint1: CGPoint(x: 46.07, y: 40), controlPoint2: CGPoint(x: 49.22, y: 42.66))
        profilePath.addLine(to: CGPoint(x: 50.11, y: 47.75))
        profilePath.addCurve(to: CGPoint(x: 56, y: 32), controlPoint1: CGPoint(x: 53.78, y: 43.54), controlPoint2: CGPoint(x: 56, y: 38.03))
        profilePath.addCurve(to: CGPoint(x: 32, y: 8), controlPoint1: CGPoint(x: 56, y: 18.75), controlPoint2: CGPoint(x: 45.25, y: 8))
        profilePath.addCurve(to: CGPoint(x: 8, y: 32), controlPoint1: CGPoint(x: 18.75, y: 8), controlPoint2: CGPoint(x: 8, y: 18.75))
        profilePath.close()
        profilePath.move(to: CGPoint(x: 32, y: 36))
        profilePath.addCurve(to: CGPoint(x: 22, y: 26), controlPoint1: CGPoint(x: 26.48, y: 36), controlPoint2: CGPoint(x: 22, y: 31.52))
        profilePath.addCurve(to: CGPoint(x: 32, y: 16), controlPoint1: CGPoint(x: 22, y: 20.48), controlPoint2: CGPoint(x: 26.48, y: 16))
        profilePath.addCurve(to: CGPoint(x: 42, y: 26), controlPoint1: CGPoint(x: 37.52, y: 16), controlPoint2: CGPoint(x: 42, y: 20.48))
        profilePath.addCurve(to: CGPoint(x: 32, y: 36), controlPoint1: CGPoint(x: 42, y: 31.52), controlPoint2: CGPoint(x: 37.52, y: 36))
        profilePath.close()
        profilePath.usesEvenOddFillRule = true
        color.setFill()
        profilePath.fill()
    }

    @objc dynamic public class func drawIcon_markdownToggle_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 17.42, y: 18.27))
        bezierPath.addLine(to: CGPoint(x: 17.25, y: 18.27))
        bezierPath.addLine(to: CGPoint(x: 12.94, y: 41.27))
        bezierPath.addLine(to: CGPoint(x: 21.74, y: 41.27))
        bezierPath.addLine(to: CGPoint(x: 17.42, y: 18.27))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 13.71, y: 0))
        bezierPath.addLine(to: CGPoint(x: 21.05, y: 0))
        bezierPath.addLine(to: CGPoint(x: 34.76, y: 63.47))
        bezierPath.addLine(to: CGPoint(x: 25.96, y: 63.47))
        bezierPath.addLine(to: CGPoint(x: 23.37, y: 49.83))
        bezierPath.addLine(to: CGPoint(x: 11.39, y: 49.83))
        bezierPath.addLine(to: CGPoint(x: 8.8, y: 63.47))
        bezierPath.addLine(to: CGPoint(x: 0, y: 63.47))
        bezierPath.addLine(to: CGPoint(x: 13.71, y: 0))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 55.2, y: 58.83))
        bezierPath.addLine(to: CGPoint(x: 55.03, y: 58.83))
        bezierPath.addCurve(to: CGPoint(x: 51.54, y: 62.66), controlPoint1: CGPoint(x: 53.88, y: 60.49), controlPoint2: CGPoint(x: 52.72, y: 61.77))
        bezierPath.addCurve(to: CGPoint(x: 46.58, y: 64), controlPoint1: CGPoint(x: 50.36, y: 63.55), controlPoint2: CGPoint(x: 48.7, y: 64))
        bezierPath.addCurve(to: CGPoint(x: 43.39, y: 63.51), controlPoint1: CGPoint(x: 45.54, y: 64), controlPoint2: CGPoint(x: 44.48, y: 63.84))
        bezierPath.addCurve(to: CGPoint(x: 40.32, y: 61.73), controlPoint1: CGPoint(x: 42.29, y: 63.18), controlPoint2: CGPoint(x: 41.27, y: 62.59))
        bezierPath.addCurve(to: CGPoint(x: 37.99, y: 58.07), controlPoint1: CGPoint(x: 39.37, y: 60.87), controlPoint2: CGPoint(x: 38.6, y: 59.65))
        bezierPath.addCurve(to: CGPoint(x: 37.09, y: 51.97), controlPoint1: CGPoint(x: 37.39, y: 56.5), controlPoint2: CGPoint(x: 37.09, y: 54.46))
        bezierPath.addCurve(to: CGPoint(x: 37.69, y: 45.24), controlPoint1: CGPoint(x: 37.09, y: 49.41), controlPoint2: CGPoint(x: 37.29, y: 47.17))
        bezierPath.addCurve(to: CGPoint(x: 39.89, y: 40.42), controlPoint1: CGPoint(x: 38.1, y: 43.31), controlPoint2: CGPoint(x: 38.83, y: 41.7))
        bezierPath.addCurve(to: CGPoint(x: 44.16, y: 37.57), controlPoint1: CGPoint(x: 40.96, y: 39.15), controlPoint2: CGPoint(x: 42.38, y: 38.19))
        bezierPath.addCurve(to: CGPoint(x: 50.98, y: 36.64), controlPoint1: CGPoint(x: 45.94, y: 36.95), controlPoint2: CGPoint(x: 48.22, y: 36.64))
        bezierPath.addCurve(to: CGPoint(x: 52.87, y: 36.72), controlPoint1: CGPoint(x: 51.61, y: 36.64), controlPoint2: CGPoint(x: 52.24, y: 36.66))
        bezierPath.addCurve(to: CGPoint(x: 55.2, y: 36.9), controlPoint1: CGPoint(x: 53.51, y: 36.78), controlPoint2: CGPoint(x: 54.28, y: 36.84))
        bezierPath.addLine(to: CGPoint(x: 55.2, y: 32.18))
        bezierPath.addCurve(to: CGPoint(x: 54.25, y: 28.35), controlPoint1: CGPoint(x: 55.2, y: 30.63), controlPoint2: CGPoint(x: 54.89, y: 29.36))
        bezierPath.addCurve(to: CGPoint(x: 50.8, y: 26.83), controlPoint1: CGPoint(x: 53.62, y: 27.34), controlPoint2: CGPoint(x: 52.47, y: 26.83))
        bezierPath.addCurve(to: CGPoint(x: 47.65, y: 27.99), controlPoint1: CGPoint(x: 49.65, y: 26.83), controlPoint2: CGPoint(x: 48.6, y: 27.22))
        bezierPath.addCurve(to: CGPoint(x: 45.8, y: 31.38), controlPoint1: CGPoint(x: 46.71, y: 28.76), controlPoint2: CGPoint(x: 46.09, y: 29.89))
        bezierPath.addLine(to: CGPoint(x: 37.26, y: 31.38))
        bezierPath.addCurve(to: CGPoint(x: 41.23, y: 21.57), controlPoint1: CGPoint(x: 37.55, y: 27.28), controlPoint2: CGPoint(x: 38.87, y: 24.01))
        bezierPath.addCurve(to: CGPoint(x: 45.37, y: 18.76), controlPoint1: CGPoint(x: 42.38, y: 20.38), controlPoint2: CGPoint(x: 43.76, y: 19.45))
        bezierPath.addCurve(to: CGPoint(x: 50.8, y: 17.74), controlPoint1: CGPoint(x: 46.98, y: 18.08), controlPoint2: CGPoint(x: 48.79, y: 17.74))
        bezierPath.addCurve(to: CGPoint(x: 55.98, y: 18.63), controlPoint1: CGPoint(x: 52.64, y: 17.74), controlPoint2: CGPoint(x: 54.37, y: 18.04))
        bezierPath.addCurve(to: CGPoint(x: 60.16, y: 21.3), controlPoint1: CGPoint(x: 57.59, y: 19.22), controlPoint2: CGPoint(x: 58.98, y: 20.12))
        bezierPath.addCurve(to: CGPoint(x: 62.96, y: 25.76), controlPoint1: CGPoint(x: 61.34, y: 22.49), controlPoint2: CGPoint(x: 62.27, y: 23.98))
        bezierPath.addCurve(to: CGPoint(x: 64, y: 32), controlPoint1: CGPoint(x: 63.65, y: 27.54), controlPoint2: CGPoint(x: 64, y: 29.62))
        bezierPath.addLine(to: CGPoint(x: 64, y: 63.47))
        bezierPath.addLine(to: CGPoint(x: 55.2, y: 63.47))
        bezierPath.addLine(to: CGPoint(x: 55.2, y: 58.83))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 55.2, y: 44.03))
        bezierPath.addCurve(to: CGPoint(x: 52.79, y: 43.77), controlPoint1: CGPoint(x: 54.22, y: 43.86), controlPoint2: CGPoint(x: 53.42, y: 43.77))
        bezierPath.addCurve(to: CGPoint(x: 47.91, y: 45.15), controlPoint1: CGPoint(x: 50.89, y: 43.77), controlPoint2: CGPoint(x: 49.27, y: 44.23))
        bezierPath.addCurve(to: CGPoint(x: 45.89, y: 50.18), controlPoint1: CGPoint(x: 46.56, y: 46.07), controlPoint2: CGPoint(x: 45.89, y: 47.75))
        bezierPath.addCurve(to: CGPoint(x: 47.09, y: 54.37), controlPoint1: CGPoint(x: 45.89, y: 51.91), controlPoint2: CGPoint(x: 46.29, y: 53.3))
        bezierPath.addCurve(to: CGPoint(x: 50.46, y: 55.98), controlPoint1: CGPoint(x: 47.9, y: 55.44), controlPoint2: CGPoint(x: 49.02, y: 55.98))
        bezierPath.addCurve(to: CGPoint(x: 53.95, y: 54.46), controlPoint1: CGPoint(x: 51.95, y: 55.98), controlPoint2: CGPoint(x: 53.12, y: 55.47))
        bezierPath.addCurve(to: CGPoint(x: 55.2, y: 50.18), controlPoint1: CGPoint(x: 54.79, y: 53.45), controlPoint2: CGPoint(x: 55.2, y: 52.03))
        bezierPath.addLine(to: CGPoint(x: 55.2, y: 44.03))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        color.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawIcon_markdownH1_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 4, y: 0))
        bezierPath.addLine(to: CGPoint(x: 12.76, y: 0))
        bezierPath.addLine(to: CGPoint(x: 12.76, y: 27.42))
        bezierPath.addLine(to: CGPoint(x: 23.58, y: 27.42))
        bezierPath.addLine(to: CGPoint(x: 23.58, y: 0))
        bezierPath.addLine(to: CGPoint(x: 32.35, y: 0))
        bezierPath.addLine(to: CGPoint(x: 32.35, y: 64))
        bezierPath.addLine(to: CGPoint(x: 23.58, y: 64))
        bezierPath.addLine(to: CGPoint(x: 23.58, y: 35.51))
        bezierPath.addLine(to: CGPoint(x: 12.76, y: 35.51))
        bezierPath.addLine(to: CGPoint(x: 12.76, y: 64))
        bezierPath.addLine(to: CGPoint(x: 4, y: 64))
        bezierPath.addLine(to: CGPoint(x: 4, y: 0))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 45.24, y: 9.71))
        bezierPath.addLine(to: CGPoint(x: 36.48, y: 16.45))
        bezierPath.addLine(to: CGPoint(x: 36.48, y: 6.74))
        bezierPath.addLine(to: CGPoint(x: 45.24, y: 0))
        bezierPath.addLine(to: CGPoint(x: 54, y: 0))
        bezierPath.addLine(to: CGPoint(x: 54, y: 64))
        bezierPath.addLine(to: CGPoint(x: 45.24, y: 64))
        bezierPath.addLine(to: CGPoint(x: 45.24, y: 9.71))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        color.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawIcon_markdownH2_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Group 2
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 35.79, y: 55.44))
        bezier2Path.addLine(to: CGPoint(x: 52.08, y: 24.51))
        bezier2Path.addCurve(to: CGPoint(x: 53.5, y: 20.46), controlPoint1: CGPoint(x: 52.91, y: 22.97), controlPoint2: CGPoint(x: 53.38, y: 21.62))
        bezier2Path.addCurve(to: CGPoint(x: 53.68, y: 16.13), controlPoint1: CGPoint(x: 53.62, y: 19.3), controlPoint2: CGPoint(x: 53.68, y: 17.86))
        bezier2Path.addCurve(to: CGPoint(x: 53.59, y: 13.68), controlPoint1: CGPoint(x: 53.68, y: 15.36), controlPoint2: CGPoint(x: 53.65, y: 14.54))
        bezier2Path.addCurve(to: CGPoint(x: 53.1, y: 11.41), controlPoint1: CGPoint(x: 53.53, y: 12.82), controlPoint2: CGPoint(x: 53.37, y: 12.06))
        bezier2Path.addCurve(to: CGPoint(x: 51.82, y: 9.76), controlPoint1: CGPoint(x: 52.84, y: 10.76), controlPoint2: CGPoint(x: 52.41, y: 10.21))
        bezier2Path.addCurve(to: CGPoint(x: 49.25, y: 9.09), controlPoint1: CGPoint(x: 51.23, y: 9.31), controlPoint2: CGPoint(x: 50.37, y: 9.09))
        bezier2Path.addCurve(to: CGPoint(x: 46.02, y: 10.25), controlPoint1: CGPoint(x: 47.89, y: 9.09), controlPoint2: CGPoint(x: 46.82, y: 9.48))
        bezier2Path.addCurve(to: CGPoint(x: 44.82, y: 13.64), controlPoint1: CGPoint(x: 45.22, y: 11.02), controlPoint2: CGPoint(x: 44.82, y: 12.15))
        bezier2Path.addLine(to: CGPoint(x: 44.82, y: 18.81))
        bezier2Path.addLine(to: CGPoint(x: 35.79, y: 18.81))
        bezier2Path.addLine(to: CGPoint(x: 35.79, y: 13.82))
        bezier2Path.addCurve(to: CGPoint(x: 36.85, y: 8.47), controlPoint1: CGPoint(x: 35.79, y: 11.91), controlPoint2: CGPoint(x: 36.14, y: 10.13))
        bezier2Path.addCurve(to: CGPoint(x: 39.73, y: 4.1), controlPoint1: CGPoint(x: 37.56, y: 6.8), controlPoint2: CGPoint(x: 38.52, y: 5.35))
        bezier2Path.addCurve(to: CGPoint(x: 44.03, y: 1.11), controlPoint1: CGPoint(x: 40.94, y: 2.85), controlPoint2: CGPoint(x: 42.37, y: 1.86))
        bezier2Path.addCurve(to: CGPoint(x: 49.34, y: 0), controlPoint1: CGPoint(x: 45.68, y: 0.37), controlPoint2: CGPoint(x: 47.45, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 55.4, y: 1.29), controlPoint1: CGPoint(x: 51.7, y: 0), controlPoint2: CGPoint(x: 53.72, y: 0.43))
        bezier2Path.addCurve(to: CGPoint(x: 59.57, y: 4.81), controlPoint1: CGPoint(x: 57.09, y: 2.15), controlPoint2: CGPoint(x: 58.47, y: 3.33))
        bezier2Path.addCurve(to: CGPoint(x: 61.96, y: 9.89), controlPoint1: CGPoint(x: 60.66, y: 6.3), controlPoint2: CGPoint(x: 61.46, y: 7.99))
        bezier2Path.addCurve(to: CGPoint(x: 62.71, y: 15.96), controlPoint1: CGPoint(x: 62.46, y: 11.8), controlPoint2: CGPoint(x: 62.71, y: 13.82))
        bezier2Path.addCurve(to: CGPoint(x: 62.62, y: 19.83), controlPoint1: CGPoint(x: 62.71, y: 17.5), controlPoint2: CGPoint(x: 62.68, y: 18.79))
        bezier2Path.addCurve(to: CGPoint(x: 62.27, y: 22.82), controlPoint1: CGPoint(x: 62.56, y: 20.87), controlPoint2: CGPoint(x: 62.44, y: 21.87))
        bezier2Path.addCurve(to: CGPoint(x: 61.38, y: 25.67), controlPoint1: CGPoint(x: 62.09, y: 23.77), controlPoint2: CGPoint(x: 61.8, y: 24.72))
        bezier2Path.addCurve(to: CGPoint(x: 59.7, y: 29.15), controlPoint1: CGPoint(x: 60.97, y: 26.62), controlPoint2: CGPoint(x: 60.41, y: 27.78))
        bezier2Path.addLine(to: CGPoint(x: 46.42, y: 54.91))
        bezier2Path.addLine(to: CGPoint(x: 62.71, y: 54.91))
        bezier2Path.addLine(to: CGPoint(x: 62.71, y: 64))
        bezier2Path.addLine(to: CGPoint(x: 35.79, y: 64))
        bezier2Path.addLine(to: CGPoint(x: 35.79, y: 55.44))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        color.setFill()
        bezier2Path.fill()

        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 4, y: 0))
        bezier3Path.addLine(to: CGPoint(x: 12.75, y: 0))
        bezier3Path.addLine(to: CGPoint(x: 12.75, y: 27.42))
        bezier3Path.addLine(to: CGPoint(x: 23.57, y: 27.42))
        bezier3Path.addLine(to: CGPoint(x: 23.57, y: 0))
        bezier3Path.addLine(to: CGPoint(x: 32.32, y: 0))
        bezier3Path.addLine(to: CGPoint(x: 32.32, y: 64))
        bezier3Path.addLine(to: CGPoint(x: 23.57, y: 64))
        bezier3Path.addLine(to: CGPoint(x: 23.57, y: 35.51))
        bezier3Path.addLine(to: CGPoint(x: 12.75, y: 35.51))
        bezier3Path.addLine(to: CGPoint(x: 12.75, y: 64))
        bezier3Path.addLine(to: CGPoint(x: 4, y: 64))
        bezier3Path.addLine(to: CGPoint(x: 4, y: 0))
        bezier3Path.close()
        bezier3Path.usesEvenOddFillRule = true
        color.setFill()
        bezier3Path.fill()
    }

    @objc dynamic public class func drawIcon_markdownH3_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 4, y: 0))
        bezierPath.addLine(to: CGPoint(x: 12.76, y: 0))
        bezierPath.addLine(to: CGPoint(x: 12.76, y: 27.42))
        bezierPath.addLine(to: CGPoint(x: 23.58, y: 27.42))
        bezierPath.addLine(to: CGPoint(x: 23.58, y: 0))
        bezierPath.addLine(to: CGPoint(x: 32.33, y: 0))
        bezierPath.addLine(to: CGPoint(x: 32.33, y: 64))
        bezierPath.addLine(to: CGPoint(x: 23.58, y: 64))
        bezierPath.addLine(to: CGPoint(x: 23.58, y: 35.51))
        bezierPath.addLine(to: CGPoint(x: 12.76, y: 35.51))
        bezierPath.addLine(to: CGPoint(x: 12.76, y: 64))
        bezierPath.addLine(to: CGPoint(x: 4, y: 64))
        bezierPath.addLine(to: CGPoint(x: 4, y: 0))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        color.setFill()
        bezierPath.fill()

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 46.44, y: 27.05))
        bezier2Path.addCurve(to: CGPoint(x: 52.01, y: 26.08), controlPoint1: CGPoint(x: 49.13, y: 27.05), controlPoint2: CGPoint(x: 50.99, y: 26.73))
        bezier2Path.addCurve(to: CGPoint(x: 53.55, y: 21.57), controlPoint1: CGPoint(x: 53.04, y: 25.43), controlPoint2: CGPoint(x: 53.55, y: 23.93))
        bezier2Path.addLine(to: CGPoint(x: 53.55, y: 13.44))
        bezier2Path.addCurve(to: CGPoint(x: 52.37, y: 10.25), controlPoint1: CGPoint(x: 53.55, y: 12.14), controlPoint2: CGPoint(x: 53.16, y: 11.08))
        bezier2Path.addCurve(to: CGPoint(x: 49.16, y: 9.02), controlPoint1: CGPoint(x: 51.58, y: 9.43), controlPoint2: CGPoint(x: 50.51, y: 9.02))
        bezier2Path.addCurve(to: CGPoint(x: 45.78, y: 10.52), controlPoint1: CGPoint(x: 47.58, y: 9.02), controlPoint2: CGPoint(x: 46.45, y: 9.52))
        bezier2Path.addCurve(to: CGPoint(x: 44.77, y: 13.44), controlPoint1: CGPoint(x: 45.1, y: 11.52), controlPoint2: CGPoint(x: 44.77, y: 12.49))
        bezier2Path.addLine(to: CGPoint(x: 44.77, y: 18.56))
        bezier2Path.addLine(to: CGPoint(x: 35.8, y: 18.56))
        bezier2Path.addLine(to: CGPoint(x: 35.8, y: 13.35))
        bezier2Path.addCurve(to: CGPoint(x: 36.86, y: 8.13), controlPoint1: CGPoint(x: 35.8, y: 11.52), controlPoint2: CGPoint(x: 36.16, y: 9.78))
        bezier2Path.addCurve(to: CGPoint(x: 39.76, y: 3.89), controlPoint1: CGPoint(x: 37.56, y: 6.48), controlPoint2: CGPoint(x: 38.53, y: 5.07))
        bezier2Path.addCurve(to: CGPoint(x: 44.06, y: 1.06), controlPoint1: CGPoint(x: 40.99, y: 2.71), controlPoint2: CGPoint(x: 42.42, y: 1.77))
        bezier2Path.addCurve(to: CGPoint(x: 49.34, y: 0), controlPoint1: CGPoint(x: 45.7, y: 0.35), controlPoint2: CGPoint(x: 47.46, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 55.44, y: 1.46), controlPoint1: CGPoint(x: 51.8, y: 0), controlPoint2: CGPoint(x: 53.83, y: 0.49))
        bezier2Path.addCurve(to: CGPoint(x: 59.09, y: 4.42), controlPoint1: CGPoint(x: 57.05, y: 2.43), controlPoint2: CGPoint(x: 58.27, y: 3.42))
        bezier2Path.addCurve(to: CGPoint(x: 60.62, y: 6.59), controlPoint1: CGPoint(x: 59.67, y: 5.13), controlPoint2: CGPoint(x: 60.19, y: 5.85))
        bezier2Path.addCurve(to: CGPoint(x: 61.68, y: 9.15), controlPoint1: CGPoint(x: 61.06, y: 7.32), controlPoint2: CGPoint(x: 61.42, y: 8.18))
        bezier2Path.addCurve(to: CGPoint(x: 62.29, y: 12.69), controlPoint1: CGPoint(x: 61.94, y: 10.12), controlPoint2: CGPoint(x: 62.15, y: 11.3))
        bezier2Path.addCurve(to: CGPoint(x: 62.51, y: 17.77), controlPoint1: CGPoint(x: 62.44, y: 14.07), controlPoint2: CGPoint(x: 62.51, y: 15.76))
        bezier2Path.addCurve(to: CGPoint(x: 62.38, y: 23.07), controlPoint1: CGPoint(x: 62.51, y: 19.95), controlPoint2: CGPoint(x: 62.47, y: 21.72))
        bezier2Path.addCurve(to: CGPoint(x: 61.68, y: 26.48), controlPoint1: CGPoint(x: 62.29, y: 24.43), controlPoint2: CGPoint(x: 62.06, y: 25.56))
        bezier2Path.addCurve(to: CGPoint(x: 60.01, y: 28.82), controlPoint1: CGPoint(x: 61.3, y: 27.39), controlPoint2: CGPoint(x: 60.74, y: 28.17))
        bezier2Path.addCurve(to: CGPoint(x: 56.98, y: 30.94), controlPoint1: CGPoint(x: 59.28, y: 29.47), controlPoint2: CGPoint(x: 58.27, y: 30.17))
        bezier2Path.addCurve(to: CGPoint(x: 60.19, y: 33.41), controlPoint1: CGPoint(x: 58.38, y: 31.82), controlPoint2: CGPoint(x: 59.45, y: 32.65))
        bezier2Path.addCurve(to: CGPoint(x: 61.81, y: 36.11), controlPoint1: CGPoint(x: 60.92, y: 34.18), controlPoint2: CGPoint(x: 61.46, y: 35.08))
        bezier2Path.addCurve(to: CGPoint(x: 62.43, y: 39.82), controlPoint1: CGPoint(x: 62.16, y: 37.14), controlPoint2: CGPoint(x: 62.37, y: 38.38))
        bezier2Path.addCurve(to: CGPoint(x: 62.51, y: 45.35), controlPoint1: CGPoint(x: 62.48, y: 41.27), controlPoint2: CGPoint(x: 62.51, y: 43.11))
        bezier2Path.addCurve(to: CGPoint(x: 62.38, y: 50.48), controlPoint1: CGPoint(x: 62.51, y: 47.41), controlPoint2: CGPoint(x: 62.47, y: 49.12))
        bezier2Path.addCurve(to: CGPoint(x: 61.99, y: 53.88), controlPoint1: CGPoint(x: 62.29, y: 51.83), controlPoint2: CGPoint(x: 62.16, y: 52.97))
        bezier2Path.addCurve(to: CGPoint(x: 61.28, y: 56.22), controlPoint1: CGPoint(x: 61.81, y: 54.79), controlPoint2: CGPoint(x: 61.58, y: 55.57))
        bezier2Path.addCurve(to: CGPoint(x: 60.14, y: 58.25), controlPoint1: CGPoint(x: 60.99, y: 56.87), controlPoint2: CGPoint(x: 60.61, y: 57.55))
        bezier2Path.addCurve(to: CGPoint(x: 55.84, y: 62.36), controlPoint1: CGPoint(x: 59.03, y: 59.9), controlPoint2: CGPoint(x: 57.59, y: 61.27))
        bezier2Path.addCurve(to: CGPoint(x: 49.07, y: 64), controlPoint1: CGPoint(x: 54.08, y: 63.45), controlPoint2: CGPoint(x: 51.82, y: 64))
        bezier2Path.addCurve(to: CGPoint(x: 44.59, y: 63.29), controlPoint1: CGPoint(x: 47.67, y: 64), controlPoint2: CGPoint(x: 46.17, y: 63.76))
        bezier2Path.addCurve(to: CGPoint(x: 40.29, y: 60.99), controlPoint1: CGPoint(x: 43.01, y: 62.82), controlPoint2: CGPoint(x: 41.57, y: 62.06))
        bezier2Path.addCurve(to: CGPoint(x: 37.08, y: 56.84), controlPoint1: CGPoint(x: 39, y: 59.93), controlPoint2: CGPoint(x: 37.93, y: 58.55))
        bezier2Path.addCurve(to: CGPoint(x: 35.8, y: 50.56), controlPoint1: CGPoint(x: 36.23, y: 55.13), controlPoint2: CGPoint(x: 35.8, y: 53.04))
        bezier2Path.addLine(to: CGPoint(x: 35.8, y: 45.44))
        bezier2Path.addLine(to: CGPoint(x: 44.77, y: 45.44))
        bezier2Path.addLine(to: CGPoint(x: 44.77, y: 50.12))
        bezier2Path.addCurve(to: CGPoint(x: 45.95, y: 53.61), controlPoint1: CGPoint(x: 44.77, y: 51.54), controlPoint2: CGPoint(x: 45.16, y: 52.7))
        bezier2Path.addCurve(to: CGPoint(x: 49.16, y: 54.98), controlPoint1: CGPoint(x: 46.74, y: 54.53), controlPoint2: CGPoint(x: 47.81, y: 54.98))
        bezier2Path.addCurve(to: CGPoint(x: 52.37, y: 53.61), controlPoint1: CGPoint(x: 50.51, y: 54.98), controlPoint2: CGPoint(x: 51.58, y: 54.53))
        bezier2Path.addCurve(to: CGPoint(x: 53.55, y: 49.94), controlPoint1: CGPoint(x: 53.16, y: 52.7), controlPoint2: CGPoint(x: 53.55, y: 51.48))
        bezier2Path.addLine(to: CGPoint(x: 53.55, y: 40.93))
        bezier2Path.addCurve(to: CGPoint(x: 53.24, y: 37.92), controlPoint1: CGPoint(x: 53.55, y: 39.69), controlPoint2: CGPoint(x: 53.45, y: 38.69))
        bezier2Path.addCurve(to: CGPoint(x: 52.15, y: 36.11), controlPoint1: CGPoint(x: 53.04, y: 37.16), controlPoint2: CGPoint(x: 52.67, y: 36.55))
        bezier2Path.addCurve(to: CGPoint(x: 49.99, y: 35.23), controlPoint1: CGPoint(x: 51.62, y: 35.67), controlPoint2: CGPoint(x: 50.9, y: 35.37))
        bezier2Path.addCurve(to: CGPoint(x: 46.44, y: 35.01), controlPoint1: CGPoint(x: 49.09, y: 35.08), controlPoint2: CGPoint(x: 47.9, y: 35.01))
        bezier2Path.addLine(to: CGPoint(x: 46.44, y: 27.05))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        color.setFill()
        bezier2Path.fill()
    }

    @objc dynamic public class func drawIcon_markdownBold_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 11, y: 64))
        bezierPath.addLine(to: CGPoint(x: 11, y: 0))
        bezierPath.addLine(to: CGPoint(x: 35.4, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 49.34, y: 4.74), controlPoint1: CGPoint(x: 41.59, y: 0.06), controlPoint2: CGPoint(x: 46.23, y: 1.64))
        bezierPath.addCurve(to: CGPoint(x: 54.05, y: 17.16), controlPoint1: CGPoint(x: 52.48, y: 7.87), controlPoint2: CGPoint(x: 54.05, y: 12.01))
        bezierPath.addCurve(to: CGPoint(x: 52.19, y: 24.71), controlPoint1: CGPoint(x: 54.11, y: 19.8), controlPoint2: CGPoint(x: 53.49, y: 22.31))
        bezierPath.addCurve(to: CGPoint(x: 49.34, y: 27.96), controlPoint1: CGPoint(x: 51.53, y: 25.85), controlPoint2: CGPoint(x: 50.58, y: 26.94))
        bezierPath.addCurve(to: CGPoint(x: 44.77, y: 30.9), controlPoint1: CGPoint(x: 48.11, y: 29.04), controlPoint2: CGPoint(x: 46.58, y: 30.02))
        bezierPath.addLine(to: CGPoint(x: 44.77, y: 31.08))
        bezierPath.addCurve(to: CGPoint(x: 52.54, y: 36.57), controlPoint1: CGPoint(x: 48.19, y: 31.99), controlPoint2: CGPoint(x: 50.78, y: 33.81))
        bezierPath.addCurve(to: CGPoint(x: 55, y: 45.83), controlPoint1: CGPoint(x: 54.18, y: 39.4), controlPoint2: CGPoint(x: 55, y: 42.49))
        bezierPath.addCurve(to: CGPoint(x: 49.9, y: 58.95), controlPoint1: CGPoint(x: 54.94, y: 51.36), controlPoint2: CGPoint(x: 53.24, y: 55.73))
        bezierPath.addCurve(to: CGPoint(x: 37.51, y: 64), controlPoint1: CGPoint(x: 46.59, y: 62.32), controlPoint2: CGPoint(x: 42.46, y: 64))
        bezierPath.addLine(to: CGPoint(x: 11, y: 64))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 35.22, y: 35.26))
        bezierPath.addLine(to: CGPoint(x: 20.54, y: 35.26))
        bezierPath.addLine(to: CGPoint(x: 20.54, y: 54.31))
        bezierPath.addLine(to: CGPoint(x: 35.22, y: 54.31))
        bezierPath.addCurve(to: CGPoint(x: 43, y: 51.4), controlPoint1: CGPoint(x: 38.76, y: 54.25), controlPoint2: CGPoint(x: 41.36, y: 53.28))
        bezierPath.addCurve(to: CGPoint(x: 45.46, y: 44.79), controlPoint1: CGPoint(x: 44.64, y: 49.54), controlPoint2: CGPoint(x: 45.46, y: 47.34))
        bezierPath.addCurve(to: CGPoint(x: 43, y: 38.09), controlPoint1: CGPoint(x: 45.46, y: 42.18), controlPoint2: CGPoint(x: 44.64, y: 39.95))
        bezierPath.addCurve(to: CGPoint(x: 35.22, y: 35.26), controlPoint1: CGPoint(x: 41.36, y: 36.26), controlPoint2: CGPoint(x: 38.76, y: 35.32))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 34.32, y: 8.57))
        bezierPath.addLine(to: CGPoint(x: 20.54, y: 8.57))
        bezierPath.addLine(to: CGPoint(x: 20.54, y: 26.7))
        bezierPath.addLine(to: CGPoint(x: 34.32, y: 26.7))
        bezierPath.addCurve(to: CGPoint(x: 42, y: 23.96), controlPoint1: CGPoint(x: 37.8, y: 26.7), controlPoint2: CGPoint(x: 40.36, y: 25.78))
        bezierPath.addCurve(to: CGPoint(x: 44.51, y: 17.61), controlPoint1: CGPoint(x: 43.67, y: 22.28), controlPoint2: CGPoint(x: 44.51, y: 20.16))
        bezierPath.addCurve(to: CGPoint(x: 42, y: 11.13), controlPoint1: CGPoint(x: 44.51, y: 15.06), controlPoint2: CGPoint(x: 43.67, y: 12.9))
        bezierPath.addCurve(to: CGPoint(x: 34.32, y: 8.57), controlPoint1: CGPoint(x: 40.36, y: 9.48), controlPoint2: CGPoint(x: 37.8, y: 8.62))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        color.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawIcon_markdownItalic_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 32.98, y: 54.15))
        bezierPath.addLine(to: CGPoint(x: 39.68, y: 9.85))
        bezierPath.addLine(to: CGPoint(x: 44.51, y: 9.85))
        bezierPath.addLine(to: CGPoint(x: 46, y: -0))
        bezierPath.addLine(to: CGPoint(x: 26.65, y: -0))
        bezierPath.addLine(to: CGPoint(x: 25.17, y: 9.85))
        bezierPath.addLine(to: CGPoint(x: 30, y: 9.85))
        bezierPath.addLine(to: CGPoint(x: 23.31, y: 54.15))
        bezierPath.addLine(to: CGPoint(x: 18.47, y: 54.15))
        bezierPath.addLine(to: CGPoint(x: 16.98, y: 64))
        bezierPath.addLine(to: CGPoint(x: 36.33, y: 64))
        bezierPath.addLine(to: CGPoint(x: 37.81, y: 54.15))
        bezierPath.addLine(to: CGPoint(x: 32.98, y: 54.15))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        color.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawIconmarkdownUnderline_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 12, y: 30.49))
        bezierPath.addCurve(to: CGPoint(x: 17.13, y: 42.21), controlPoint1: CGPoint(x: 12.06, y: 35.66), controlPoint2: CGPoint(x: 13.77, y: 39.57))
        bezierPath.addCurve(to: CGPoint(x: 27.51, y: 46.36), controlPoint1: CGPoint(x: 20.22, y: 44.92), controlPoint2: CGPoint(x: 23.68, y: 46.3))
        bezierPath.addCurve(to: CGPoint(x: 39.5, y: 40.94), controlPoint1: CGPoint(x: 32.45, y: 46.36), controlPoint2: CGPoint(x: 36.44, y: 44.55))
        bezierPath.addLine(to: CGPoint(x: 39.68, y: 40.94))
        bezierPath.addLine(to: CGPoint(x: 39.68, y: 45.83))
        bezierPath.addLine(to: CGPoint(x: 49, y: 45.83))
        bezierPath.addLine(to: CGPoint(x: 49, y: 0.08))
        bezierPath.addLine(to: CGPoint(x: 39.68, y: 0.08))
        bezierPath.addLine(to: CGPoint(x: 39.68, y: 27.32))
        bezierPath.addCurve(to: CGPoint(x: 37.1, y: 34.55), controlPoint1: CGPoint(x: 39.68, y: 30.4), controlPoint2: CGPoint(x: 38.82, y: 32.81))
        bezierPath.addCurve(to: CGPoint(x: 30.54, y: 37.15), controlPoint1: CGPoint(x: 35.4, y: 36.28), controlPoint2: CGPoint(x: 33.22, y: 37.15))
        bezierPath.addCurve(to: CGPoint(x: 23.95, y: 34.55), controlPoint1: CGPoint(x: 27.87, y: 37.15), controlPoint2: CGPoint(x: 25.67, y: 36.28))
        bezierPath.addCurve(to: CGPoint(x: 21.32, y: 27.32), controlPoint1: CGPoint(x: 22.19, y: 32.81), controlPoint2: CGPoint(x: 21.32, y: 30.4))
        bezierPath.addLine(to: CGPoint(x: 21.32, y: 0.08))
        bezierPath.addLine(to: CGPoint(x: 12, y: 0.08))
        bezierPath.addLine(to: CGPoint(x: 12, y: 30.49))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        color.setFill()
        bezierPath.fill()

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 12, y: 55, width: 37, height: 9))
        color.setFill()
        rectanglePath.fill()
    }

    @objc dynamic public class func drawIcon_markdownBulletList_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 20, y: 28.18))
        bezierPath.addLine(to: CGPoint(x: 60, y: 28.18))
        bezierPath.addLine(to: CGPoint(x: 60, y: 36.23))
        bezierPath.addLine(to: CGPoint(x: 20, y: 36.23))
        bezierPath.addLine(to: CGPoint(x: 20, y: 28.18))
        bezierPath.addLine(to: CGPoint(x: 20, y: 28.18))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 20, y: 4.03))
        bezierPath.addLine(to: CGPoint(x: 60, y: 4.03))
        bezierPath.addLine(to: CGPoint(x: 60, y: 12.08))
        bezierPath.addLine(to: CGPoint(x: 20, y: 12.08))
        bezierPath.addLine(to: CGPoint(x: 20, y: 4.03))
        bezierPath.addLine(to: CGPoint(x: 20, y: 4.03))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 20, y: 52.33))
        bezierPath.addLine(to: CGPoint(x: 60, y: 52.33))
        bezierPath.addLine(to: CGPoint(x: 60, y: 60.38))
        bezierPath.addLine(to: CGPoint(x: 20, y: 60.38))
        bezierPath.addLine(to: CGPoint(x: 20, y: 52.33))
        bezierPath.addLine(to: CGPoint(x: 20, y: 52.33))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        color.setFill()
        bezierPath.fill()

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 5, y: 28.18))
        bezier2Path.addLine(to: CGPoint(x: 13, y: 28.18))
        bezier2Path.addLine(to: CGPoint(x: 13, y: 36.23))
        bezier2Path.addLine(to: CGPoint(x: 5, y: 36.23))
        bezier2Path.addLine(to: CGPoint(x: 5, y: 28.18))
        bezier2Path.addLine(to: CGPoint(x: 5, y: 28.18))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 5, y: 4.03))
        bezier2Path.addLine(to: CGPoint(x: 13, y: 4.03))
        bezier2Path.addLine(to: CGPoint(x: 13, y: 12.08))
        bezier2Path.addLine(to: CGPoint(x: 5, y: 12.08))
        bezier2Path.addLine(to: CGPoint(x: 5, y: 4.03))
        bezier2Path.addLine(to: CGPoint(x: 5, y: 4.03))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 5, y: 52.33))
        bezier2Path.addLine(to: CGPoint(x: 13, y: 52.33))
        bezier2Path.addLine(to: CGPoint(x: 13, y: 60.38))
        bezier2Path.addLine(to: CGPoint(x: 5, y: 60.38))
        bezier2Path.addLine(to: CGPoint(x: 5, y: 52.33))
        bezier2Path.addLine(to: CGPoint(x: 5, y: 52.33))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        color.setFill()
        bezier2Path.fill()
    }

    @objc dynamic public class func drawIcon_markdownNumberList_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 20, y: 28.18))
        bezierPath.addLine(to: CGPoint(x: 60, y: 28.18))
        bezierPath.addLine(to: CGPoint(x: 60, y: 36.23))
        bezierPath.addLine(to: CGPoint(x: 20, y: 36.23))
        bezierPath.addLine(to: CGPoint(x: 20, y: 28.18))
        bezierPath.addLine(to: CGPoint(x: 20, y: 28.18))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 20, y: 4.03))
        bezierPath.addLine(to: CGPoint(x: 60, y: 4.03))
        bezierPath.addLine(to: CGPoint(x: 60, y: 12.08))
        bezierPath.addLine(to: CGPoint(x: 20, y: 12.08))
        bezierPath.addLine(to: CGPoint(x: 20, y: 4.03))
        bezierPath.addLine(to: CGPoint(x: 20, y: 4.03))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 20, y: 52.33))
        bezierPath.addLine(to: CGPoint(x: 60, y: 52.33))
        bezierPath.addLine(to: CGPoint(x: 60, y: 60.38))
        bezierPath.addLine(to: CGPoint(x: 20, y: 60.38))
        bezierPath.addLine(to: CGPoint(x: 20, y: 52.33))
        bezierPath.addLine(to: CGPoint(x: 20, y: 52.33))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        color.setFill()
        bezierPath.fill()

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 0, y: 29.42))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 29.48))
        bezier2Path.addLine(to: CGPoint(x: 3.61, y: 29.48))
        bezier2Path.addLine(to: CGPoint(x: 3.61, y: 29.4))
        bezier2Path.addCurve(to: CGPoint(x: 5.86, y: 27.18), controlPoint1: CGPoint(x: 3.61, y: 28.1), controlPoint2: CGPoint(x: 4.53, y: 27.18))
        bezier2Path.addCurve(to: CGPoint(x: 7.97, y: 29.12), controlPoint1: CGPoint(x: 7.13, y: 27.18), controlPoint2: CGPoint(x: 7.97, y: 27.96))
        bezier2Path.addCurve(to: CGPoint(x: 5.12, y: 32.99), controlPoint1: CGPoint(x: 7.97, y: 30.07), controlPoint2: CGPoint(x: 7.36, y: 30.89))
        bezier2Path.addLine(to: CGPoint(x: 0.23, y: 37.58))
        bezier2Path.addLine(to: CGPoint(x: 0.23, y: 40.26))
        bezier2Path.addLine(to: CGPoint(x: 12, y: 40.26))
        bezier2Path.addLine(to: CGPoint(x: 12, y: 37.13))
        bezier2Path.addLine(to: CGPoint(x: 5.47, y: 37.13))
        bezier2Path.addLine(to: CGPoint(x: 5.47, y: 36.92))
        bezier2Path.addLine(to: CGPoint(x: 8.03, y: 34.63))
        bezier2Path.addCurve(to: CGPoint(x: 11.79, y: 28.84), controlPoint1: CGPoint(x: 10.75, y: 32.19), controlPoint2: CGPoint(x: 11.79, y: 30.61))
        bezier2Path.addCurve(to: CGPoint(x: 6, y: 24.15), controlPoint1: CGPoint(x: 11.79, y: 26.03), controlPoint2: CGPoint(x: 9.46, y: 24.15))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 29.42), controlPoint1: CGPoint(x: 2.42, y: 24.15), controlPoint2: CGPoint(x: 0, y: 26.26))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        color.setFill()
        bezier2Path.fill()

        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 4.11, y: 57.22))
        bezier3Path.addLine(to: CGPoint(x: 5.91, y: 57.22))
        bezier3Path.addCurve(to: CGPoint(x: 8.2, y: 59.07), controlPoint1: CGPoint(x: 7.34, y: 57.22), controlPoint2: CGPoint(x: 8.2, y: 57.92))
        bezier3Path.addCurve(to: CGPoint(x: 5.95, y: 60.91), controlPoint1: CGPoint(x: 8.2, y: 60.16), controlPoint2: CGPoint(x: 7.29, y: 60.91))
        bezier3Path.addCurve(to: CGPoint(x: 3.57, y: 59.09), controlPoint1: CGPoint(x: 4.52, y: 60.91), controlPoint2: CGPoint(x: 3.63, y: 60.2))
        bezier3Path.addLine(to: CGPoint(x: 0, y: 59.09))
        bezier3Path.addCurve(to: CGPoint(x: 5.89, y: 63.86), controlPoint1: CGPoint(x: 0.14, y: 61.98), controlPoint2: CGPoint(x: 2.43, y: 63.86))
        bezier3Path.addCurve(to: CGPoint(x: 12, y: 59.39), controlPoint1: CGPoint(x: 9.55, y: 63.86), controlPoint2: CGPoint(x: 12, y: 62.11))
        bezier3Path.addCurve(to: CGPoint(x: 8.4, y: 55.83), controlPoint1: CGPoint(x: 12, y: 57.35), controlPoint2: CGPoint(x: 10.58, y: 56.04))
        bezier3Path.addLine(to: CGPoint(x: 8.4, y: 55.75))
        bezier3Path.addCurve(to: CGPoint(x: 11.46, y: 52.33), controlPoint1: CGPoint(x: 10.19, y: 55.43), controlPoint2: CGPoint(x: 11.46, y: 54.13))
        bezier3Path.addCurve(to: CGPoint(x: 6.03, y: 48.31), controlPoint1: CGPoint(x: 11.46, y: 49.89), controlPoint2: CGPoint(x: 9.31, y: 48.31))
        bezier3Path.addCurve(to: CGPoint(x: 0.29, y: 53.04), controlPoint1: CGPoint(x: 2.61, y: 48.31), controlPoint2: CGPoint(x: 0.34, y: 50.19))
        bezier3Path.addLine(to: CGPoint(x: 3.67, y: 53.04))
        bezier3Path.addCurve(to: CGPoint(x: 5.87, y: 51.11), controlPoint1: CGPoint(x: 3.71, y: 51.89), controlPoint2: CGPoint(x: 4.58, y: 51.11))
        bezier3Path.addCurve(to: CGPoint(x: 7.99, y: 52.85), controlPoint1: CGPoint(x: 7.21, y: 51.11), controlPoint2: CGPoint(x: 7.99, y: 51.78))
        bezier3Path.addCurve(to: CGPoint(x: 5.9, y: 54.62), controlPoint1: CGPoint(x: 7.99, y: 53.91), controlPoint2: CGPoint(x: 7.16, y: 54.62))
        bezier3Path.addLine(to: CGPoint(x: 4.11, y: 54.62))
        bezier3Path.addLine(to: CGPoint(x: 4.11, y: 57.22))
        bezier3Path.close()
        bezier3Path.usesEvenOddFillRule = true
        color.setFill()
        bezier3Path.fill()

        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 4.08, y: 16.1))
        bezier4Path.addLine(to: CGPoint(x: 8, y: 16.1))
        bezier4Path.addLine(to: CGPoint(x: 8, y: 0))
        bezier4Path.addLine(to: CGPoint(x: 4.07, y: 0))
        bezier4Path.addLine(to: CGPoint(x: 0, y: 2.79))
        bezier4Path.addLine(to: CGPoint(x: 0, y: 6.32))
        bezier4Path.addLine(to: CGPoint(x: 4, y: 3.59))
        bezier4Path.addLine(to: CGPoint(x: 4.08, y: 3.59))
        bezier4Path.addLine(to: CGPoint(x: 4.08, y: 16.1))
        bezier4Path.close()
        bezier4Path.usesEvenOddFillRule = true
        color.setFill()
        bezier4Path.fill()
    }

    @objc dynamic public class func drawIcon_markdownCode_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 54.33, y: 32))
        bezierPath.addLine(to: CGPoint(x: 45.08, y: 17.16))
        bezierPath.addLine(to: CGPoint(x: 52.31, y: 12.62))
        bezierPath.addLine(to: CGPoint(x: 64.39, y: 32))
        bezierPath.addLine(to: CGPoint(x: 52.31, y: 51.38))
        bezierPath.addLine(to: CGPoint(x: 45.08, y: 46.84))
        bezierPath.addLine(to: CGPoint(x: 54.33, y: 32))
        bezierPath.close()
        color.setFill()
        bezierPath.fill()

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 19.6, y: 17.16))
        bezier2Path.addLine(to: CGPoint(x: 12.36, y: 12.62))
        bezier2Path.addLine(to: CGPoint(x: 0.28, y: 32))
        bezier2Path.addLine(to: CGPoint(x: 12.36, y: 51.38))
        bezier2Path.addLine(to: CGPoint(x: 19.6, y: 46.84))
        bezier2Path.addLine(to: CGPoint(x: 10.34, y: 32))
        bezier2Path.addLine(to: CGPoint(x: 19.6, y: 17.16))
        bezier2Path.close()
        color.setFill()
        bezier2Path.fill()

        //// Rectangle Drawing
        context.saveGState()
        context.translateBy(x: 33.04, y: 32)
        context.rotate(by: 12.1 * CGFloat.pi/180)

        let rectanglePath = UIBezierPath(rect: CGRect(x: -4.25, y: -30.61, width: 8.5, height: 61.21))
        color.setFill()
        rectanglePath.fill()

        context.restoreGState()
    }

    @objc dynamic public class func drawIcon_statusBusy_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 32, y: 64))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 32), controlPoint1: CGPoint(x: 14.33, y: 64), controlPoint2: CGPoint(x: 0, y: 49.67))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 0), controlPoint1: CGPoint(x: 0, y: 14.33), controlPoint2: CGPoint(x: 14.33, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 64, y: 32), controlPoint1: CGPoint(x: 49.67, y: 0), controlPoint2: CGPoint(x: 64, y: 14.33))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 64), controlPoint1: CGPoint(x: 64, y: 49.67), controlPoint2: CGPoint(x: 49.67, y: 64))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 19.2, y: 25.6))
        bezierPath.addCurve(to: CGPoint(x: 12.8, y: 32), controlPoint1: CGPoint(x: 15.67, y: 25.6), controlPoint2: CGPoint(x: 12.8, y: 28.47))
        bezierPath.addCurve(to: CGPoint(x: 19.2, y: 38.4), controlPoint1: CGPoint(x: 12.8, y: 35.53), controlPoint2: CGPoint(x: 15.67, y: 38.4))
        bezierPath.addLine(to: CGPoint(x: 44.8, y: 38.4))
        bezierPath.addCurve(to: CGPoint(x: 51.2, y: 32), controlPoint1: CGPoint(x: 48.33, y: 38.4), controlPoint2: CGPoint(x: 51.2, y: 35.53))
        bezierPath.addCurve(to: CGPoint(x: 44.8, y: 25.6), controlPoint1: CGPoint(x: 51.2, y: 28.47), controlPoint2: CGPoint(x: 48.33, y: 25.6))
        bezierPath.addLine(to: CGPoint(x: 19.2, y: 25.6))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        color.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawIcon_statusAway_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 32, y: 64))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 32), controlPoint1: CGPoint(x: 14.33, y: 64), controlPoint2: CGPoint(x: 0, y: 49.67))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 0), controlPoint1: CGPoint(x: 0, y: 14.33), controlPoint2: CGPoint(x: 14.33, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 64, y: 32), controlPoint1: CGPoint(x: 49.67, y: 0), controlPoint2: CGPoint(x: 64, y: 14.33))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 64), controlPoint1: CGPoint(x: 64, y: 49.67), controlPoint2: CGPoint(x: 49.67, y: 64))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 32, y: 51.2))
        bezierPath.addCurve(to: CGPoint(x: 51.2, y: 32), controlPoint1: CGPoint(x: 42.6, y: 51.2), controlPoint2: CGPoint(x: 51.2, y: 42.6))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 12.8), controlPoint1: CGPoint(x: 51.2, y: 21.4), controlPoint2: CGPoint(x: 42.6, y: 12.8))
        bezierPath.addCurve(to: CGPoint(x: 12.8, y: 32), controlPoint1: CGPoint(x: 21.4, y: 12.8), controlPoint2: CGPoint(x: 12.8, y: 21.4))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 51.2), controlPoint1: CGPoint(x: 12.8, y: 42.6), controlPoint2: CGPoint(x: 21.4, y: 51.2))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        color.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawIcon_statusAvailable_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 32, y: 64))
        bezierPath.addCurve(to: CGPoint(x: 64, y: 32), controlPoint1: CGPoint(x: 49.67, y: 64), controlPoint2: CGPoint(x: 64, y: 49.67))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 0), controlPoint1: CGPoint(x: 64, y: 14.33), controlPoint2: CGPoint(x: 49.67, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 32), controlPoint1: CGPoint(x: 14.33, y: 0), controlPoint2: CGPoint(x: 0, y: 14.33))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 64), controlPoint1: CGPoint(x: 0, y: 49.67), controlPoint2: CGPoint(x: 14.33, y: 64))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        color.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawIcon_exclamationMarkCircle_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Alert Drawing
        let alertPath = UIBezierPath()
        alertPath.move(to: CGPoint(x: 32, y: 64))
        alertPath.addCurve(to: CGPoint(x: 0, y: 32), controlPoint1: CGPoint(x: 14.33, y: 64), controlPoint2: CGPoint(x: 0, y: 49.67))
        alertPath.addCurve(to: CGPoint(x: 32, y: 0), controlPoint1: CGPoint(x: 0, y: 14.33), controlPoint2: CGPoint(x: 14.33, y: 0))
        alertPath.addCurve(to: CGPoint(x: 64, y: 32), controlPoint1: CGPoint(x: 49.67, y: 0), controlPoint2: CGPoint(x: 64, y: 14.33))
        alertPath.addCurve(to: CGPoint(x: 32, y: 64), controlPoint1: CGPoint(x: 64, y: 49.67), controlPoint2: CGPoint(x: 49.67, y: 64))
        alertPath.close()
        alertPath.move(to: CGPoint(x: 32, y: 12))
        alertPath.addCurve(to: CGPoint(x: 28, y: 16), controlPoint1: CGPoint(x: 29.79, y: 12), controlPoint2: CGPoint(x: 28, y: 13.79))
        alertPath.addLine(to: CGPoint(x: 28, y: 36))
        alertPath.addCurve(to: CGPoint(x: 32, y: 40), controlPoint1: CGPoint(x: 28, y: 38.21), controlPoint2: CGPoint(x: 29.79, y: 40))
        alertPath.addCurve(to: CGPoint(x: 36, y: 36), controlPoint1: CGPoint(x: 34.21, y: 40), controlPoint2: CGPoint(x: 36, y: 38.21))
        alertPath.addLine(to: CGPoint(x: 36, y: 16))
        alertPath.addCurve(to: CGPoint(x: 32, y: 12), controlPoint1: CGPoint(x: 36, y: 13.79), controlPoint2: CGPoint(x: 34.21, y: 12))
        alertPath.close()
        alertPath.move(to: CGPoint(x: 32, y: 52))
        alertPath.addCurve(to: CGPoint(x: 36, y: 48), controlPoint1: CGPoint(x: 34.21, y: 52), controlPoint2: CGPoint(x: 36, y: 50.21))
        alertPath.addCurve(to: CGPoint(x: 32, y: 44), controlPoint1: CGPoint(x: 36, y: 45.79), controlPoint2: CGPoint(x: 34.21, y: 44))
        alertPath.addCurve(to: CGPoint(x: 28, y: 48), controlPoint1: CGPoint(x: 29.79, y: 44), controlPoint2: CGPoint(x: 28, y: 45.79))
        alertPath.addCurve(to: CGPoint(x: 32, y: 52), controlPoint1: CGPoint(x: 28, y: 50.21), controlPoint2: CGPoint(x: 29.79, y: 52))
        alertPath.close()
        alertPath.usesEvenOddFillRule = true
        color.setFill()
        alertPath.fill()
    }

    @objc dynamic public class func drawIcon_bot_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Service Drawing
        let servicePath = UIBezierPath()
        servicePath.move(to: CGPoint(x: 20.44, y: 23.59))
        servicePath.addCurve(to: CGPoint(x: 7.11, y: 36.78), controlPoint1: CGPoint(x: 13.08, y: 23.59), controlPoint2: CGPoint(x: 7.11, y: 29.49))
        servicePath.addLine(to: CGPoint(x: 7.11, y: 48.21))
        servicePath.addCurve(to: CGPoint(x: 8.89, y: 49.97), controlPoint1: CGPoint(x: 7.11, y: 49.18), controlPoint2: CGPoint(x: 7.91, y: 49.97))
        servicePath.addLine(to: CGPoint(x: 55.11, y: 49.97))
        servicePath.addCurve(to: CGPoint(x: 56.89, y: 48.21), controlPoint1: CGPoint(x: 56.09, y: 49.97), controlPoint2: CGPoint(x: 56.89, y: 49.18))
        servicePath.addLine(to: CGPoint(x: 56.89, y: 36.78))
        servicePath.addCurve(to: CGPoint(x: 43.55, y: 23.59), controlPoint1: CGPoint(x: 56.89, y: 29.49), controlPoint2: CGPoint(x: 50.92, y: 23.59))
        servicePath.addLine(to: CGPoint(x: 20.44, y: 23.59))
        servicePath.close()
        servicePath.move(to: CGPoint(x: 57.67, y: 22.14))
        servicePath.addCurve(to: CGPoint(x: 64, y: 36.78), controlPoint1: CGPoint(x: 61.57, y: 25.83), controlPoint2: CGPoint(x: 64, y: 31.02))
        servicePath.addLine(to: CGPoint(x: 64, y: 48.21))
        servicePath.addCurve(to: CGPoint(x: 55.11, y: 57), controlPoint1: CGPoint(x: 64, y: 53.06), controlPoint2: CGPoint(x: 60.02, y: 57))
        servicePath.addLine(to: CGPoint(x: 8.89, y: 57))
        servicePath.addCurve(to: CGPoint(x: 0, y: 48.21), controlPoint1: CGPoint(x: 3.98, y: 57), controlPoint2: CGPoint(x: 0, y: 53.06))
        servicePath.addLine(to: CGPoint(x: 0, y: 36.78))
        servicePath.addCurve(to: CGPoint(x: 6.33, y: 22.14), controlPoint1: CGPoint(x: 0, y: 31.02), controlPoint2: CGPoint(x: 2.43, y: 25.83))
        servicePath.addLine(to: CGPoint(x: 0.42, y: 11.17))
        servicePath.addCurve(to: CGPoint(x: 1.88, y: 6.41), controlPoint1: CGPoint(x: -0.51, y: 9.46), controlPoint2: CGPoint(x: 0.15, y: 7.33))
        servicePath.addCurve(to: CGPoint(x: 6.69, y: 7.86), controlPoint1: CGPoint(x: 3.62, y: 5.5), controlPoint2: CGPoint(x: 5.77, y: 6.15))
        servicePath.addLine(to: CGPoint(x: 12.28, y: 18.23))
        servicePath.addCurve(to: CGPoint(x: 20.44, y: 16.55), controlPoint1: CGPoint(x: 14.78, y: 17.15), controlPoint2: CGPoint(x: 17.54, y: 16.55))
        servicePath.addLine(to: CGPoint(x: 43.55, y: 16.55))
        servicePath.addCurve(to: CGPoint(x: 51.72, y: 18.23), controlPoint1: CGPoint(x: 46.46, y: 16.55), controlPoint2: CGPoint(x: 49.22, y: 17.15))
        servicePath.addLine(to: CGPoint(x: 57.31, y: 7.86))
        servicePath.addCurve(to: CGPoint(x: 62.12, y: 6.41), controlPoint1: CGPoint(x: 58.23, y: 6.15), controlPoint2: CGPoint(x: 60.38, y: 5.5))
        servicePath.addCurve(to: CGPoint(x: 63.58, y: 11.17), controlPoint1: CGPoint(x: 63.85, y: 7.33), controlPoint2: CGPoint(x: 64.51, y: 9.46))
        servicePath.addLine(to: CGPoint(x: 57.67, y: 22.14))
        servicePath.close()
        servicePath.move(to: CGPoint(x: 21.33, y: 37.66))
        servicePath.addCurve(to: CGPoint(x: 17.78, y: 41.17), controlPoint1: CGPoint(x: 21.33, y: 39.6), controlPoint2: CGPoint(x: 19.74, y: 41.17))
        servicePath.addCurve(to: CGPoint(x: 14.22, y: 37.66), controlPoint1: CGPoint(x: 15.81, y: 41.17), controlPoint2: CGPoint(x: 14.22, y: 39.6))
        servicePath.addCurve(to: CGPoint(x: 17.78, y: 34.14), controlPoint1: CGPoint(x: 14.22, y: 35.71), controlPoint2: CGPoint(x: 15.81, y: 34.14))
        servicePath.addCurve(to: CGPoint(x: 21.33, y: 37.66), controlPoint1: CGPoint(x: 19.74, y: 34.14), controlPoint2: CGPoint(x: 21.33, y: 35.71))
        servicePath.close()
        servicePath.move(to: CGPoint(x: 35.55, y: 37.66))
        servicePath.addCurve(to: CGPoint(x: 32, y: 41.17), controlPoint1: CGPoint(x: 35.55, y: 39.6), controlPoint2: CGPoint(x: 33.96, y: 41.17))
        servicePath.addCurve(to: CGPoint(x: 28.44, y: 37.66), controlPoint1: CGPoint(x: 30.04, y: 41.17), controlPoint2: CGPoint(x: 28.44, y: 39.6))
        servicePath.addCurve(to: CGPoint(x: 32, y: 34.14), controlPoint1: CGPoint(x: 28.44, y: 35.71), controlPoint2: CGPoint(x: 30.04, y: 34.14))
        servicePath.addCurve(to: CGPoint(x: 35.55, y: 37.66), controlPoint1: CGPoint(x: 33.96, y: 34.14), controlPoint2: CGPoint(x: 35.55, y: 35.71))
        servicePath.close()
        servicePath.move(to: CGPoint(x: 46.22, y: 41.17))
        servicePath.addCurve(to: CGPoint(x: 42.67, y: 37.66), controlPoint1: CGPoint(x: 44.26, y: 41.17), controlPoint2: CGPoint(x: 42.67, y: 39.6))
        servicePath.addCurve(to: CGPoint(x: 46.22, y: 34.14), controlPoint1: CGPoint(x: 42.67, y: 35.71), controlPoint2: CGPoint(x: 44.26, y: 34.14))
        servicePath.addCurve(to: CGPoint(x: 49.78, y: 37.66), controlPoint1: CGPoint(x: 48.18, y: 34.14), controlPoint2: CGPoint(x: 49.78, y: 35.71))
        servicePath.addCurve(to: CGPoint(x: 46.22, y: 41.17), controlPoint1: CGPoint(x: 49.78, y: 39.6), controlPoint2: CGPoint(x: 48.18, y: 41.17))
        servicePath.close()
        color.setFill()
        servicePath.fill()
    }

    @objc dynamic public class func drawIcon_longUpArrow_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// DownArrow Drawing
        let downArrowPath = UIBezierPath()
        downArrowPath.move(to: CGPoint(x: 40.25, y: 52.03))
        downArrowPath.addLine(to: CGPoint(x: 42, y: 53.74))
        downArrowPath.addLine(to: CGPoint(x: 32.5, y: 63))
        downArrowPath.addLine(to: CGPoint(x: 23, y: 53.74))
        downArrowPath.addLine(to: CGPoint(x: 24.75, y: 52.03))
        downArrowPath.addLine(to: CGPoint(x: 31.26, y: 58.36))
        downArrowPath.addLine(to: CGPoint(x: 31.26, y: 0))
        downArrowPath.addLine(to: CGPoint(x: 33.74, y: 0))
        downArrowPath.addLine(to: CGPoint(x: 33.74, y: 58.37))
        downArrowPath.addLine(to: CGPoint(x: 40.25, y: 52.03))
        downArrowPath.close()
        downArrowPath.usesEvenOddFillRule = true
        color.setFill()
        downArrowPath.fill()

        downArrowPath.apply(.init(rotationAngle: .pi))
    }

    @objc dynamic public class func drawIcon_createConversation_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Group Drawing
        let groupPath = UIBezierPath()
        groupPath.move(to: CGPoint(x: 40, y: 8))
        groupPath.addCurve(to: CGPoint(x: 32, y: 16), controlPoint1: CGPoint(x: 40, y: 12.42), controlPoint2: CGPoint(x: 36.42, y: 16))
        groupPath.addCurve(to: CGPoint(x: 24, y: 8), controlPoint1: CGPoint(x: 27.58, y: 16), controlPoint2: CGPoint(x: 24, y: 12.42))
        groupPath.addCurve(to: CGPoint(x: 32, y: 0), controlPoint1: CGPoint(x: 24, y: 3.58), controlPoint2: CGPoint(x: 27.58, y: 0))
        groupPath.addCurve(to: CGPoint(x: 40, y: 8), controlPoint1: CGPoint(x: 36.42, y: 0), controlPoint2: CGPoint(x: 40, y: 3.58))
        groupPath.close()
        groupPath.move(to: CGPoint(x: 64, y: 20))
        groupPath.addCurve(to: CGPoint(x: 56, y: 28), controlPoint1: CGPoint(x: 64, y: 24.42), controlPoint2: CGPoint(x: 60.42, y: 28))
        groupPath.addCurve(to: CGPoint(x: 48, y: 20), controlPoint1: CGPoint(x: 51.58, y: 28), controlPoint2: CGPoint(x: 48, y: 24.42))
        groupPath.addCurve(to: CGPoint(x: 56, y: 12), controlPoint1: CGPoint(x: 48, y: 15.58), controlPoint2: CGPoint(x: 51.58, y: 12))
        groupPath.addCurve(to: CGPoint(x: 64, y: 20), controlPoint1: CGPoint(x: 60.42, y: 12), controlPoint2: CGPoint(x: 64, y: 15.58))
        groupPath.close()
        groupPath.move(to: CGPoint(x: 64, y: 44))
        groupPath.addCurve(to: CGPoint(x: 56, y: 52), controlPoint1: CGPoint(x: 64, y: 48.42), controlPoint2: CGPoint(x: 60.42, y: 52))
        groupPath.addCurve(to: CGPoint(x: 48, y: 44), controlPoint1: CGPoint(x: 51.58, y: 52), controlPoint2: CGPoint(x: 48, y: 48.42))
        groupPath.addCurve(to: CGPoint(x: 56, y: 36), controlPoint1: CGPoint(x: 48, y: 39.58), controlPoint2: CGPoint(x: 51.58, y: 36))
        groupPath.addCurve(to: CGPoint(x: 64, y: 44), controlPoint1: CGPoint(x: 60.42, y: 36), controlPoint2: CGPoint(x: 64, y: 39.58))
        groupPath.close()
        groupPath.move(to: CGPoint(x: 40, y: 56))
        groupPath.addCurve(to: CGPoint(x: 32, y: 64), controlPoint1: CGPoint(x: 40, y: 60.42), controlPoint2: CGPoint(x: 36.42, y: 64))
        groupPath.addCurve(to: CGPoint(x: 24, y: 56), controlPoint1: CGPoint(x: 27.58, y: 64), controlPoint2: CGPoint(x: 24, y: 60.42))
        groupPath.addCurve(to: CGPoint(x: 32, y: 48), controlPoint1: CGPoint(x: 24, y: 51.58), controlPoint2: CGPoint(x: 27.58, y: 48))
        groupPath.addCurve(to: CGPoint(x: 40, y: 56), controlPoint1: CGPoint(x: 36.42, y: 48), controlPoint2: CGPoint(x: 40, y: 51.58))
        groupPath.close()
        groupPath.move(to: CGPoint(x: 16, y: 44))
        groupPath.addCurve(to: CGPoint(x: 8, y: 52), controlPoint1: CGPoint(x: 16, y: 48.42), controlPoint2: CGPoint(x: 12.42, y: 52))
        groupPath.addCurve(to: CGPoint(x: 0, y: 44), controlPoint1: CGPoint(x: 3.58, y: 52), controlPoint2: CGPoint(x: 0, y: 48.42))
        groupPath.addCurve(to: CGPoint(x: 8, y: 36), controlPoint1: CGPoint(x: 0, y: 39.58), controlPoint2: CGPoint(x: 3.58, y: 36))
        groupPath.addCurve(to: CGPoint(x: 16, y: 44), controlPoint1: CGPoint(x: 12.42, y: 36), controlPoint2: CGPoint(x: 16, y: 39.58))
        groupPath.close()
        groupPath.move(to: CGPoint(x: 16, y: 20))
        groupPath.addCurve(to: CGPoint(x: 8, y: 28), controlPoint1: CGPoint(x: 16, y: 24.42), controlPoint2: CGPoint(x: 12.42, y: 28))
        groupPath.addCurve(to: CGPoint(x: 0, y: 20), controlPoint1: CGPoint(x: 3.58, y: 28), controlPoint2: CGPoint(x: 0, y: 24.42))
        groupPath.addCurve(to: CGPoint(x: 8, y: 12), controlPoint1: CGPoint(x: 0, y: 15.58), controlPoint2: CGPoint(x: 3.58, y: 12))
        groupPath.addCurve(to: CGPoint(x: 16, y: 20), controlPoint1: CGPoint(x: 12.42, y: 12), controlPoint2: CGPoint(x: 16, y: 15.58))
        groupPath.close()
        color.setFill()
        groupPath.fill()
    }

    @objc dynamic public class func drawIcon_disclosureIndicator_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Arrow Drawing
        let arrowPath = UIBezierPath()
        arrowPath.move(to: CGPoint(x: 13, y: 8.15))
        arrowPath.addLine(to: CGPoint(x: 20.12, y: 1))
        arrowPath.addLine(to: CGPoint(x: 51, y: 32))
        arrowPath.addLine(to: CGPoint(x: 20.12, y: 63))
        arrowPath.addLine(to: CGPoint(x: 13, y: 55.85))
        arrowPath.addLine(to: CGPoint(x: 36.75, y: 32))
        arrowPath.addLine(to: CGPoint(x: 13, y: 8.15))
        arrowPath.close()
        arrowPath.usesEvenOddFillRule = true
        color.setFill()
        arrowPath.fill()
    }

    @objc dynamic public class func drawIcon_guest_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Guest Drawing
        let guestPath = UIBezierPath()
        guestPath.move(to: CGPoint(x: 24, y: 4))
        guestPath.addCurve(to: CGPoint(x: 28, y: 0), controlPoint1: CGPoint(x: 24, y: 1.79), controlPoint2: CGPoint(x: 25.79, y: 0))
        guestPath.addLine(to: CGPoint(x: 36, y: 0))
        guestPath.addCurve(to: CGPoint(x: 40, y: 4), controlPoint1: CGPoint(x: 38.21, y: 0), controlPoint2: CGPoint(x: 40, y: 1.79))
        guestPath.addLine(to: CGPoint(x: 52, y: 4))
        guestPath.addCurve(to: CGPoint(x: 60, y: 12), controlPoint1: CGPoint(x: 56.42, y: 4), controlPoint2: CGPoint(x: 60, y: 7.58))
        guestPath.addLine(to: CGPoint(x: 60, y: 56))
        guestPath.addCurve(to: CGPoint(x: 52, y: 64), controlPoint1: CGPoint(x: 60, y: 60.42), controlPoint2: CGPoint(x: 56.42, y: 64))
        guestPath.addLine(to: CGPoint(x: 12, y: 64))
        guestPath.addCurve(to: CGPoint(x: 4, y: 56), controlPoint1: CGPoint(x: 7.58, y: 64), controlPoint2: CGPoint(x: 4, y: 60.42))
        guestPath.addLine(to: CGPoint(x: 4, y: 12))
        guestPath.addCurve(to: CGPoint(x: 12, y: 4), controlPoint1: CGPoint(x: 4, y: 7.58), controlPoint2: CGPoint(x: 7.58, y: 4))
        guestPath.addLine(to: CGPoint(x: 24, y: 4))
        guestPath.close()
        guestPath.move(to: CGPoint(x: 26, y: 8))
        guestPath.addCurve(to: CGPoint(x: 24, y: 10), controlPoint1: CGPoint(x: 24.9, y: 8), controlPoint2: CGPoint(x: 24, y: 8.9))
        guestPath.addCurve(to: CGPoint(x: 26, y: 12), controlPoint1: CGPoint(x: 24, y: 11.1), controlPoint2: CGPoint(x: 24.9, y: 12))
        guestPath.addLine(to: CGPoint(x: 38, y: 12))
        guestPath.addCurve(to: CGPoint(x: 40, y: 10), controlPoint1: CGPoint(x: 39.1, y: 12), controlPoint2: CGPoint(x: 40, y: 11.1))
        guestPath.addCurve(to: CGPoint(x: 38, y: 8), controlPoint1: CGPoint(x: 40, y: 8.9), controlPoint2: CGPoint(x: 39.1, y: 8))
        guestPath.addLine(to: CGPoint(x: 26, y: 8))
        guestPath.close()
        guestPath.move(to: CGPoint(x: 32, y: 36))
        guestPath.addCurve(to: CGPoint(x: 40, y: 28), controlPoint1: CGPoint(x: 36.42, y: 36), controlPoint2: CGPoint(x: 40, y: 32.42))
        guestPath.addCurve(to: CGPoint(x: 32, y: 20), controlPoint1: CGPoint(x: 40, y: 23.58), controlPoint2: CGPoint(x: 36.42, y: 20))
        guestPath.addCurve(to: CGPoint(x: 24, y: 28), controlPoint1: CGPoint(x: 27.58, y: 20), controlPoint2: CGPoint(x: 24, y: 23.58))
        guestPath.addCurve(to: CGPoint(x: 32, y: 36), controlPoint1: CGPoint(x: 24, y: 32.42), controlPoint2: CGPoint(x: 27.58, y: 36))
        guestPath.close()
        guestPath.move(to: CGPoint(x: 24, y: 40))
        guestPath.addCurve(to: CGPoint(x: 16, y: 48), controlPoint1: CGPoint(x: 19.58, y: 40), controlPoint2: CGPoint(x: 16, y: 43.58))
        guestPath.addLine(to: CGPoint(x: 16, y: 52))
        guestPath.addLine(to: CGPoint(x: 48, y: 52))
        guestPath.addLine(to: CGPoint(x: 48, y: 48))
        guestPath.addCurve(to: CGPoint(x: 40, y: 40), controlPoint1: CGPoint(x: 48, y: 43.58), controlPoint2: CGPoint(x: 44.42, y: 40))
        guestPath.addLine(to: CGPoint(x: 24, y: 40))
        guestPath.close()
        color.setFill()
        guestPath.fill()
    }

    @objc dynamic public class func drawIcon_missedCall_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// MissedCall Drawing
        let missedCallPath = UIBezierPath()
        missedCallPath.move(to: CGPoint(x: 0, y: 50.85))
        missedCallPath.addLine(to: CGPoint(x: 0, y: 50.73))
        missedCallPath.addCurve(to: CGPoint(x: 17.84, y: 17.87), controlPoint1: CGPoint(x: 0.08, y: 42.59), controlPoint2: CGPoint(x: 7.16, y: 28.54))
        missedCallPath.addCurve(to: CGPoint(x: 50.78, y: 0), controlPoint1: CGPoint(x: 28.55, y: 7.17), controlPoint2: CGPoint(x: 42.62, y: 0.08))
        missedCallPath.addCurve(to: CGPoint(x: 63.69, y: 13.51), controlPoint1: CGPoint(x: 56.01, y: -0.05), controlPoint2: CGPoint(x: 61.45, y: 5.78))
        missedCallPath.addCurve(to: CGPoint(x: 64, y: 14.93), controlPoint1: CGPoint(x: 63.91, y: 14.29), controlPoint2: CGPoint(x: 64, y: 14.71))
        missedCallPath.addCurve(to: CGPoint(x: 62.7, y: 15.82), controlPoint1: CGPoint(x: 64, y: 15.21), controlPoint2: CGPoint(x: 63.87, y: 15.32))
        missedCallPath.addCurve(to: CGPoint(x: 53.27, y: 20.12), controlPoint1: CGPoint(x: 60.38, y: 16.86), controlPoint2: CGPoint(x: 57.77, y: 18.05))
        missedCallPath.addCurve(to: CGPoint(x: 47.61, y: 22.7), controlPoint1: CGPoint(x: 50.66, y: 21.33), controlPoint2: CGPoint(x: 48.89, y: 22.13))
        missedCallPath.addCurve(to: CGPoint(x: 45.09, y: 22.36), controlPoint1: CGPoint(x: 46.07, y: 23.38), controlPoint2: CGPoint(x: 46.1, y: 23.38))
        missedCallPath.addLine(to: CGPoint(x: 41.38, y: 18.69))
        missedCallPath.addLine(to: CGPoint(x: 38.86, y: 16.21))
        missedCallPath.addLine(to: CGPoint(x: 35.82, y: 18.02))
        missedCallPath.addCurve(to: CGPoint(x: 25.83, y: 25.81), controlPoint1: CGPoint(x: 32.53, y: 19.98), controlPoint2: CGPoint(x: 29.05, y: 22.59))
        missedCallPath.addCurve(to: CGPoint(x: 18.03, y: 35.83), controlPoint1: CGPoint(x: 22.62, y: 29.01), controlPoint2: CGPoint(x: 20.04, y: 32.47))
        missedCallPath.addLine(to: CGPoint(x: 16.21, y: 38.89))
        missedCallPath.addLine(to: CGPoint(x: 22.36, y: 45.03))
        missedCallPath.addCurve(to: CGPoint(x: 22.9, y: 45.61), controlPoint1: CGPoint(x: 22.64, y: 45.31), controlPoint2: CGPoint(x: 22.77, y: 45.45))
        missedCallPath.addCurve(to: CGPoint(x: 23.18, y: 46.16), controlPoint1: CGPoint(x: 23.11, y: 45.89), controlPoint2: CGPoint(x: 23.18, y: 46.05))
        missedCallPath.addCurve(to: CGPoint(x: 22.67, y: 47.63), controlPoint1: CGPoint(x: 23.18, y: 46.37), controlPoint2: CGPoint(x: 23.08, y: 46.7))
        missedCallPath.addCurve(to: CGPoint(x: 20.11, y: 53.32), controlPoint1: CGPoint(x: 21.99, y: 49.12), controlPoint2: CGPoint(x: 21.04, y: 51.23))
        missedCallPath.addCurve(to: CGPoint(x: 15.87, y: 62.61), controlPoint1: CGPoint(x: 18.06, y: 57.76), controlPoint2: CGPoint(x: 16.87, y: 60.36))
        missedCallPath.addCurve(to: CGPoint(x: 13.51, y: 63.67), controlPoint1: CGPoint(x: 15.15, y: 64.26), controlPoint2: CGPoint(x: 15.3, y: 64.19))
        missedCallPath.addCurve(to: CGPoint(x: 0, y: 50.85), controlPoint1: CGPoint(x: 5.84, y: 61.44), controlPoint2: CGPoint(x: 0, y: 56.04))
        missedCallPath.close()
        color.setFill()
        missedCallPath.fill()
    }

    @objc dynamic public class func drawIcon_timeoutWeek_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 56, y: 16))
        bezier2Path.addLine(to: CGPoint(x: 53.02, y: 27))
        bezier2Path.addLine(to: CGPoint(x: 50.4, y: 27))
        bezier2Path.addLine(to: CGPoint(x: 48.25, y: 19.08))
        bezier2Path.addLine(to: CGPoint(x: 48.08, y: 19.08))
        bezier2Path.addLine(to: CGPoint(x: 45.95, y: 27))
        bezier2Path.addLine(to: CGPoint(x: 43.35, y: 27))
        bezier2Path.addLine(to: CGPoint(x: 40.38, y: 16))
        bezier2Path.addLine(to: CGPoint(x: 42.89, y: 16))
        bezier2Path.addLine(to: CGPoint(x: 44.72, y: 24.21))
        bezier2Path.addLine(to: CGPoint(x: 44.89, y: 24.21))
        bezier2Path.addLine(to: CGPoint(x: 47.01, y: 16))
        bezier2Path.addLine(to: CGPoint(x: 49.39, y: 16))
        bezier2Path.addLine(to: CGPoint(x: 51.52, y: 24.21))
        bezier2Path.addLine(to: CGPoint(x: 51.69, y: 24.21))
        bezier2Path.addLine(to: CGPoint(x: 53.51, y: 16))
        bezier2Path.addLine(to: CGPoint(x: 56, y: 16))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        color.setFill()
        bezier2Path.fill()

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 32, y: 14))
        bezierPath.addCurve(to: CGPoint(x: 14, y: 32), controlPoint1: CGPoint(x: 22.06, y: 14), controlPoint2: CGPoint(x: 14, y: 22.06))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 50), controlPoint1: CGPoint(x: 14, y: 41.94), controlPoint2: CGPoint(x: 22.06, y: 50))
        bezierPath.addCurve(to: CGPoint(x: 50, y: 32), controlPoint1: CGPoint(x: 41.94, y: 50), controlPoint2: CGPoint(x: 50, y: 41.94))
        bezierPath.addLine(to: CGPoint(x: 54, y: 32))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 54), controlPoint1: CGPoint(x: 54, y: 44.15), controlPoint2: CGPoint(x: 44.15, y: 54))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 32), controlPoint1: CGPoint(x: 19.85, y: 54), controlPoint2: CGPoint(x: 10, y: 44.15))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 10), controlPoint1: CGPoint(x: 10, y: 19.85), controlPoint2: CGPoint(x: 19.85, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 35.89, y: 10.34), controlPoint1: CGPoint(x: 33.33, y: 10), controlPoint2: CGPoint(x: 34.63, y: 10.12))
        bezierPath.addCurve(to: CGPoint(x: 35.19, y: 14.28), controlPoint1: CGPoint(x: 35.66, y: 11.65), controlPoint2: CGPoint(x: 35.43, y: 12.97))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 14), controlPoint1: CGPoint(x: 34.16, y: 14.1), controlPoint2: CGPoint(x: 33.09, y: 14))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        color.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawIcon_timeoutMonth_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 55, y: 27))
        bezierPath.addLine(to: CGPoint(x: 52.59, y: 27))
        bezierPath.addLine(to: CGPoint(x: 52.59, y: 16.45))
        bezierPath.addLine(to: CGPoint(x: 52.45, y: 16.45))
        bezierPath.addLine(to: CGPoint(x: 48.45, y: 26.42))
        bezierPath.addLine(to: CGPoint(x: 46.6, y: 26.42))
        bezierPath.addLine(to: CGPoint(x: 42.59, y: 16.45))
        bezierPath.addLine(to: CGPoint(x: 42.45, y: 16.45))
        bezierPath.addLine(to: CGPoint(x: 42.45, y: 27))
        bezierPath.addLine(to: CGPoint(x: 40.04, y: 27))
        bezierPath.addLine(to: CGPoint(x: 40.04, y: 12))
        bezierPath.addLine(to: CGPoint(x: 43.07, y: 12))
        bezierPath.addLine(to: CGPoint(x: 47.43, y: 22.93))
        bezierPath.addLine(to: CGPoint(x: 47.61, y: 22.93))
        bezierPath.addLine(to: CGPoint(x: 51.97, y: 12))
        bezierPath.addLine(to: CGPoint(x: 55, y: 12))
        bezierPath.addLine(to: CGPoint(x: 55, y: 27))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        color.setFill()
        bezierPath.fill()

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 32, y: 14))
        bezier2Path.addCurve(to: CGPoint(x: 14, y: 32), controlPoint1: CGPoint(x: 22.06, y: 14), controlPoint2: CGPoint(x: 14, y: 22.06))
        bezier2Path.addCurve(to: CGPoint(x: 32, y: 50), controlPoint1: CGPoint(x: 14, y: 41.94), controlPoint2: CGPoint(x: 22.06, y: 50))
        bezier2Path.addCurve(to: CGPoint(x: 50, y: 32), controlPoint1: CGPoint(x: 41.94, y: 50), controlPoint2: CGPoint(x: 50, y: 41.94))
        bezier2Path.addLine(to: CGPoint(x: 54, y: 32))
        bezier2Path.addCurve(to: CGPoint(x: 32, y: 54), controlPoint1: CGPoint(x: 54, y: 44.15), controlPoint2: CGPoint(x: 44.15, y: 54))
        bezier2Path.addCurve(to: CGPoint(x: 10, y: 32), controlPoint1: CGPoint(x: 19.85, y: 54), controlPoint2: CGPoint(x: 10, y: 44.15))
        bezier2Path.addCurve(to: CGPoint(x: 32, y: 10), controlPoint1: CGPoint(x: 10, y: 19.85), controlPoint2: CGPoint(x: 19.85, y: 10))
        bezier2Path.addCurve(to: CGPoint(x: 35.89, y: 10.34), controlPoint1: CGPoint(x: 33.33, y: 10), controlPoint2: CGPoint(x: 34.63, y: 10.12))
        bezier2Path.addCurve(to: CGPoint(x: 35.19, y: 14.28), controlPoint1: CGPoint(x: 35.66, y: 11.65), controlPoint2: CGPoint(x: 35.43, y: 12.97))
        bezier2Path.addCurve(to: CGPoint(x: 32, y: 14), controlPoint1: CGPoint(x: 34.16, y: 14.1), controlPoint2: CGPoint(x: 33.09, y: 14))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        color.setFill()
        bezier2Path.fill()
    }

    @objc dynamic public class func drawIcon_timeoutYear_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 32, y: 14))
        bezier2Path.addCurve(to: CGPoint(x: 14, y: 32), controlPoint1: CGPoint(x: 22.06, y: 14), controlPoint2: CGPoint(x: 14, y: 22.06))
        bezier2Path.addCurve(to: CGPoint(x: 32, y: 50), controlPoint1: CGPoint(x: 14, y: 41.94), controlPoint2: CGPoint(x: 22.06, y: 50))
        bezier2Path.addCurve(to: CGPoint(x: 50, y: 32), controlPoint1: CGPoint(x: 41.94, y: 50), controlPoint2: CGPoint(x: 50, y: 41.94))
        bezier2Path.addLine(to: CGPoint(x: 54, y: 32))
        bezier2Path.addCurve(to: CGPoint(x: 32, y: 54), controlPoint1: CGPoint(x: 54, y: 44.15), controlPoint2: CGPoint(x: 44.15, y: 54))
        bezier2Path.addCurve(to: CGPoint(x: 10, y: 32), controlPoint1: CGPoint(x: 19.85, y: 54), controlPoint2: CGPoint(x: 10, y: 44.15))
        bezier2Path.addCurve(to: CGPoint(x: 32, y: 10), controlPoint1: CGPoint(x: 10, y: 19.85), controlPoint2: CGPoint(x: 19.85, y: 10))
        bezier2Path.addCurve(to: CGPoint(x: 35.89, y: 10.34), controlPoint1: CGPoint(x: 33.33, y: 10), controlPoint2: CGPoint(x: 34.63, y: 10.12))
        bezier2Path.addCurve(to: CGPoint(x: 35.19, y: 14.28), controlPoint1: CGPoint(x: 35.66, y: 11.65), controlPoint2: CGPoint(x: 35.43, y: 12.97))
        bezier2Path.addCurve(to: CGPoint(x: 32, y: 14), controlPoint1: CGPoint(x: 34.16, y: 14.1), controlPoint2: CGPoint(x: 33.09, y: 14))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        color.setFill()
        bezier2Path.fill()

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 42.88, y: 30.33))
        bezierPath.addCurve(to: CGPoint(x: 41.71, y: 30.28), controlPoint1: CGPoint(x: 42.7, y: 30.33), controlPoint2: CGPoint(x: 41.9, y: 30.32))
        bezierPath.addLine(to: CGPoint(x: 41.71, y: 28.06))
        bezierPath.addCurve(to: CGPoint(x: 42.52, y: 28.1), controlPoint1: CGPoint(x: 41.88, y: 28.09), controlPoint2: CGPoint(x: 42.32, y: 28.1))
        bezierPath.addCurve(to: CGPoint(x: 44.85, y: 26.56), controlPoint1: CGPoint(x: 43.77, y: 28.1), controlPoint2: CGPoint(x: 44.47, y: 27.67))
        bezierPath.addLine(to: CGPoint(x: 45.01, y: 26.03))
        bezierPath.addLine(to: CGPoint(x: 40.35, y: 14))
        bezierPath.addLine(to: CGPoint(x: 43.59, y: 14))
        bezierPath.addLine(to: CGPoint(x: 46.64, y: 23.35))
        bezierPath.addLine(to: CGPoint(x: 46.84, y: 23.35))
        bezierPath.addLine(to: CGPoint(x: 49.88, y: 14))
        bezierPath.addLine(to: CGPoint(x: 53, y: 14))
        bezierPath.addLine(to: CGPoint(x: 48.3, y: 26.36))
        bezierPath.addCurve(to: CGPoint(x: 42.88, y: 30.33), controlPoint1: CGPoint(x: 47.19, y: 29.34), controlPoint2: CGPoint(x: 45.79, y: 30.33))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        color.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawIcon_browser_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Browser Drawing
        let browserPath = UIBezierPath()
        browserPath.move(to: CGPoint(x: 32, y: 0))
        browserPath.addCurve(to: CGPoint(x: 64, y: 32), controlPoint1: CGPoint(x: 49.65, y: 0), controlPoint2: CGPoint(x: 64, y: 14.35))
        browserPath.addCurve(to: CGPoint(x: 32, y: 64), controlPoint1: CGPoint(x: 64, y: 49.64), controlPoint2: CGPoint(x: 49.65, y: 64))
        browserPath.addCurve(to: CGPoint(x: 0, y: 32), controlPoint1: CGPoint(x: 14.36, y: 64), controlPoint2: CGPoint(x: 0, y: 49.64))
        browserPath.addCurve(to: CGPoint(x: 32, y: 0), controlPoint1: CGPoint(x: 0, y: 14.35), controlPoint2: CGPoint(x: 14.36, y: 0))
        browserPath.close()
        browserPath.move(to: CGPoint(x: 46.97, y: 14.28))
        browserPath.addLine(to: CGPoint(x: 26.96, y: 26.27))
        browserPath.addCurve(to: CGPoint(x: 26.27, y: 26.96), controlPoint1: CGPoint(x: 26.67, y: 26.44), controlPoint2: CGPoint(x: 26.44, y: 26.67))
        browserPath.addLine(to: CGPoint(x: 14.28, y: 46.97))
        browserPath.addCurve(to: CGPoint(x: 14.59, y: 49.41), controlPoint1: CGPoint(x: 13.81, y: 47.76), controlPoint2: CGPoint(x: 13.94, y: 48.77))
        browserPath.addCurve(to: CGPoint(x: 16, y: 50), controlPoint1: CGPoint(x: 14.97, y: 49.8), controlPoint2: CGPoint(x: 15.48, y: 50))
        browserPath.addCurve(to: CGPoint(x: 17.03, y: 49.72), controlPoint1: CGPoint(x: 16.35, y: 50), controlPoint2: CGPoint(x: 16.71, y: 49.91))
        browserPath.addLine(to: CGPoint(x: 37.04, y: 37.73))
        browserPath.addCurve(to: CGPoint(x: 37.73, y: 37.04), controlPoint1: CGPoint(x: 37.33, y: 37.56), controlPoint2: CGPoint(x: 37.56, y: 37.33))
        browserPath.addLine(to: CGPoint(x: 49.72, y: 17.03))
        browserPath.addCurve(to: CGPoint(x: 49.41, y: 14.59), controlPoint1: CGPoint(x: 50.19, y: 16.24), controlPoint2: CGPoint(x: 50.06, y: 15.23))
        browserPath.addCurve(to: CGPoint(x: 46.97, y: 14.28), controlPoint1: CGPoint(x: 48.77, y: 13.94), controlPoint2: CGPoint(x: 47.76, y: 13.81))
        browserPath.close()
        browserPath.usesEvenOddFillRule = true
        color.setFill()
        browserPath.fill()
    }

    @objc dynamic public class func drawIcon_networkCondition_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Group 2

        //// Network Drawing
        let networkPath = UIBezierPath()
        networkPath.move(to: CGPoint(x: 10.24, y: 8.55))
        networkPath.addCurve(to: CGPoint(x: 15.9, y: 8.77), controlPoint1: CGPoint(x: 11.86, y: 7.04), controlPoint2: CGPoint(x: 14.4, y: 7.14))
        networkPath.addCurve(to: CGPoint(x: 15.68, y: 14.47), controlPoint1: CGPoint(x: 17.4, y: 10.4), controlPoint2: CGPoint(x: 17.3, y: 12.95))
        networkPath.addCurve(to: CGPoint(x: 8, y: 32.21), controlPoint1: CGPoint(x: 10.81, y: 19.02), controlPoint2: CGPoint(x: 8, y: 25.38))
        networkPath.addCurve(to: CGPoint(x: 16.1, y: 50.33), controlPoint1: CGPoint(x: 8, y: 39.23), controlPoint2: CGPoint(x: 10.98, y: 45.77))
        networkPath.addCurve(to: CGPoint(x: 16.45, y: 56.02), controlPoint1: CGPoint(x: 17.76, y: 51.81), controlPoint2: CGPoint(x: 17.91, y: 54.36))
        networkPath.addCurve(to: CGPoint(x: 10.8, y: 56.37), controlPoint1: CGPoint(x: 14.99, y: 57.69), controlPoint2: CGPoint(x: 12.46, y: 57.85))
        networkPath.addCurve(to: CGPoint(x: 0, y: 32.21), controlPoint1: CGPoint(x: 3.98, y: 50.29), controlPoint2: CGPoint(x: 0, y: 41.57))
        networkPath.addCurve(to: CGPoint(x: 10.24, y: 8.55), controlPoint1: CGPoint(x: 0, y: 23.11), controlPoint2: CGPoint(x: 3.76, y: 14.62))
        networkPath.close()
        networkPath.move(to: CGPoint(x: 53, y: 56.54))
        networkPath.addCurve(to: CGPoint(x: 47.36, y: 56.15), controlPoint1: CGPoint(x: 51.34, y: 58), controlPoint2: CGPoint(x: 48.81, y: 57.83))
        networkPath.addCurve(to: CGPoint(x: 47.75, y: 50.46), controlPoint1: CGPoint(x: 45.91, y: 54.47), controlPoint2: CGPoint(x: 46.08, y: 51.92))
        networkPath.addCurve(to: CGPoint(x: 56, y: 32.21), controlPoint1: CGPoint(x: 52.96, y: 45.89), controlPoint2: CGPoint(x: 56, y: 39.3))
        networkPath.addCurve(to: CGPoint(x: 47.87, y: 14.06), controlPoint1: CGPoint(x: 56, y: 25.17), controlPoint2: CGPoint(x: 53, y: 18.62))
        networkPath.addCurve(to: CGPoint(x: 47.51, y: 8.37), controlPoint1: CGPoint(x: 46.21, y: 12.58), controlPoint2: CGPoint(x: 46.05, y: 10.04))
        networkPath.addCurve(to: CGPoint(x: 53.16, y: 8.01), controlPoint1: CGPoint(x: 48.97, y: 6.7), controlPoint2: CGPoint(x: 51.5, y: 6.54))
        networkPath.addCurve(to: CGPoint(x: 64, y: 32.21), controlPoint1: CGPoint(x: 60, y: 14.09), controlPoint2: CGPoint(x: 64, y: 22.83))
        networkPath.addCurve(to: CGPoint(x: 53, y: 56.54), controlPoint1: CGPoint(x: 64, y: 41.66), controlPoint2: CGPoint(x: 59.94, y: 50.46))
        networkPath.close()
        networkPath.move(to: CGPoint(x: 21.36, y: 20.16))
        networkPath.addCurve(to: CGPoint(x: 27.01, y: 20.49), controlPoint1: CGPoint(x: 23.01, y: 18.68), controlPoint2: CGPoint(x: 25.54, y: 18.83))
        networkPath.addCurve(to: CGPoint(x: 26.68, y: 26.18), controlPoint1: CGPoint(x: 28.48, y: 22.15), controlPoint2: CGPoint(x: 28.33, y: 24.7))
        networkPath.addCurve(to: CGPoint(x: 24, y: 32.21), controlPoint1: CGPoint(x: 24.99, y: 27.71), controlPoint2: CGPoint(x: 24, y: 29.87))
        networkPath.addCurve(to: CGPoint(x: 26.68, y: 38.23), controlPoint1: CGPoint(x: 24, y: 34.54), controlPoint2: CGPoint(x: 24.99, y: 36.71))
        networkPath.addCurve(to: CGPoint(x: 27.01, y: 43.93), controlPoint1: CGPoint(x: 28.33, y: 39.71), controlPoint2: CGPoint(x: 28.48, y: 42.26))
        networkPath.addCurve(to: CGPoint(x: 21.37, y: 44.26), controlPoint1: CGPoint(x: 25.54, y: 45.59), controlPoint2: CGPoint(x: 23.02, y: 45.74))
        networkPath.addCurve(to: CGPoint(x: 16, y: 32.21), controlPoint1: CGPoint(x: 17.98, y: 41.22), controlPoint2: CGPoint(x: 16, y: 36.87))
        networkPath.addCurve(to: CGPoint(x: 21.36, y: 20.16), controlPoint1: CGPoint(x: 16, y: 27.55), controlPoint2: CGPoint(x: 17.98, y: 23.2))
        networkPath.close()
        networkPath.move(to: CGPoint(x: 42.7, y: 44.2))
        networkPath.addCurve(to: CGPoint(x: 37.05, y: 43.9), controlPoint1: CGPoint(x: 41.06, y: 45.69), controlPoint2: CGPoint(x: 38.53, y: 45.55))
        networkPath.addCurve(to: CGPoint(x: 37.35, y: 38.2), controlPoint1: CGPoint(x: 35.57, y: 42.24), controlPoint2: CGPoint(x: 35.71, y: 39.69))
        networkPath.addCurve(to: CGPoint(x: 40, y: 32.21), controlPoint1: CGPoint(x: 39.03, y: 36.68), controlPoint2: CGPoint(x: 40, y: 34.53))
        networkPath.addCurve(to: CGPoint(x: 37.32, y: 26.19), controlPoint1: CGPoint(x: 40, y: 29.87), controlPoint2: CGPoint(x: 39.02, y: 27.71))
        networkPath.addCurve(to: CGPoint(x: 37, y: 20.49), controlPoint1: CGPoint(x: 35.67, y: 24.7), controlPoint2: CGPoint(x: 35.53, y: 22.16))
        networkPath.addCurve(to: CGPoint(x: 42.64, y: 20.17), controlPoint1: CGPoint(x: 38.47, y: 18.83), controlPoint2: CGPoint(x: 40.99, y: 18.68))
        networkPath.addCurve(to: CGPoint(x: 48, y: 32.21), controlPoint1: CGPoint(x: 46.03, y: 23.2), controlPoint2: CGPoint(x: 48, y: 27.55))
        networkPath.addCurve(to: CGPoint(x: 42.7, y: 44.2), controlPoint1: CGPoint(x: 48, y: 36.84), controlPoint2: CGPoint(x: 46.05, y: 41.16))
        networkPath.close()
        color.setFill()
        networkPath.fill()
    }

    @objc dynamic public class func drawIcon_mention_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Mention Drawing
        let mentionPath = UIBezierPath()
        mentionPath.move(to: CGPoint(x: 32.19, y: 24.81))
        mentionPath.addCurve(to: CGPoint(x: 26.52, y: 32.95), controlPoint1: CGPoint(x: 28.63, y: 24.81), controlPoint2: CGPoint(x: 26.52, y: 27.86))
        mentionPath.addCurve(to: CGPoint(x: 32.19, y: 41.09), controlPoint1: CGPoint(x: 26.52, y: 38.04), controlPoint2: CGPoint(x: 28.63, y: 41.09))
        mentionPath.addCurve(to: CGPoint(x: 37.97, y: 32.95), controlPoint1: CGPoint(x: 35.78, y: 41.09), controlPoint2: CGPoint(x: 37.97, y: 38))
        mentionPath.addCurve(to: CGPoint(x: 32.19, y: 24.81), controlPoint1: CGPoint(x: 37.97, y: 27.9), controlPoint2: CGPoint(x: 35.74, y: 24.81))
        mentionPath.close()
        mentionPath.move(to: CGPoint(x: 33.44, y: 0))
        mentionPath.addCurve(to: CGPoint(x: 64, y: 29.2), controlPoint1: CGPoint(x: 52.27, y: 0), controlPoint2: CGPoint(x: 64, y: 11.83))
        mentionPath.addCurve(to: CGPoint(x: 49.34, y: 49.15), controlPoint1: CGPoint(x: 64, y: 41.53), controlPoint2: CGPoint(x: 59.06, y: 49.15))
        mentionPath.addCurve(to: CGPoint(x: 39.65, y: 43.24), controlPoint1: CGPoint(x: 44.3, y: 49.15), controlPoint2: CGPoint(x: 40.7, y: 46.96))
        mentionPath.addLine(to: CGPoint(x: 38.91, y: 43.24))
        mentionPath.addCurve(to: CGPoint(x: 29.77, y: 49.19), controlPoint1: CGPoint(x: 37.3, y: 47.19), controlPoint2: CGPoint(x: 34.26, y: 49.19))
        mentionPath.addCurve(to: CGPoint(x: 16.25, y: 32.68), controlPoint1: CGPoint(x: 21.64, y: 49.19), controlPoint2: CGPoint(x: 16.25, y: 42.61))
        mentionPath.addCurve(to: CGPoint(x: 29.18, y: 16.75), controlPoint1: CGPoint(x: 16.25, y: 23.17), controlPoint2: CGPoint(x: 21.45, y: 16.75))
        mentionPath.addCurve(to: CGPoint(x: 37.35, y: 20.65), controlPoint1: CGPoint(x: 32.69, y: 16.75), controlPoint2: CGPoint(x: 35.57, y: 18.16))
        mentionPath.addCurve(to: CGPoint(x: 38.11, y: 21.98), controlPoint1: CGPoint(x: 37.55, y: 20.94), controlPoint2: CGPoint(x: 37.81, y: 21.38))
        mentionPath.addLine(to: CGPoint(x: 38.11, y: 21.98))
        mentionPath.addCurve(to: CGPoint(x: 38.65, y: 22.31), controlPoint1: CGPoint(x: 38.22, y: 22.18), controlPoint2: CGPoint(x: 38.43, y: 22.31))
        mentionPath.addLine(to: CGPoint(x: 38.65, y: 22.31))
        mentionPath.addCurve(to: CGPoint(x: 39.02, y: 21.93), controlPoint1: CGPoint(x: 38.86, y: 22.31), controlPoint2: CGPoint(x: 39.02, y: 22.14))
        mentionPath.addLine(to: CGPoint(x: 39.02, y: 21.85))
        mentionPath.addLine(to: CGPoint(x: 39.02, y: 21.69))
        mentionPath.addCurve(to: CGPoint(x: 43.02, y: 17.69), controlPoint1: CGPoint(x: 39.02, y: 19.48), controlPoint2: CGPoint(x: 40.81, y: 17.69))
        mentionPath.addLine(to: CGPoint(x: 44.01, y: 17.69))
        mentionPath.addCurve(to: CGPoint(x: 48.01, y: 21.69), controlPoint1: CGPoint(x: 46.22, y: 17.69), controlPoint2: CGPoint(x: 48.01, y: 19.48))
        mentionPath.addLine(to: CGPoint(x: 48.01, y: 37.57))
        mentionPath.addCurve(to: CGPoint(x: 51.37, y: 41.99), controlPoint1: CGPoint(x: 48.01, y: 40.35), controlPoint2: CGPoint(x: 49.26, y: 41.99))
        mentionPath.addCurve(to: CGPoint(x: 56.41, y: 30.08), controlPoint1: CGPoint(x: 54.8, y: 41.99), controlPoint2: CGPoint(x: 56.41, y: 37.36))
        mentionPath.addCurve(to: CGPoint(x: 33.32, y: 6.89), controlPoint1: CGPoint(x: 56.41, y: 15.92), controlPoint2: CGPoint(x: 47.73, y: 6.89))
        mentionPath.addCurve(to: CGPoint(x: 8.05, y: 32.83), controlPoint1: CGPoint(x: 18.28, y: 6.89), controlPoint2: CGPoint(x: 8.05, y: 17.45))
        mentionPath.addCurve(to: CGPoint(x: 35.1, y: 56.96), controlPoint1: CGPoint(x: 8.05, y: 48.41), controlPoint2: CGPoint(x: 18.54, y: 56.96))
        mentionPath.addCurve(to: CGPoint(x: 39.96, y: 56.69), controlPoint1: CGPoint(x: 36.76, y: 56.96), controlPoint2: CGPoint(x: 38.44, y: 56.86))
        mentionPath.addCurve(to: CGPoint(x: 41.02, y: 56.5), controlPoint1: CGPoint(x: 39.99, y: 56.69), controlPoint2: CGPoint(x: 40.34, y: 56.62))
        mentionPath.addLine(to: CGPoint(x: 41.02, y: 56.5))
        mentionPath.addCurve(to: CGPoint(x: 44.39, y: 58.82), controlPoint1: CGPoint(x: 42.59, y: 56.21), controlPoint2: CGPoint(x: 44.1, y: 57.25))
        mentionPath.addCurve(to: CGPoint(x: 44.44, y: 59.34), controlPoint1: CGPoint(x: 44.42, y: 58.99), controlPoint2: CGPoint(x: 44.44, y: 59.17))
        mentionPath.addLine(to: CGPoint(x: 44.44, y: 59.34))
        mentionPath.addCurve(to: CGPoint(x: 40.87, y: 63.53), controlPoint1: CGPoint(x: 44.44, y: 61.43), controlPoint2: CGPoint(x: 42.93, y: 63.2))
        mentionPath.addCurve(to: CGPoint(x: 39.99, y: 63.65), controlPoint1: CGPoint(x: 40.55, y: 63.58), controlPoint2: CGPoint(x: 40.26, y: 63.62))
        mentionPath.addCurve(to: CGPoint(x: 34.24, y: 64), controlPoint1: CGPoint(x: 39.79, y: 63.68), controlPoint2: CGPoint(x: 35.99, y: 64))
        mentionPath.addCurve(to: CGPoint(x: 0, y: 32.64), controlPoint1: CGPoint(x: 13.81, y: 64), controlPoint2: CGPoint(x: 0, y: 52.16))
        mentionPath.addCurve(to: CGPoint(x: 33.44, y: 0), controlPoint1: CGPoint(x: 0, y: 13.34), controlPoint2: CGPoint(x: 13.67, y: 0))
        mentionPath.close()
        mentionPath.usesEvenOddFillRule = true
        color.setFill()
        mentionPath.fill()
    }

    @objc dynamic public class func drawIcon_alerts_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Alerts
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 32.01, y: 0))
        clipPath.addCurve(to: CGPoint(x: 48.02, y: 12.92), controlPoint1: CGPoint(x: 40.18, y: 0), controlPoint2: CGPoint(x: 46.91, y: 5.64))
        clipPath.addCurve(to: CGPoint(x: 52.03, y: 29.99), controlPoint1: CGPoint(x: 48.02, y: 12.92), controlPoint2: CGPoint(x: 50.34, y: 25.11))
        clipPath.addCurve(to: CGPoint(x: 56.65, y: 40.72), controlPoint1: CGPoint(x: 53.45, y: 34.09), controlPoint2: CGPoint(x: 56.65, y: 40.72))
        clipPath.addCurve(to: CGPoint(x: 52, y: 48), controlPoint1: CGPoint(x: 58.49, y: 44.72), controlPoint2: CGPoint(x: 56.44, y: 48))
        clipPath.addLine(to: CGPoint(x: 12.02, y: 48))
        clipPath.addCurve(to: CGPoint(x: 7.34, y: 40.71), controlPoint1: CGPoint(x: 7.58, y: 48), controlPoint2: CGPoint(x: 5.49, y: 44.73))
        clipPath.addCurve(to: CGPoint(x: 12, y: 29.99), controlPoint1: CGPoint(x: 7.34, y: 40.71), controlPoint2: CGPoint(x: 10.59, y: 33.8))
        clipPath.addCurve(to: CGPoint(x: 16.13, y: 12.92), controlPoint1: CGPoint(x: 13.85, y: 24.99), controlPoint2: CGPoint(x: 16.13, y: 12.92))
        clipPath.addCurve(to: CGPoint(x: 32.01, y: 0), controlPoint1: CGPoint(x: 17.11, y: 5.64), controlPoint2: CGPoint(x: 23.85, y: 0))
        clipPath.close()
        clipPath.move(to: CGPoint(x: 40.02, y: 56))
        clipPath.addCurve(to: CGPoint(x: 32.01, y: 64), controlPoint1: CGPoint(x: 40.02, y: 60.42), controlPoint2: CGPoint(x: 36.43, y: 64))
        clipPath.addCurve(to: CGPoint(x: 24.01, y: 56), controlPoint1: CGPoint(x: 27.59, y: 64), controlPoint2: CGPoint(x: 24.01, y: 60.42))
        clipPath.addLine(to: CGPoint(x: 40.02, y: 56))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: -0, y: 0, width: 64, height: 64))
        color.setFill()
        rectanglePath.fill()

        context.endTransparencyLayer()
        context.restoreGState()
    }

    @objc dynamic public class func drawIcon_reply_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Reply Drawing
        let replyPath = UIBezierPath()
        replyPath.move(to: CGPoint(x: 13.38, y: 18))
        replyPath.addLine(to: CGPoint(x: 41.71, y: 18))
        replyPath.addCurve(to: CGPoint(x: 64, y: 40.36), controlPoint1: CGPoint(x: 54.02, y: 18), controlPoint2: CGPoint(x: 64, y: 28.4))
        replyPath.addCurve(to: CGPoint(x: 41.71, y: 62), controlPoint1: CGPoint(x: 64, y: 52.31), controlPoint2: CGPoint(x: 54.02, y: 62))
        replyPath.addLine(to: CGPoint(x: 27.93, y: 62))
        replyPath.addCurve(to: CGPoint(x: 24, y: 58.07), controlPoint1: CGPoint(x: 25.76, y: 62), controlPoint2: CGPoint(x: 24, y: 60.24))
        replyPath.addCurve(to: CGPoint(x: 27.93, y: 54.13), controlPoint1: CGPoint(x: 24, y: 55.89), controlPoint2: CGPoint(x: 25.76, y: 54.13))
        replyPath.addLine(to: CGPoint(x: 41.71, y: 54.13))
        replyPath.addCurve(to: CGPoint(x: 56, y: 40.36), controlPoint1: CGPoint(x: 49.92, y: 54.13), controlPoint2: CGPoint(x: 56, y: 48.33))
        replyPath.addCurve(to: CGPoint(x: 41.71, y: 25.88), controlPoint1: CGPoint(x: 56, y: 32.39), controlPoint2: CGPoint(x: 49.92, y: 25.88))
        replyPath.addLine(to: CGPoint(x: 13.28, y: 25.88))
        replyPath.addLine(to: CGPoint(x: 23.06, y: 35.5))
        replyPath.addCurve(to: CGPoint(x: 23.1, y: 35.54), controlPoint1: CGPoint(x: 23.08, y: 35.51), controlPoint2: CGPoint(x: 23.09, y: 35.53))
        replyPath.addCurve(to: CGPoint(x: 23.06, y: 40.89), controlPoint1: CGPoint(x: 24.57, y: 37.03), controlPoint2: CGPoint(x: 24.55, y: 39.42))
        replyPath.addCurve(to: CGPoint(x: 17.58, y: 40.89), controlPoint1: CGPoint(x: 21.54, y: 42.38), controlPoint2: CGPoint(x: 19.1, y: 42.38))
        replyPath.addLine(to: CGPoint(x: 1.15, y: 24.73))
        replyPath.addCurve(to: CGPoint(x: 1.11, y: 24.68), controlPoint1: CGPoint(x: 1.14, y: 24.71), controlPoint2: CGPoint(x: 1.13, y: 24.7))
        replyPath.addCurve(to: CGPoint(x: 0.36, y: 23.59), controlPoint1: CGPoint(x: 0.79, y: 24.36), controlPoint2: CGPoint(x: 0.54, y: 23.99))
        replyPath.addCurve(to: CGPoint(x: 1.09, y: 19.33), controlPoint1: CGPoint(x: -0.3, y: 22.2), controlPoint2: CGPoint(x: -0.06, y: 20.49))
        replyPath.addCurve(to: CGPoint(x: 1.13, y: 19.28), controlPoint1: CGPoint(x: 1.1, y: 19.31), controlPoint2: CGPoint(x: 1.11, y: 19.3))
        replyPath.addLine(to: CGPoint(x: 17.56, y: 3.12))
        replyPath.addCurve(to: CGPoint(x: 23.03, y: 3.12), controlPoint1: CGPoint(x: 19.08, y: 1.63), controlPoint2: CGPoint(x: 21.51, y: 1.63))
        replyPath.addCurve(to: CGPoint(x: 23.08, y: 8.46), controlPoint1: CGPoint(x: 24.52, y: 4.58), controlPoint2: CGPoint(x: 24.54, y: 6.98))
        replyPath.addCurve(to: CGPoint(x: 23.03, y: 8.51), controlPoint1: CGPoint(x: 23.06, y: 8.48), controlPoint2: CGPoint(x: 23.05, y: 8.49))
        replyPath.addLine(to: CGPoint(x: 13.38, y: 18))
        replyPath.close()
        color.setFill()
        replyPath.fill()
    }

    @objc dynamic public class func drawIcon_externalLink_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 64, y: 48.03))
        bezierPath.addLine(to: CGPoint(x: 64, y: 0))
        bezierPath.addLine(to: CGPoint(x: 15.99, y: 0))
        bezierPath.addLine(to: CGPoint(x: 15.99, y: 8.01))
        bezierPath.addLine(to: CGPoint(x: 50.36, y: 8.01))
        bezierPath.addLine(to: CGPoint(x: 0, y: 58.32))
        bezierPath.addLine(to: CGPoint(x: 5.66, y: 63.99))
        bezierPath.addLine(to: CGPoint(x: 56, y: 13.68))
        bezierPath.addLine(to: CGPoint(x: 56, y: 48.03))
        bezierPath.addLine(to: CGPoint(x: 64, y: 48.03))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        color.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawIcon_forwardArrowWithDot_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Unread Drawing
        let unreadPath = UIBezierPath()
        unreadPath.move(to: CGPoint(x: 48, y: 8))
        unreadPath.addCurve(to: CGPoint(x: 56, y: 16), controlPoint1: CGPoint(x: 48, y: 12.42), controlPoint2: CGPoint(x: 51.58, y: 16))
        unreadPath.addCurve(to: CGPoint(x: 64, y: 8), controlPoint1: CGPoint(x: 60.42, y: 16), controlPoint2: CGPoint(x: 64, y: 12.42))
        unreadPath.addCurve(to: CGPoint(x: 56, y: 0), controlPoint1: CGPoint(x: 64, y: 3.58), controlPoint2: CGPoint(x: 60.42, y: 0))
        unreadPath.addCurve(to: CGPoint(x: 48, y: 8), controlPoint1: CGPoint(x: 51.58, y: 0), controlPoint2: CGPoint(x: 48, y: 3.58))
        unreadPath.close()
        unreadPath.move(to: CGPoint(x: 44.22, y: 36.27))
        unreadPath.addLine(to: CGPoint(x: 24.01, y: 56.22))
        unreadPath.addLine(to: CGPoint(x: 29.47, y: 61.6))
        unreadPath.addLine(to: CGPoint(x: 59, y: 32.45))
        unreadPath.addLine(to: CGPoint(x: 29.47, y: 3.29))
        unreadPath.addLine(to: CGPoint(x: 24.01, y: 8.68))
        unreadPath.addLine(to: CGPoint(x: 44.25, y: 28.65))
        unreadPath.addLine(to: CGPoint(x: 5, y: 28.65))
        unreadPath.addLine(to: CGPoint(x: 5, y: 36.27))
        unreadPath.addLine(to: CGPoint(x: 44.22, y: 36.27))
        unreadPath.addLine(to: CGPoint(x: 44.22, y: 36.27))
        unreadPath.close()
        color.setFill()
        unreadPath.fill()
    }

    @objc dynamic public class func drawIcon_legalholdpending_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Bezier Drawing
        context.saveGState()
        context.setAlpha(0.24)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 32, y: 64))
        bezierPath.addCurve(to: CGPoint(x: 64, y: 32), controlPoint1: CGPoint(x: 49.67, y: 64), controlPoint2: CGPoint(x: 64, y: 49.67))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 0), controlPoint1: CGPoint(x: 64, y: 14.33), controlPoint2: CGPoint(x: 49.67, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 32), controlPoint1: CGPoint(x: 14.33, y: 0), controlPoint2: CGPoint(x: 0, y: 14.33))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 64), controlPoint1: CGPoint(x: 0, y: 49.67), controlPoint2: CGPoint(x: 14.33, y: 64))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        color.setFill()
        bezierPath.fill()

        context.restoreGState()

        //// Pending Drawing
        let pendingPath = UIBezierPath()
        pendingPath.move(to: CGPoint(x: 32, y: 44))
        pendingPath.addLine(to: CGPoint(x: 32, y: 44))
        pendingPath.addCurve(to: CGPoint(x: 44, y: 32), controlPoint1: CGPoint(x: 38.63, y: 44), controlPoint2: CGPoint(x: 44, y: 38.63))
        pendingPath.addCurve(to: CGPoint(x: 32, y: 20), controlPoint1: CGPoint(x: 44, y: 25.37), controlPoint2: CGPoint(x: 38.63, y: 20))
        pendingPath.addCurve(to: CGPoint(x: 20, y: 32), controlPoint1: CGPoint(x: 25.37, y: 20), controlPoint2: CGPoint(x: 20, y: 25.37))
        pendingPath.addCurve(to: CGPoint(x: 32, y: 44), controlPoint1: CGPoint(x: 20, y: 38.63), controlPoint2: CGPoint(x: 25.37, y: 44))
        pendingPath.addLine(to: CGPoint(x: 32, y: 44))
        pendingPath.addLine(to: CGPoint(x: 32, y: 44))
        pendingPath.close()
        pendingPath.move(to: CGPoint(x: 32, y: 48))
        pendingPath.addLine(to: CGPoint(x: 32, y: 48))
        pendingPath.addCurve(to: CGPoint(x: 16, y: 32), controlPoint1: CGPoint(x: 23.16, y: 48), controlPoint2: CGPoint(x: 16, y: 40.84))
        pendingPath.addCurve(to: CGPoint(x: 32, y: 16), controlPoint1: CGPoint(x: 16, y: 23.16), controlPoint2: CGPoint(x: 23.16, y: 16))
        pendingPath.addCurve(to: CGPoint(x: 48, y: 32), controlPoint1: CGPoint(x: 40.84, y: 16), controlPoint2: CGPoint(x: 48, y: 23.16))
        pendingPath.addCurve(to: CGPoint(x: 32, y: 48), controlPoint1: CGPoint(x: 48, y: 40.84), controlPoint2: CGPoint(x: 40.84, y: 48))
        pendingPath.addLine(to: CGPoint(x: 32, y: 48))
        pendingPath.addLine(to: CGPoint(x: 32, y: 48))
        pendingPath.close()
        pendingPath.move(to: CGPoint(x: 34, y: 22))
        pendingPath.addCurve(to: CGPoint(x: 34, y: 30), controlPoint1: CGPoint(x: 34, y: 22), controlPoint2: CGPoint(x: 34, y: 26.51))
        pendingPath.addLine(to: CGPoint(x: 40, y: 30))
        pendingPath.addLine(to: CGPoint(x: 40, y: 34))
        pendingPath.addLine(to: CGPoint(x: 30, y: 34))
        pendingPath.addLine(to: CGPoint(x: 30, y: 30))
        pendingPath.addCurve(to: CGPoint(x: 30, y: 22), controlPoint1: CGPoint(x: 30, y: 26.51), controlPoint2: CGPoint(x: 30, y: 22))
        pendingPath.addLine(to: CGPoint(x: 34, y: 22))
        pendingPath.addLine(to: CGPoint(x: 34, y: 22))
        pendingPath.close()
        UIColor.white.setFill()
        pendingPath.fill()
    }

    @objc dynamic public class func drawIcon_legalholdactive_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Bezier Drawing
        context.saveGState()
        context.setAlpha(0.40)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 32, y: 64))
        bezierPath.addCurve(to: CGPoint(x: 64, y: 32), controlPoint1: CGPoint(x: 49.67, y: 64), controlPoint2: CGPoint(x: 64, y: 49.67))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 0), controlPoint1: CGPoint(x: 64, y: 14.33), controlPoint2: CGPoint(x: 49.67, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 32), controlPoint1: CGPoint(x: 14.33, y: 0), controlPoint2: CGPoint(x: 0, y: 14.33))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 64), controlPoint1: CGPoint(x: 0, y: 49.67), controlPoint2: CGPoint(x: 14.33, y: 64))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        color.setFill()
        bezierPath.fill()

        context.restoreGState()

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 32, y: 16))
        bezier2Path.addCurve(to: CGPoint(x: 48, y: 32), controlPoint1: CGPoint(x: 40.84, y: 16), controlPoint2: CGPoint(x: 48, y: 23.16))
        bezier2Path.addCurve(to: CGPoint(x: 32, y: 48), controlPoint1: CGPoint(x: 48, y: 40.84), controlPoint2: CGPoint(x: 40.84, y: 48))
        bezier2Path.addCurve(to: CGPoint(x: 16, y: 32), controlPoint1: CGPoint(x: 23.16, y: 48), controlPoint2: CGPoint(x: 16, y: 40.84))
        bezier2Path.addCurve(to: CGPoint(x: 32, y: 16), controlPoint1: CGPoint(x: 16, y: 23.16), controlPoint2: CGPoint(x: 23.16, y: 16))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        color.setFill()
        bezier2Path.fill()
    }

    @objc dynamic public class func drawIcon_folderList_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 59.72, y: 17.36))
        bezierPath.addCurve(to: CGPoint(x: 19.48, y: 17.28), controlPoint1: CGPoint(x: 58.04, y: 17.36), controlPoint2: CGPoint(x: 20.8, y: 17.28))
        bezierPath.addCurve(to: CGPoint(x: 11.56, y: 27.64), controlPoint1: CGPoint(x: 13.52, y: 17.28), controlPoint2: CGPoint(x: 11.56, y: 24.46))
        bezierPath.addCurve(to: CGPoint(x: 8, y: 58.76), controlPoint1: CGPoint(x: 11.52, y: 27.9), controlPoint2: CGPoint(x: 8, y: 58.76))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 55.32), controlPoint1: CGPoint(x: 10.24, y: 58.76), controlPoint2: CGPoint(x: 11.8, y: 57.12))
        bezierPath.addCurve(to: CGPoint(x: 14.8, y: 31.55), controlPoint1: CGPoint(x: 13.72, y: 41.99), controlPoint2: CGPoint(x: 13.72, y: 41))
        bezierPath.addCurve(to: CGPoint(x: 20, y: 26), controlPoint1: CGPoint(x: 15.2, y: 28.32), controlPoint2: CGPoint(x: 16.96, y: 26))
        bezierPath.addCurve(to: CGPoint(x: 58.76, y: 26), controlPoint1: CGPoint(x: 34.76, y: 26), controlPoint2: CGPoint(x: 44, y: 26))
        bezierPath.addCurve(to: CGPoint(x: 63.96, y: 31.55), controlPoint1: CGPoint(x: 61.8, y: 26), controlPoint2: CGPoint(x: 64.36, y: 27.9))
        bezierPath.addCurve(to: CGPoint(x: 61.04, y: 53.34), controlPoint1: CGPoint(x: 62.68, y: 40.75), controlPoint2: CGPoint(x: 61.88, y: 46.55))
        bezierPath.addCurve(to: CGPoint(x: 51.12, y: 64), controlPoint1: CGPoint(x: 60.2, y: 60.13), controlPoint2: CGPoint(x: 56.64, y: 64))
        bezierPath.addCurve(to: CGPoint(x: 7.52, y: 64), controlPoint1: CGPoint(x: 35.4, y: 64), controlPoint2: CGPoint(x: 23.24, y: 64))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 55.92), controlPoint1: CGPoint(x: 3.28, y: 64.04), controlPoint2: CGPoint(x: 0, y: 60.52))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 5.46), controlPoint1: CGPoint(x: 0, y: 39.11), controlPoint2: CGPoint(x: 0, y: 22.31))
        bezierPath.addCurve(to: CGPoint(x: 5.12, y: 0), controlPoint1: CGPoint(x: 0, y: 2.32), controlPoint2: CGPoint(x: 2.16, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 17.76, y: 0), controlPoint1: CGPoint(x: 11.12, y: 0), controlPoint2: CGPoint(x: 11.76, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 23.48, y: 2.54), controlPoint1: CGPoint(x: 20.52, y: 0), controlPoint2: CGPoint(x: 21.96, y: 0.09))
        bezierPath.addCurve(to: CGPoint(x: 25.2, y: 5.29), controlPoint1: CGPoint(x: 24.64, y: 4.34), controlPoint2: CGPoint(x: 24.12, y: 3.57))
        bezierPath.addCurve(to: CGPoint(x: 32.44, y: 8.51), controlPoint1: CGPoint(x: 26.8, y: 7.74), controlPoint2: CGPoint(x: 29.6, y: 8.51))
        bezierPath.addCurve(to: CGPoint(x: 54.76, y: 8.51), controlPoint1: CGPoint(x: 36.72, y: 8.51), controlPoint2: CGPoint(x: 50.48, y: 8.51))
        bezierPath.addCurve(to: CGPoint(x: 60.08, y: 14.18), controlPoint1: CGPoint(x: 57.96, y: 8.51), controlPoint2: CGPoint(x: 60.48, y: 10.83))
        bezierPath.addCurve(to: CGPoint(x: 59.72, y: 17.36), controlPoint1: CGPoint(x: 60, y: 14.91), controlPoint2: CGPoint(x: 59.84, y: 16.63))
        bezierPath.close()
        color.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawIcon_recentList_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// recent.svg Group
        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 59.88, y: 38.18))
        bezierPath.addLine(to: CGPoint(x: 4.12, y: 38.18))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 31.65), controlPoint1: CGPoint(x: 1.84, y: 38.18), controlPoint2: CGPoint(x: 0, y: 35.26))
        bezierPath.addCurve(to: CGPoint(x: 4.12, y: 25.12), controlPoint1: CGPoint(x: 0, y: 28.04), controlPoint2: CGPoint(x: 1.84, y: 25.12))
        bezierPath.addLine(to: CGPoint(x: 59.88, y: 25.12))
        bezierPath.addCurve(to: CGPoint(x: 64, y: 31.65), controlPoint1: CGPoint(x: 62.16, y: 25.12), controlPoint2: CGPoint(x: 64, y: 28.04))
        bezierPath.addCurve(to: CGPoint(x: 59.88, y: 38.18), controlPoint1: CGPoint(x: 64, y: 35.26), controlPoint2: CGPoint(x: 62.16, y: 38.18))
        bezierPath.close()
        color.setFill()
        bezierPath.fill()

        //// Group 3
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 59.88, y: 13.06))
        bezier2Path.addLine(to: CGPoint(x: 4.12, y: 13.06))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 6.53), controlPoint1: CGPoint(x: 1.84, y: 13.06), controlPoint2: CGPoint(x: 0, y: 10.14))
        bezier2Path.addCurve(to: CGPoint(x: 4.12, y: 0), controlPoint1: CGPoint(x: 0, y: 2.92), controlPoint2: CGPoint(x: 1.84, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 59.88, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 64, y: 6.53), controlPoint1: CGPoint(x: 62.16, y: 0), controlPoint2: CGPoint(x: 64, y: 2.92))
        bezier2Path.addCurve(to: CGPoint(x: 59.88, y: 13.06), controlPoint1: CGPoint(x: 64, y: 10.14), controlPoint2: CGPoint(x: 62.16, y: 13.06))
        bezier2Path.close()
        color.setFill()
        bezier2Path.fill()

        //// Group 4
        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 39.69, y: 64.4))
        bezier3Path.addLine(to: CGPoint(x: 4.16, y: 64.4))
        bezier3Path.addCurve(to: CGPoint(x: 0, y: 57.87), controlPoint1: CGPoint(x: 1.86, y: 64.4), controlPoint2: CGPoint(x: 0, y: 61.48))
        bezier3Path.addCurve(to: CGPoint(x: 4.16, y: 51.34), controlPoint1: CGPoint(x: 0, y: 54.26), controlPoint2: CGPoint(x: 1.86, y: 51.34))
        bezier3Path.addLine(to: CGPoint(x: 39.69, y: 51.34))
        bezier3Path.addCurve(to: CGPoint(x: 43.85, y: 57.87), controlPoint1: CGPoint(x: 41.99, y: 51.34), controlPoint2: CGPoint(x: 43.85, y: 54.26))
        bezier3Path.addCurve(to: CGPoint(x: 39.69, y: 64.4), controlPoint1: CGPoint(x: 43.85, y: 61.48), controlPoint2: CGPoint(x: 41.99, y: 64.4))
        bezier3Path.close()
        color.setFill()
        bezier3Path.fill()
    }

    @objc dynamic public class func drawIcon_externalPartner_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: 0, y: 8)
        context.scaleBy(x: 4, y: 4)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 2, y: 0))
        bezierPath.addLine(to: CGPoint(x: 14, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 1.71), controlPoint1: CGPoint(x: 15.11, y: 0), controlPoint2: CGPoint(x: 16, y: 0.77))
        bezierPath.addLine(to: CGPoint(x: 16, y: 10.29))
        bezierPath.addCurve(to: CGPoint(x: 14, y: 12), controlPoint1: CGPoint(x: 16, y: 11.23), controlPoint2: CGPoint(x: 15.11, y: 12))
        bezierPath.addLine(to: CGPoint(x: 2, y: 12))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 10.29), controlPoint1: CGPoint(x: 0.9, y: 12), controlPoint2: CGPoint(x: 0, y: 11.23))
        bezierPath.addLine(to: CGPoint(x: 0, y: 1.71))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.77), controlPoint2: CGPoint(x: 0.9, y: 0))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 5.38, y: 4))
        bezierPath.addLine(to: CGPoint(x: 5.38, y: 5.01))
        bezierPath.addLine(to: CGPoint(x: 3.25, y: 5.01))
        bezierPath.addLine(to: CGPoint(x: 3.25, y: 5.99))
        bezierPath.addLine(to: CGPoint(x: 5.25, y: 5.99))
        bezierPath.addLine(to: CGPoint(x: 5.25, y: 6.92))
        bezierPath.addLine(to: CGPoint(x: 3.25, y: 6.92))
        bezierPath.addLine(to: CGPoint(x: 3.25, y: 7.92))
        bezierPath.addLine(to: CGPoint(x: 5.38, y: 7.92))
        bezierPath.addLine(to: CGPoint(x: 5.38, y: 8.93))
        bezierPath.addLine(to: CGPoint(x: 2, y: 8.93))
        bezierPath.addLine(to: CGPoint(x: 2, y: 4))
        bezierPath.addLine(to: CGPoint(x: 5.38, y: 4))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 7.03, y: 4))
        bezierPath.addLine(to: CGPoint(x: 7.94, y: 5.67))
        bezierPath.addLine(to: CGPoint(x: 7.97, y: 5.67))
        bezierPath.addLine(to: CGPoint(x: 8.87, y: 4))
        bezierPath.addLine(to: CGPoint(x: 10.27, y: 4))
        bezierPath.addLine(to: CGPoint(x: 8.69, y: 6.45))
        bezierPath.addLine(to: CGPoint(x: 8.69, y: 6.46))
        bezierPath.addLine(to: CGPoint(x: 10.25, y: 8.93))
        bezierPath.addLine(to: CGPoint(x: 8.84, y: 8.93))
        bezierPath.addLine(to: CGPoint(x: 7.88, y: 7.33))
        bezierPath.addLine(to: CGPoint(x: 7.85, y: 7.33))
        bezierPath.addLine(to: CGPoint(x: 6.9, y: 8.93))
        bezierPath.addLine(to: CGPoint(x: 5.57, y: 8.93))
        bezierPath.addLine(to: CGPoint(x: 7.07, y: 6.45))
        bezierPath.addLine(to: CGPoint(x: 7.07, y: 6.43))
        bezierPath.addLine(to: CGPoint(x: 5.57, y: 4))
        bezierPath.addLine(to: CGPoint(x: 7.03, y: 4))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 14.37, y: 4))
        bezierPath.addLine(to: CGPoint(x: 14.37, y: 5.01))
        bezierPath.addLine(to: CGPoint(x: 12.95, y: 5.01))
        bezierPath.addLine(to: CGPoint(x: 12.95, y: 8.93))
        bezierPath.addLine(to: CGPoint(x: 11.7, y: 8.93))
        bezierPath.addLine(to: CGPoint(x: 11.7, y: 5.01))
        bezierPath.addLine(to: CGPoint(x: 10.27, y: 5.01))
        bezierPath.addLine(to: CGPoint(x: 10.27, y: 4))
        bezierPath.addLine(to: CGPoint(x: 14.37, y: 4))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        color.setFill()
        bezierPath.fill()

        context.restoreGState()
    }

    @objc dynamic public class func drawIcon_groupAdmin_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 38.7, y: 26.65))
        bezier2Path.addCurve(to: CGPoint(x: 30.85, y: 34.5), controlPoint1: CGPoint(x: 38.7, y: 30.99), controlPoint2: CGPoint(x: 35.19, y: 34.5))
        bezier2Path.addCurve(to: CGPoint(x: 23, y: 26.65), controlPoint1: CGPoint(x: 26.51, y: 34.5), controlPoint2: CGPoint(x: 23, y: 30.99))
        bezier2Path.addCurve(to: CGPoint(x: 27.78, y: 19.42), controlPoint1: CGPoint(x: 23, y: 23.4), controlPoint2: CGPoint(x: 24.97, y: 20.62))
        bezier2Path.addCurve(to: CGPoint(x: 30.85, y: 18.8), controlPoint1: CGPoint(x: 28.72, y: 19.02), controlPoint2: CGPoint(x: 29.76, y: 18.8))
        bezier2Path.addCurve(to: CGPoint(x: 38.7, y: 26.65), controlPoint1: CGPoint(x: 35.19, y: 18.8), controlPoint2: CGPoint(x: 38.7, y: 22.31))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 24.13, y: 9.43))
        bezier2Path.addCurve(to: CGPoint(x: 20.87, y: 11.39), controlPoint1: CGPoint(x: 23.05, y: 10.11), controlPoint2: CGPoint(x: 21.97, y: 10.76))
        bezier2Path.addCurve(to: CGPoint(x: 20.32, y: 12.55), controlPoint1: CGPoint(x: 20.42, y: 11.66), controlPoint2: CGPoint(x: 20.25, y: 12))
        bezier2Path.addLine(to: CGPoint(x: 20.33, y: 12.65))
        bezier2Path.addCurve(to: CGPoint(x: 16.55, y: 22.11), controlPoint1: CGPoint(x: 20.9, y: 16.31), controlPoint2: CGPoint(x: 19.66, y: 19.41))
        bezier2Path.addCurve(to: CGPoint(x: 16.06, y: 22.46), controlPoint1: CGPoint(x: 16.4, y: 22.23), controlPoint2: CGPoint(x: 16.24, y: 22.35))
        bezier2Path.addCurve(to: CGPoint(x: 14.71, y: 23.06), controlPoint1: CGPoint(x: 15.64, y: 22.71), controlPoint2: CGPoint(x: 15.14, y: 22.9))
        bezier2Path.addLine(to: CGPoint(x: 14.59, y: 23.11))
        bezier2Path.addCurve(to: CGPoint(x: 14.27, y: 23.26), controlPoint1: CGPoint(x: 14.47, y: 23.16), controlPoint2: CGPoint(x: 14.36, y: 23.21))
        bezier2Path.addCurve(to: CGPoint(x: 13.73, y: 24.3), controlPoint1: CGPoint(x: 13.9, y: 23.49), controlPoint2: CGPoint(x: 13.73, y: 23.81))
        bezier2Path.addCurve(to: CGPoint(x: 13.7, y: 26.62), controlPoint1: CGPoint(x: 13.73, y: 25.09), controlPoint2: CGPoint(x: 13.71, y: 25.9))
        bezier2Path.addLine(to: CGPoint(x: 13.7, y: 26.77))
        bezier2Path.addCurve(to: CGPoint(x: 13.67, y: 28.33), controlPoint1: CGPoint(x: 13.69, y: 27.29), controlPoint2: CGPoint(x: 13.68, y: 27.82))
        bezier2Path.addCurve(to: CGPoint(x: 14.39, y: 29.45), controlPoint1: CGPoint(x: 13.66, y: 28.91), controlPoint2: CGPoint(x: 13.89, y: 29.26))
        bezier2Path.addCurve(to: CGPoint(x: 18.83, y: 33.67), controlPoint1: CGPoint(x: 16.24, y: 30.14), controlPoint2: CGPoint(x: 17.65, y: 31.48))
        bezier2Path.addCurve(to: CGPoint(x: 19.86, y: 40.3), controlPoint1: CGPoint(x: 19.99, y: 35.82), controlPoint2: CGPoint(x: 20.33, y: 37.99))
        bezier2Path.addCurve(to: CGPoint(x: 20.32, y: 41.42), controlPoint1: CGPoint(x: 19.76, y: 40.78), controlPoint2: CGPoint(x: 19.91, y: 41.15))
        bezier2Path.addCurve(to: CGPoint(x: 23.63, y: 43.59), controlPoint1: CGPoint(x: 21.55, y: 42.24), controlPoint2: CGPoint(x: 22.58, y: 42.92))
        bezier2Path.addCurve(to: CGPoint(x: 24.13, y: 43.77), controlPoint1: CGPoint(x: 23.74, y: 43.66), controlPoint2: CGPoint(x: 23.92, y: 43.76))
        bezier2Path.addCurve(to: CGPoint(x: 24.56, y: 43.66), controlPoint1: CGPoint(x: 24.28, y: 43.78), controlPoint2: CGPoint(x: 24.43, y: 43.74))
        bezier2Path.addCurve(to: CGPoint(x: 24.84, y: 43.42), controlPoint1: CGPoint(x: 24.66, y: 43.61), controlPoint2: CGPoint(x: 24.75, y: 43.52))
        bezier2Path.addCurve(to: CGPoint(x: 26.08, y: 42.41), controlPoint1: CGPoint(x: 25.19, y: 43.04), controlPoint2: CGPoint(x: 25.6, y: 42.7))
        bezier2Path.addCurve(to: CGPoint(x: 31.36, y: 41.39), controlPoint1: CGPoint(x: 27.49, y: 41.57), controlPoint2: CGPoint(x: 29.43, y: 41.19))
        bezier2Path.addCurve(to: CGPoint(x: 36.05, y: 43.57), controlPoint1: CGPoint(x: 33.33, y: 41.6), controlPoint2: CGPoint(x: 35.04, y: 42.4))
        bezier2Path.addCurve(to: CGPoint(x: 36.65, y: 43.99), controlPoint1: CGPoint(x: 36.19, y: 43.73), controlPoint2: CGPoint(x: 36.39, y: 43.92))
        bezier2Path.addLine(to: CGPoint(x: 36.79, y: 44.01))
        bezier2Path.addCurve(to: CGPoint(x: 37.53, y: 43.78), controlPoint1: CGPoint(x: 37.02, y: 44.02), controlPoint2: CGPoint(x: 37.24, y: 43.95))
        bezier2Path.addCurve(to: CGPoint(x: 39.04, y: 42.86), controlPoint1: CGPoint(x: 38.1, y: 43.43), controlPoint2: CGPoint(x: 38.67, y: 43.09))
        bezier2Path.addCurve(to: CGPoint(x: 40.58, y: 41.95), controlPoint1: CGPoint(x: 39.42, y: 42.64), controlPoint2: CGPoint(x: 39.98, y: 42.3))
        bezier2Path.addCurve(to: CGPoint(x: 41.18, y: 40.48), controlPoint1: CGPoint(x: 41.32, y: 41.5), controlPoint2: CGPoint(x: 41.29, y: 40.93))
        bezier2Path.addCurve(to: CGPoint(x: 41.97, y: 35.01), controlPoint1: CGPoint(x: 40.8, y: 38.93), controlPoint2: CGPoint(x: 41.09, y: 36.94))
        bezier2Path.addCurve(to: CGPoint(x: 45.57, y: 30.69), controlPoint1: CGPoint(x: 42.84, y: 33.12), controlPoint2: CGPoint(x: 44.15, y: 31.55))
        bezier2Path.addCurve(to: CGPoint(x: 47.02, y: 30.09), controlPoint1: CGPoint(x: 46.05, y: 30.41), controlPoint2: CGPoint(x: 46.53, y: 30.2))
        bezier2Path.addCurve(to: CGPoint(x: 47.69, y: 29.56), controlPoint1: CGPoint(x: 47.24, y: 30.04), controlPoint2: CGPoint(x: 47.54, y: 29.92))
        bezier2Path.addCurve(to: CGPoint(x: 47.79, y: 29.06), controlPoint1: CGPoint(x: 47.75, y: 29.42), controlPoint2: CGPoint(x: 47.78, y: 29.26))
        bezier2Path.addCurve(to: CGPoint(x: 47.85, y: 24.87), controlPoint1: CGPoint(x: 47.82, y: 27.64), controlPoint2: CGPoint(x: 47.84, y: 26.2))
        bezier2Path.addCurve(to: CGPoint(x: 47.23, y: 23.85), controlPoint1: CGPoint(x: 47.86, y: 24.34), controlPoint2: CGPoint(x: 47.65, y: 24.01))
        bezier2Path.addCurve(to: CGPoint(x: 42.59, y: 19.38), controlPoint1: CGPoint(x: 45.17, y: 23.05), controlPoint2: CGPoint(x: 43.65, y: 21.59))
        bezier2Path.addCurve(to: CGPoint(x: 41.66, y: 13.05), controlPoint1: CGPoint(x: 41.51, y: 17.13), controlPoint2: CGPoint(x: 41.21, y: 15.12))
        bezier2Path.addCurve(to: CGPoint(x: 41.17, y: 11.8), controlPoint1: CGPoint(x: 41.77, y: 12.5), controlPoint2: CGPoint(x: 41.62, y: 12.1))
        bezier2Path.addCurve(to: CGPoint(x: 40.04, y: 11.06), controlPoint1: CGPoint(x: 40.79, y: 11.55), controlPoint2: CGPoint(x: 40.42, y: 11.31))
        bezier2Path.addLine(to: CGPoint(x: 39.82, y: 10.92))
        bezier2Path.addCurve(to: CGPoint(x: 37.99, y: 9.72), controlPoint1: CGPoint(x: 39.25, y: 10.55), controlPoint2: CGPoint(x: 38.6, y: 10.13))
        bezier2Path.addCurve(to: CGPoint(x: 36.89, y: 9.66), controlPoint1: CGPoint(x: 37.53, y: 9.41), controlPoint2: CGPoint(x: 37.1, y: 9.53))
        bezier2Path.addCurve(to: CGPoint(x: 36.6, y: 9.87), controlPoint1: CGPoint(x: 36.8, y: 9.71), controlPoint2: CGPoint(x: 36.7, y: 9.79))
        bezier2Path.addLine(to: CGPoint(x: 36.5, y: 9.96))
        bezier2Path.addCurve(to: CGPoint(x: 35.31, y: 10.88), controlPoint1: CGPoint(x: 36.14, y: 10.27), controlPoint2: CGPoint(x: 35.74, y: 10.62))
        bezier2Path.addCurve(to: CGPoint(x: 34.78, y: 11.14), controlPoint1: CGPoint(x: 35.13, y: 10.99), controlPoint2: CGPoint(x: 34.96, y: 11.07))
        bezier2Path.addCurve(to: CGPoint(x: 30.36, y: 11.92), controlPoint1: CGPoint(x: 33.19, y: 11.75), controlPoint2: CGPoint(x: 31.71, y: 12.01))
        bezier2Path.addCurve(to: CGPoint(x: 25.39, y: 9.61), controlPoint1: CGPoint(x: 28.51, y: 11.8), controlPoint2: CGPoint(x: 26.89, y: 11.05))
        bezier2Path.addCurve(to: CGPoint(x: 24.09, y: 9.45), controlPoint1: CGPoint(x: 24.91, y: 9.14), controlPoint2: CGPoint(x: 24.48, y: 9.22))
        bezier2Path.addLine(to: CGPoint(x: 24.13, y: 9.43))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 63.8, y: 2.76))
        bezier2Path.addLine(to: CGPoint(x: 63.8, y: 48.2))
        bezier2Path.addCurve(to: CGPoint(x: 61.09, y: 50.96), controlPoint1: CGPoint(x: 63.8, y: 49.72), controlPoint2: CGPoint(x: 62.59, y: 50.96))
        bezier2Path.addLine(to: CGPoint(x: 16.98, y: 50.96))
        bezier2Path.addLine(to: CGPoint(x: 0.88, y: 64.13))
        bezier2Path.addCurve(to: CGPoint(x: 0.12, y: 64.05), controlPoint1: CGPoint(x: 0.65, y: 64.32), controlPoint2: CGPoint(x: 0.31, y: 64.29))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 63.7), controlPoint1: CGPoint(x: 0.04, y: 63.95), controlPoint2: CGPoint(x: 0, y: 63.83))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 2.76))
        bezier2Path.addCurve(to: CGPoint(x: 2.71, y: 0), controlPoint1: CGPoint(x: -0, y: 1.24), controlPoint2: CGPoint(x: 1.21, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 61.09, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 63.8, y: 2.76), controlPoint1: CGPoint(x: 62.59, y: 0), controlPoint2: CGPoint(x: 63.8, y: 1.23))
        bezier2Path.close()
        color.setFill()
        bezier2Path.fill()
    }

    @objc dynamic public class func drawIcon_circleCross_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 2
        let clip2Path = UIBezierPath()
        clip2Path.move(to: CGPoint(x: 32, y: 0))
        clip2Path.addCurve(to: CGPoint(x: 64, y: 32), controlPoint1: CGPoint(x: 49.67, y: 0), controlPoint2: CGPoint(x: 64, y: 14.33))
        clip2Path.addCurve(to: CGPoint(x: 32, y: 64), controlPoint1: CGPoint(x: 64, y: 49.67), controlPoint2: CGPoint(x: 49.67, y: 64))
        clip2Path.addCurve(to: CGPoint(x: 0, y: 32), controlPoint1: CGPoint(x: 14.33, y: 64), controlPoint2: CGPoint(x: 0, y: 49.67))
        clip2Path.addCurve(to: CGPoint(x: 32, y: 0), controlPoint1: CGPoint(x: 0, y: 14.33), controlPoint2: CGPoint(x: 14.33, y: 0))
        clip2Path.close()
        clip2Path.move(to: CGPoint(x: 44.97, y: 13.37))
        clip2Path.addLine(to: CGPoint(x: 32, y: 26.34))
        clip2Path.addLine(to: CGPoint(x: 19.03, y: 13.37))
        clip2Path.addLine(to: CGPoint(x: 13.37, y: 19.03))
        clip2Path.addLine(to: CGPoint(x: 26.34, y: 32))
        clip2Path.addLine(to: CGPoint(x: 13.37, y: 44.97))
        clip2Path.addLine(to: CGPoint(x: 19.03, y: 50.63))
        clip2Path.addLine(to: CGPoint(x: 32, y: 37.66))
        clip2Path.addLine(to: CGPoint(x: 44.97, y: 50.63))
        clip2Path.addLine(to: CGPoint(x: 50.63, y: 44.97))
        clip2Path.addLine(to: CGPoint(x: 37.66, y: 32))
        clip2Path.addLine(to: CGPoint(x: 50.63, y: 19.03))
        clip2Path.addLine(to: CGPoint(x: 44.97, y: 13.37))
        clip2Path.close()
        clip2Path.usesEvenOddFillRule = true
        clip2Path.addClip()

        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 64, height: 64))
        clipPath.addClip()

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: -29, y: -29, width: 122, height: 122))
        color.setFill()
        rectanglePath.fill()

        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: -29, y: -29, width: 122, height: 122))
        color.setFill()
        rectangle2Path.fill()

        context.endTransparencyLayer()
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()
    }

    @objc dynamic public class func drawIcon_eyeSlash_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let fillColor7 = UIColor(red: 0.204, green: 0.220, blue: 0.231, alpha: 1.000)

        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 2
        let clip2Path = UIBezierPath()
        clip2Path.move(to: CGPoint(x: 31.8, y: 19.04))
        clip2Path.addCurve(to: CGPoint(x: 45.82, y: 31.58), controlPoint1: CGPoint(x: 39.54, y: 19.04), controlPoint2: CGPoint(x: 45.82, y: 24.65))
        clip2Path.addCurve(to: CGPoint(x: 44.81, y: 36.17), controlPoint1: CGPoint(x: 45.82, y: 33.21), controlPoint2: CGPoint(x: 45.45, y: 34.74))
        clip2Path.addLine(to: CGPoint(x: 53, y: 43.5))
        clip2Path.addCurve(to: CGPoint(x: 62.61, y: 31.58), controlPoint1: CGPoint(x: 57.23, y: 40.33), controlPoint2: CGPoint(x: 60.56, y: 36.25))
        clip2Path.addCurve(to: CGPoint(x: 31.77, y: 12.76), controlPoint1: CGPoint(x: 57.76, y: 20.57), controlPoint2: CGPoint(x: 45.79, y: 12.76))
        clip2Path.addCurve(to: CGPoint(x: 20.62, y: 14.52), controlPoint1: CGPoint(x: 27.85, y: 12.76), controlPoint2: CGPoint(x: 24.09, y: 13.39))
        clip2Path.addLine(to: CGPoint(x: 26.67, y: 19.94))
        clip2Path.addCurve(to: CGPoint(x: 31.8, y: 19.04), controlPoint1: CGPoint(x: 28.27, y: 19.36), controlPoint2: CGPoint(x: 29.98, y: 19.04))
        clip2Path.close()
        clip2Path.move(to: CGPoint(x: 3.77, y: 12.19))
        clip2Path.addLine(to: CGPoint(x: 10.16, y: 17.91))
        clip2Path.addLine(to: CGPoint(x: 11.45, y: 19.06))
        clip2Path.addCurve(to: CGPoint(x: 0.97, y: 31.58), controlPoint1: CGPoint(x: 6.8, y: 22.3), controlPoint2: CGPoint(x: 3.15, y: 26.61))
        clip2Path.addCurve(to: CGPoint(x: 31.8, y: 50.39), controlPoint1: CGPoint(x: 5.82, y: 42.59), controlPoint2: CGPoint(x: 17.79, y: 50.39))
        clip2Path.addCurve(to: CGPoint(x: 44.08, y: 48.29), controlPoint1: CGPoint(x: 36.15, y: 50.39), controlPoint2: CGPoint(x: 40.3, y: 49.64))
        clip2Path.addLine(to: CGPoint(x: 45.26, y: 49.34))
        clip2Path.addLine(to: CGPoint(x: 53.47, y: 56.67))
        clip2Path.addLine(to: CGPoint(x: 57.03, y: 53.48))
        clip2Path.addLine(to: CGPoint(x: 7.33, y: 9))
        clip2Path.addLine(to: CGPoint(x: 3.77, y: 12.19))
        clip2Path.close()
        clip2Path.move(to: CGPoint(x: 19.27, y: 26.06))
        clip2Path.addLine(to: CGPoint(x: 23.62, y: 29.95))
        clip2Path.addCurve(to: CGPoint(x: 23.39, y: 31.58), controlPoint1: CGPoint(x: 23.48, y: 30.48), controlPoint2: CGPoint(x: 23.39, y: 31.03))
        clip2Path.addCurve(to: CGPoint(x: 31.8, y: 39.11), controlPoint1: CGPoint(x: 23.39, y: 35.74), controlPoint2: CGPoint(x: 27.15, y: 39.11))
        clip2Path.addCurve(to: CGPoint(x: 33.62, y: 38.9), controlPoint1: CGPoint(x: 32.42, y: 39.11), controlPoint2: CGPoint(x: 33.04, y: 39.03))
        clip2Path.addLine(to: CGPoint(x: 37.97, y: 42.79))
        clip2Path.addCurve(to: CGPoint(x: 31.8, y: 44.12), controlPoint1: CGPoint(x: 36.09, y: 43.62), controlPoint2: CGPoint(x: 34.02, y: 44.12))
        clip2Path.addCurve(to: CGPoint(x: 17.79, y: 31.58), controlPoint1: CGPoint(x: 24.06, y: 44.12), controlPoint2: CGPoint(x: 17.79, y: 38.5))
        clip2Path.addCurve(to: CGPoint(x: 19.27, y: 26.06), controlPoint1: CGPoint(x: 17.79, y: 29.6), controlPoint2: CGPoint(x: 18.35, y: 27.74))
        clip2Path.addLine(to: CGPoint(x: 19.27, y: 26.06))
        clip2Path.close()
        clip2Path.move(to: CGPoint(x: 31.35, y: 24.1))
        clip2Path.addLine(to: CGPoint(x: 40.18, y: 32.01))
        clip2Path.addLine(to: CGPoint(x: 40.24, y: 31.6))
        clip2Path.addCurve(to: CGPoint(x: 31.83, y: 24.08), controlPoint1: CGPoint(x: 40.24, y: 27.44), controlPoint2: CGPoint(x: 36.48, y: 24.08))
        clip2Path.addLine(to: CGPoint(x: 31.35, y: 24.1))
        clip2Path.close()
        clip2Path.addClip()

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: -3, y: 9, width: 67, height: 49))
        fillColor7.setFill()
        rectanglePath.fill()

        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath(rect: CGRect(x: -3, y: 9, width: 67, height: 49))
        clipPath.addClip()

        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: -37.33, y: -32, width: 138.25, height: 128))
        color.setFill()
        rectangle2Path.fill()

        context.endTransparencyLayer()
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()
    }

    @objc dynamic public class func drawIcon_circleTick_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 31.5, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 63, y: 32), controlPoint1: CGPoint(x: 48.9, y: 0), controlPoint2: CGPoint(x: 63, y: 14.33))
        bezierPath.addCurve(to: CGPoint(x: 31.5, y: 64), controlPoint1: CGPoint(x: 63, y: 49.67), controlPoint2: CGPoint(x: 48.9, y: 64))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 32), controlPoint1: CGPoint(x: 14.1, y: 64), controlPoint2: CGPoint(x: 0, y: 49.67))
        bezierPath.addCurve(to: CGPoint(x: 31.5, y: 0), controlPoint1: CGPoint(x: 0, y: 14.33), controlPoint2: CGPoint(x: 14.1, y: 0))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 50.73, y: 12.85))
        bezierPath.addLine(to: CGPoint(x: 24.51, y: 39.83))
        bezierPath.addLine(to: CGPoint(x: 12.03, y: 27.16))
        bezierPath.addLine(to: CGPoint(x: 7.88, y: 31.38))
        bezierPath.addLine(to: CGPoint(x: 24.51, y: 48.28))
        bezierPath.addLine(to: CGPoint(x: 54.89, y: 17.08))
        bezierPath.addLine(to: CGPoint(x: 50.73, y: 12.85))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        color.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawIcon_eyeWithIris_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 2
        let clip2Path = UIBezierPath()
        clip2Path.move(to: CGPoint(x: 31.79, y: 14))
        clip2Path.addCurve(to: CGPoint(x: 0.97, y: 33), controlPoint1: CGPoint(x: 17.78, y: 14), controlPoint2: CGPoint(x: 5.81, y: 21.88))
        clip2Path.addCurve(to: CGPoint(x: 31.79, y: 52), controlPoint1: CGPoint(x: 5.81, y: 44.12), controlPoint2: CGPoint(x: 17.78, y: 52))
        clip2Path.addCurve(to: CGPoint(x: 62.62, y: 33), controlPoint1: CGPoint(x: 45.8, y: 52), controlPoint2: CGPoint(x: 57.77, y: 44.12))
        clip2Path.addCurve(to: CGPoint(x: 31.79, y: 14), controlPoint1: CGPoint(x: 57.77, y: 21.88), controlPoint2: CGPoint(x: 45.8, y: 14))
        clip2Path.close()
        clip2Path.move(to: CGPoint(x: 31.79, y: 45.67))
        clip2Path.addCurve(to: CGPoint(x: 17.78, y: 33), controlPoint1: CGPoint(x: 24.06, y: 45.67), controlPoint2: CGPoint(x: 17.78, y: 39.99))
        clip2Path.addCurve(to: CGPoint(x: 31.79, y: 20.33), controlPoint1: CGPoint(x: 17.78, y: 26.01), controlPoint2: CGPoint(x: 24.06, y: 20.33))
        clip2Path.addCurve(to: CGPoint(x: 45.8, y: 33), controlPoint1: CGPoint(x: 39.53, y: 20.33), controlPoint2: CGPoint(x: 45.8, y: 26.01))
        clip2Path.addCurve(to: CGPoint(x: 31.79, y: 45.67), controlPoint1: CGPoint(x: 45.8, y: 39.99), controlPoint2: CGPoint(x: 39.53, y: 45.67))
        clip2Path.close()
        clip2Path.move(to: CGPoint(x: 31.79, y: 25.4))
        clip2Path.addCurve(to: CGPoint(x: 23.38, y: 33), controlPoint1: CGPoint(x: 27.14, y: 25.4), controlPoint2: CGPoint(x: 23.38, y: 28.79))
        clip2Path.addCurve(to: CGPoint(x: 31.79, y: 40.6), controlPoint1: CGPoint(x: 23.38, y: 37.21), controlPoint2: CGPoint(x: 27.14, y: 40.6))
        clip2Path.addCurve(to: CGPoint(x: 40.2, y: 33), controlPoint1: CGPoint(x: 36.44, y: 40.6), controlPoint2: CGPoint(x: 40.2, y: 37.21))
        clip2Path.addCurve(to: CGPoint(x: 31.79, y: 25.4), controlPoint1: CGPoint(x: 40.2, y: 28.79), controlPoint2: CGPoint(x: 36.44, y: 25.4))
        clip2Path.close()
        clip2Path.addClip()

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: -3, y: 13, width: 67, height: 38))
        color.setFill()
        rectanglePath.fill()

        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath(rect: CGRect(x: -3, y: 13, width: 67, height: 40.5))
        clipPath.addClip()

        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: -38.33, y: -29, width: 140.25, height: 129))
        color.setFill()
        rectangle2Path.fill()

        context.endTransparencyLayer()
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()
    }

    @objc dynamic public class func drawIcon_federated_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 52, y: 44))
        bezierPath.addCurve(to: CGPoint(x: 48, y: 45.14), controlPoint1: CGPoint(x: 50.59, y: 44.01), controlPoint2: CGPoint(x: 49.2, y: 44.4))
        bezierPath.addLine(to: CGPoint(x: 41.82, y: 38.94))
        bezierPath.addCurve(to: CGPoint(x: 41.82, y: 25.06), controlPoint1: CGPoint(x: 44.77, y: 34.78), controlPoint2: CGPoint(x: 44.77, y: 29.22))
        bezierPath.addLine(to: CGPoint(x: 48, y: 18.86))
        bezierPath.addCurve(to: CGPoint(x: 52, y: 20), controlPoint1: CGPoint(x: 49.2, y: 19.6), controlPoint2: CGPoint(x: 50.59, y: 19.99))
        bezierPath.addCurve(to: CGPoint(x: 60, y: 12), controlPoint1: CGPoint(x: 56.42, y: 20), controlPoint2: CGPoint(x: 60, y: 16.42))
        bezierPath.addCurve(to: CGPoint(x: 52, y: 4), controlPoint1: CGPoint(x: 60, y: 7.58), controlPoint2: CGPoint(x: 56.42, y: 4))
        bezierPath.addCurve(to: CGPoint(x: 44, y: 12), controlPoint1: CGPoint(x: 47.58, y: 4), controlPoint2: CGPoint(x: 44, y: 7.58))
        bezierPath.addCurve(to: CGPoint(x: 45.14, y: 16), controlPoint1: CGPoint(x: 44.01, y: 13.41), controlPoint2: CGPoint(x: 44.4, y: 14.8))
        bezierPath.addLine(to: CGPoint(x: 38.94, y: 22.18))
        bezierPath.addCurve(to: CGPoint(x: 25.06, y: 22.18), controlPoint1: CGPoint(x: 34.78, y: 19.23), controlPoint2: CGPoint(x: 29.22, y: 19.23))
        bezierPath.addLine(to: CGPoint(x: 18.86, y: 16))
        bezierPath.addCurve(to: CGPoint(x: 20, y: 12), controlPoint1: CGPoint(x: 19.6, y: 14.8), controlPoint2: CGPoint(x: 19.99, y: 13.41))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 4), controlPoint1: CGPoint(x: 20, y: 7.58), controlPoint2: CGPoint(x: 16.42, y: 4))
        bezierPath.addCurve(to: CGPoint(x: 4, y: 12), controlPoint1: CGPoint(x: 7.58, y: 4), controlPoint2: CGPoint(x: 4, y: 7.58))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 20), controlPoint1: CGPoint(x: 4, y: 16.42), controlPoint2: CGPoint(x: 7.58, y: 20))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 18.86), controlPoint1: CGPoint(x: 13.41, y: 19.99), controlPoint2: CGPoint(x: 14.8, y: 19.6))
        bezierPath.addLine(to: CGPoint(x: 22.18, y: 25.06))
        bezierPath.addCurve(to: CGPoint(x: 22.18, y: 38.94), controlPoint1: CGPoint(x: 19.23, y: 29.22), controlPoint2: CGPoint(x: 19.23, y: 34.78))
        bezierPath.addLine(to: CGPoint(x: 16, y: 45.14))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 44), controlPoint1: CGPoint(x: 14.8, y: 44.4), controlPoint2: CGPoint(x: 13.41, y: 44.01))
        bezierPath.addCurve(to: CGPoint(x: 4, y: 52), controlPoint1: CGPoint(x: 7.58, y: 44), controlPoint2: CGPoint(x: 4, y: 47.58))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 60), controlPoint1: CGPoint(x: 4, y: 56.42), controlPoint2: CGPoint(x: 7.58, y: 60))
        bezierPath.addCurve(to: CGPoint(x: 20, y: 52), controlPoint1: CGPoint(x: 16.42, y: 60), controlPoint2: CGPoint(x: 20, y: 56.42))
        bezierPath.addCurve(to: CGPoint(x: 18.86, y: 48), controlPoint1: CGPoint(x: 19.99, y: 50.59), controlPoint2: CGPoint(x: 19.6, y: 49.2))
        bezierPath.addLine(to: CGPoint(x: 25.06, y: 41.82))
        bezierPath.addCurve(to: CGPoint(x: 38.94, y: 41.82), controlPoint1: CGPoint(x: 29.22, y: 44.77), controlPoint2: CGPoint(x: 34.78, y: 44.77))
        bezierPath.addLine(to: CGPoint(x: 45.14, y: 48))
        bezierPath.addCurve(to: CGPoint(x: 44, y: 52), controlPoint1: CGPoint(x: 44.4, y: 49.2), controlPoint2: CGPoint(x: 44.01, y: 50.59))
        bezierPath.addCurve(to: CGPoint(x: 52, y: 60), controlPoint1: CGPoint(x: 44, y: 56.42), controlPoint2: CGPoint(x: 47.58, y: 60))
        bezierPath.addCurve(to: CGPoint(x: 60, y: 52), controlPoint1: CGPoint(x: 56.42, y: 60), controlPoint2: CGPoint(x: 60, y: 56.42))
        bezierPath.addCurve(to: CGPoint(x: 52, y: 44), controlPoint1: CGPoint(x: 60, y: 47.58), controlPoint2: CGPoint(x: 56.42, y: 44))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 32, y: 40))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 32), controlPoint1: CGPoint(x: 27.58, y: 40), controlPoint2: CGPoint(x: 24, y: 36.42))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 24), controlPoint1: CGPoint(x: 24, y: 27.58), controlPoint2: CGPoint(x: 27.58, y: 24))
        bezierPath.addCurve(to: CGPoint(x: 40, y: 32), controlPoint1: CGPoint(x: 36.42, y: 24), controlPoint2: CGPoint(x: 40, y: 27.58))
        bezierPath.addCurve(to: CGPoint(x: 37.66, y: 37.66), controlPoint1: CGPoint(x: 40, y: 34.12), controlPoint2: CGPoint(x: 39.16, y: 36.16))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 40), controlPoint1: CGPoint(x: 36.16, y: 39.16), controlPoint2: CGPoint(x: 34.12, y: 40))
        bezierPath.close()
        color.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawIcon_screenshare_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// prefix__a Drawing
        let prefix__aPath = UIBezierPath()
        prefix__aPath.move(to: CGPoint(x: 0, y: 4))
        prefix__aPath.addCurve(to: CGPoint(x: 4, y: 0), controlPoint1: CGPoint(x: 0, y: 1.79), controlPoint2: CGPoint(x: 1.78, y: 0))
        prefix__aPath.addLine(to: CGPoint(x: 60, y: 0))
        prefix__aPath.addCurve(to: CGPoint(x: 64, y: 4), controlPoint1: CGPoint(x: 62.21, y: 0), controlPoint2: CGPoint(x: 64, y: 1.79))
        prefix__aPath.addLine(to: CGPoint(x: 64, y: 48))
        prefix__aPath.addCurve(to: CGPoint(x: 60, y: 52), controlPoint1: CGPoint(x: 64, y: 50.21), controlPoint2: CGPoint(x: 62.22, y: 52))
        prefix__aPath.addLine(to: CGPoint(x: 4, y: 52))
        prefix__aPath.addCurve(to: CGPoint(x: 0, y: 48), controlPoint1: CGPoint(x: 1.79, y: 52), controlPoint2: CGPoint(x: 0, y: 50.21))
        prefix__aPath.addLine(to: CGPoint(x: 0, y: 4))
        prefix__aPath.close()
        prefix__aPath.move(to: CGPoint(x: 44, y: 56))
        prefix__aPath.addLine(to: CGPoint(x: 44, y: 64))
        prefix__aPath.addLine(to: CGPoint(x: 20, y: 64))
        prefix__aPath.addLine(to: CGPoint(x: 20, y: 56))
        prefix__aPath.addLine(to: CGPoint(x: 44, y: 56))
        prefix__aPath.close()
        prefix__aPath.move(to: CGPoint(x: 32, y: 12))
        prefix__aPath.addLine(to: CGPoint(x: 52, y: 28))
        prefix__aPath.addLine(to: CGPoint(x: 36, y: 28))
        prefix__aPath.addLine(to: CGPoint(x: 36, y: 44))
        prefix__aPath.addLine(to: CGPoint(x: 28, y: 44))
        prefix__aPath.addLine(to: CGPoint(x: 28, y: 28))
        prefix__aPath.addLine(to: CGPoint(x: 12, y: 28))
        prefix__aPath.addLine(to: CGPoint(x: 32, y: 12))
        prefix__aPath.close()
        prefix__aPath.usesEvenOddFillRule = true
        color.setFill()
        prefix__aPath.fill()
    }

    @objc dynamic public class func drawIcon_cameraOff_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Bezier 3 Drawing
        context.saveGState()
        context.translateBy(x: -0.01, y: 1.88)
        context.scaleBy(x: 4, y: 4)

        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 8.95, y: 1.78))
        bezier3Path.addCurve(to: CGPoint(x: 9.74, y: 2.55), controlPoint1: CGPoint(x: 9.31, y: 1.97), controlPoint2: CGPoint(x: 9.56, y: 2.23))
        bezier3Path.addCurve(to: CGPoint(x: 10, y: 3.9), controlPoint1: CGPoint(x: 9.9, y: 2.85), controlPoint2: CGPoint(x: 9.99, y: 3.15))
        bezier3Path.addLine(to: CGPoint(x: 10, y: 6.97))
        bezier3Path.addLine(to: CGPoint(x: 4.56, y: 1.53))
        bezier3Path.addLine(to: CGPoint(x: 7.44, y: 1.53))
        bezier3Path.addCurve(to: CGPoint(x: 8.98, y: 1.8), controlPoint1: CGPoint(x: 8.33, y: 1.53), controlPoint2: CGPoint(x: 8.65, y: 1.62))
        bezier3Path.addLine(to: CGPoint(x: 8.95, y: 1.78))
        bezier3Path.close()
        bezier3Path.move(to: CGPoint(x: 15.71, y: 3.84))
        bezier3Path.addCurve(to: CGPoint(x: 16, y: 4.54), controlPoint1: CGPoint(x: 15.9, y: 4.02), controlPoint2: CGPoint(x: 16, y: 4.28))
        bezier3Path.addLine(to: CGPoint(x: 16, y: 10.53))
        bezier3Path.addCurve(to: CGPoint(x: 15, y: 11.53), controlPoint1: CGPoint(x: 16, y: 11.08), controlPoint2: CGPoint(x: 15.55, y: 11.53))
        bezier3Path.addCurve(to: CGPoint(x: 14.3, y: 11.23), controlPoint1: CGPoint(x: 14.74, y: 11.53), controlPoint2: CGPoint(x: 14.48, y: 11.42))
        bezier3Path.addLine(to: CGPoint(x: 11.3, y: 8.24))
        bezier3Path.addCurve(to: CGPoint(x: 11.21, y: 6.92), controlPoint1: CGPoint(x: 10.93, y: 7.88), controlPoint2: CGPoint(x: 10.91, y: 7.32))
        bezier3Path.addLine(to: CGPoint(x: 11.3, y: 6.83))
        bezier3Path.addLine(to: CGPoint(x: 14.3, y: 3.83))
        bezier3Path.addCurve(to: CGPoint(x: 15.71, y: 3.84), controlPoint1: CGPoint(x: 14.69, y: 3.44), controlPoint2: CGPoint(x: 15.32, y: 3.44))
        bezier3Path.close()
        bezier3Path.move(to: CGPoint(x: 0.07, y: 3.15))
        bezier3Path.addCurve(to: CGPoint(x: 9.62, y: 12.7), controlPoint1: CGPoint(x: 0.06, y: 3.15), controlPoint2: CGPoint(x: 9.62, y: 12.7))
        bezier3Path.addCurve(to: CGPoint(x: 8.98, y: 13.26), controlPoint1: CGPoint(x: 9.45, y: 12.94), controlPoint2: CGPoint(x: 9.24, y: 13.12))
        bezier3Path.addCurve(to: CGPoint(x: 7.63, y: 13.53), controlPoint1: CGPoint(x: 8.68, y: 13.42), controlPoint2: CGPoint(x: 8.38, y: 13.52))
        bezier3Path.addLine(to: CGPoint(x: 2.57, y: 13.53))
        bezier3Path.addCurve(to: CGPoint(x: 1.03, y: 13.26), controlPoint1: CGPoint(x: 1.67, y: 13.53), controlPoint2: CGPoint(x: 1.35, y: 13.44))
        bezier3Path.addCurve(to: CGPoint(x: 0.27, y: 12.51), controlPoint1: CGPoint(x: 0.7, y: 13.09), controlPoint2: CGPoint(x: 0.44, y: 12.83))
        bezier3Path.addCurve(to: CGPoint(x: 0, y: 11.16), controlPoint1: CGPoint(x: 0.11, y: 12.21), controlPoint2: CGPoint(x: 0.02, y: 11.91))
        bezier3Path.addLine(to: CGPoint(x: 0, y: 4.09))
        bezier3Path.addCurve(to: CGPoint(x: 0.06, y: 3.15), controlPoint1: CGPoint(x: 0, y: 3.67), controlPoint2: CGPoint(x: 0.02, y: 3.38))
        bezier3Path.addLine(to: CGPoint(x: 0.07, y: 3.15))
        bezier3Path.close()
        bezier3Path.move(to: CGPoint(x: 1.04, y: 0))
        bezier3Path.addCurve(to: CGPoint(x: 14.53, y: 13.5), controlPoint1: CGPoint(x: 1.03, y: 0), controlPoint2: CGPoint(x: 14.53, y: 13.5))
        bezier3Path.addLine(to: CGPoint(x: 13.47, y: 14.56))
        bezier3Path.addCurve(to: CGPoint(x: 0, y: 1.09), controlPoint1: CGPoint(x: 13.45, y: 14.53), controlPoint2: CGPoint(x: 0, y: 1.09))
        bezier3Path.addCurve(to: CGPoint(x: 0.48, y: 0.55), controlPoint1: CGPoint(x: -0.03, y: 1.06), controlPoint2: CGPoint(x: 0.22, y: 0.81))
        bezier3Path.addCurve(to: CGPoint(x: 1.03, y: 0), controlPoint1: CGPoint(x: 0.75, y: 0.28), controlPoint2: CGPoint(x: 1.03, y: 0))
        bezier3Path.addLine(to: CGPoint(x: 1.04, y: 0))
        bezier3Path.close()
        color.setFill()
        bezier3Path.fill()

        context.restoreGState()
    }

    @objc dynamic public class func drawIcon_speakerOff_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: -0.12, y: 0)
        context.scaleBy(x: 4, y: 4)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0.49, y: 4.02))
        bezierPath.addLine(to: CGPoint(x: 10.03, y: 13.56))
        bezierPath.addLine(to: CGPoint(x: 10.03, y: 16))
        bezierPath.addLine(to: CGPoint(x: 5.06, y: 12.02))
        bezierPath.addLine(to: CGPoint(x: 0.55, y: 12.02))
        bezierPath.addCurve(to: CGPoint(x: 0.03, y: 11.43), controlPoint1: CGPoint(x: 0.22, y: 12.02), controlPoint2: CGPoint(x: 0.03, y: 11.72))
        bezierPath.addLine(to: CGPoint(x: 0.03, y: 4.64))
        bezierPath.addCurve(to: CGPoint(x: 0.49, y: 4.02), controlPoint1: CGPoint(x: 0.03, y: 4.36), controlPoint2: CGPoint(x: 0.22, y: 4.05))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 10.03, y: 0))
        bezierPath.addLine(to: CGPoint(x: 10.03, y: 7.44))
        bezierPath.addLine(to: CGPoint(x: 5.91, y: 3.32))
        bezierPath.addLine(to: CGPoint(x: 10.03, y: 0))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 1.06, y: 0.47))
        bezierPath.addLine(to: CGPoint(x: 14.56, y: 13.97))
        bezierPath.addLine(to: CGPoint(x: 13.5, y: 15.03))
        bezierPath.addLine(to: CGPoint(x: 0, y: 1.53))
        bezierPath.addLine(to: CGPoint(x: 1.06, y: 0.47))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        color.setFill()
        bezierPath.fill()

        context.restoreGState()
    }

    @objc dynamic public class func drawIcon_microphoneOff_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Bezier 3 Drawing
        context.saveGState()
        context.translateBy(x: -0.12, y: 3.88)
        context.scaleBy(x: 4, y: 4)

        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 11.03, y: 3.03))
        bezier3Path.addLine(to: CGPoint(x: 11.03, y: 7.03))
        bezier3Path.addCurve(to: CGPoint(x: 10.91, y: 7.86), controlPoint1: CGPoint(x: 11.03, y: 7.32), controlPoint2: CGPoint(x: 10.99, y: 7.59))
        bezier3Path.addLine(to: CGPoint(x: 5.17, y: 2.11))
        bezier3Path.addCurve(to: CGPoint(x: 8.03, y: 0.03), controlPoint1: CGPoint(x: 5.56, y: 0.9), controlPoint2: CGPoint(x: 6.69, y: 0.03))
        bezier3Path.addCurve(to: CGPoint(x: 11.03, y: 3.03), controlPoint1: CGPoint(x: 9.69, y: 0.03), controlPoint2: CGPoint(x: 11.03, y: 1.37))
        bezier3Path.close()
        bezier3Path.move(to: CGPoint(x: 13.78, y: 6.28))
        bezier3Path.addCurve(to: CGPoint(x: 13.78, y: 7.03), controlPoint1: CGPoint(x: 13.78, y: 6.28), controlPoint2: CGPoint(x: 13.78, y: 7.03))
        bezier3Path.addCurve(to: CGPoint(x: 12.99, y: 9.93), controlPoint1: CGPoint(x: 13.78, y: 8.09), controlPoint2: CGPoint(x: 13.49, y: 9.08))
        bezier3Path.addLine(to: CGPoint(x: 11.88, y: 8.82))
        bezier3Path.addCurve(to: CGPoint(x: 12.28, y: 7.24), controlPoint1: CGPoint(x: 12.11, y: 8.34), controlPoint2: CGPoint(x: 12.25, y: 7.8))
        bezier3Path.addLine(to: CGPoint(x: 12.28, y: 7.03))
        bezier3Path.addLine(to: CGPoint(x: 12.28, y: 6.28))
        bezier3Path.addLine(to: CGPoint(x: 13.78, y: 6.28))
        bezier3Path.addLine(to: CGPoint(x: 13.78, y: 6.28))
        bezier3Path.close()
        bezier3Path.move(to: CGPoint(x: 1.06, y: 0))
        bezier3Path.addCurve(to: CGPoint(x: 15.03, y: 13.97), controlPoint1: CGPoint(x: 1.09, y: 0.03), controlPoint2: CGPoint(x: 15.03, y: 13.97))
        bezier3Path.addCurve(to: CGPoint(x: 14, y: 15.06), controlPoint1: CGPoint(x: 15.06, y: 14), controlPoint2: CGPoint(x: 14, y: 15.06))
        bezier3Path.addCurve(to: CGPoint(x: 10.93, y: 11.99), controlPoint1: CGPoint(x: 14, y: 15.06), controlPoint2: CGPoint(x: 12.72, y: 13.78))
        bezier3Path.addCurve(to: CGPoint(x: 8.78, y: 12.73), controlPoint1: CGPoint(x: 10.29, y: 12.37), controlPoint2: CGPoint(x: 9.56, y: 12.63))
        bezier3Path.addLine(to: CGPoint(x: 8.78, y: 15.03))
        bezier3Path.addLine(to: CGPoint(x: 7.28, y: 15.03))
        bezier3Path.addLine(to: CGPoint(x: 7.28, y: 12.73))
        bezier3Path.addCurve(to: CGPoint(x: 2.28, y: 7.25), controlPoint1: CGPoint(x: 4.53, y: 12.37), controlPoint2: CGPoint(x: 2.39, y: 10.07))
        bezier3Path.addLine(to: CGPoint(x: 2.28, y: 7.03))
        bezier3Path.addLine(to: CGPoint(x: 2.28, y: 6.28))
        bezier3Path.addLine(to: CGPoint(x: 3.78, y: 6.28))
        bezier3Path.addLine(to: CGPoint(x: 3.78, y: 7.03))
        bezier3Path.addCurve(to: CGPoint(x: 8.03, y: 11.28), controlPoint1: CGPoint(x: 3.78, y: 9.38), controlPoint2: CGPoint(x: 5.68, y: 11.28))
        bezier3Path.addCurve(to: CGPoint(x: 9.82, y: 10.88), controlPoint1: CGPoint(x: 8.67, y: 11.28), controlPoint2: CGPoint(x: 9.28, y: 11.14))
        bezier3Path.addCurve(to: CGPoint(x: 8.85, y: 9.91), controlPoint1: CGPoint(x: 9.51, y: 10.57), controlPoint2: CGPoint(x: 9.18, y: 10.24))
        bezier3Path.addCurve(to: CGPoint(x: 8.03, y: 10.03), controlPoint1: CGPoint(x: 8.59, y: 9.99), controlPoint2: CGPoint(x: 8.32, y: 10.03))
        bezier3Path.addCurve(to: CGPoint(x: 5.03, y: 7.03), controlPoint1: CGPoint(x: 6.37, y: 10.03), controlPoint2: CGPoint(x: 5.03, y: 8.69))
        bezier3Path.addCurve(to: CGPoint(x: 5.03, y: 6.09), controlPoint1: CGPoint(x: 5.03, y: 7.03), controlPoint2: CGPoint(x: 5.03, y: 6.61))
        bezier3Path.addCurve(to: CGPoint(x: 0, y: 1.06), controlPoint1: CGPoint(x: 2.3, y: 3.36), controlPoint2: CGPoint(x: 0, y: 1.06))
        bezier3Path.addCurve(to: CGPoint(x: 0.51, y: 0.55), controlPoint1: CGPoint(x: 0, y: 1.06), controlPoint2: CGPoint(x: 0.25, y: 0.81))
        bezier3Path.addCurve(to: CGPoint(x: 1.06, y: 0), controlPoint1: CGPoint(x: 0.78, y: 0.28), controlPoint2: CGPoint(x: 1.06, y: 0))
        bezier3Path.addLine(to: CGPoint(x: 1.06, y: 0))
        bezier3Path.close()
        color.setFill()
        bezier3Path.fill()

        context.restoreGState()
    }

    @objc dynamic public class func drawIcon_microphone_64pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: 9, y: 4)
        context.scaleBy(x: 4, y: 4)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 1.5, y: 6.25))
        bezierPath.addLine(to: CGPoint(x: 1.5, y: 7))
        bezierPath.addCurve(to: CGPoint(x: 5.75, y: 11.25), controlPoint1: CGPoint(x: 1.5, y: 9.35), controlPoint2: CGPoint(x: 3.4, y: 11.25))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 7.21), controlPoint1: CGPoint(x: 8.03, y: 11.25), controlPoint2: CGPoint(x: 9.89, y: 9.46))
        bezierPath.addLine(to: CGPoint(x: 10, y: 7))
        bezierPath.addLine(to: CGPoint(x: 10, y: 6.25))
        bezierPath.addLine(to: CGPoint(x: 11.5, y: 6.25))
        bezierPath.addLine(to: CGPoint(x: 11.5, y: 7))
        bezierPath.addCurve(to: CGPoint(x: 6.5, y: 12.7), controlPoint1: CGPoint(x: 11.5, y: 9.92), controlPoint2: CGPoint(x: 9.32, y: 12.33))
        bezierPath.addLine(to: CGPoint(x: 6.5, y: 15))
        bezierPath.addLine(to: CGPoint(x: 5, y: 15))
        bezierPath.addLine(to: CGPoint(x: 5, y: 12.7))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 7.22), controlPoint1: CGPoint(x: 2.25, y: 12.34), controlPoint2: CGPoint(x: 0.11, y: 10.04))
        bezierPath.addLine(to: CGPoint(x: 0, y: 7))
        bezierPath.addLine(to: CGPoint(x: 0, y: 6.25))
        bezierPath.addLine(to: CGPoint(x: 1.5, y: 6.25))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 5.75, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 8.75, y: 3), controlPoint1: CGPoint(x: 7.41, y: 0), controlPoint2: CGPoint(x: 8.75, y: 1.34))
        bezierPath.addLine(to: CGPoint(x: 8.75, y: 7))
        bezierPath.addCurve(to: CGPoint(x: 5.75, y: 10), controlPoint1: CGPoint(x: 8.75, y: 8.66), controlPoint2: CGPoint(x: 7.41, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 2.75, y: 7), controlPoint1: CGPoint(x: 4.09, y: 10), controlPoint2: CGPoint(x: 2.75, y: 8.66))
        bezierPath.addLine(to: CGPoint(x: 2.75, y: 3))
        bezierPath.addCurve(to: CGPoint(x: 5.75, y: 0), controlPoint1: CGPoint(x: 2.75, y: 1.34), controlPoint2: CGPoint(x: 4.09, y: 0))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        color.setFill()
        bezierPath.fill()

        context.restoreGState()
    }

    @objc dynamic public class func drawMissedcall(accent: UIColor = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// Color Declarations
        let accentopacity64 = accent.withAlpha(0.64)
        let accentopacity32 = accent.withAlpha(0.32)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 1, y: 1, width: 38, height: 38))
        accentopacity32.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()

        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 5, y: 5, width: 30, height: 30))
        accentopacity64.setStroke()
        oval2Path.lineWidth = 1
        oval2Path.stroke()

        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalIn: CGRect(x: 9, y: 9, width: 22, height: 22))
        accent.setStroke()
        oval3Path.lineWidth = 1
        oval3Path.stroke()
    }

    @objc dynamic public class func drawYoutube(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 35.71, y: 12.99))
        bezierPath.addCurve(to: CGPoint(x: 35.9, y: 11.38), controlPoint1: CGPoint(x: 35.84, y: 12.66), controlPoint2: CGPoint(x: 35.9, y: 12.13))
        bezierPath.addLine(to: CGPoint(x: 35.9, y: 8.26))
        bezierPath.addCurve(to: CGPoint(x: 35.71, y: 6.69), controlPoint1: CGPoint(x: 35.9, y: 7.54), controlPoint2: CGPoint(x: 35.84, y: 7.02))
        bezierPath.addCurve(to: CGPoint(x: 35.05, y: 6.19), controlPoint1: CGPoint(x: 35.59, y: 6.35), controlPoint2: CGPoint(x: 35.36, y: 6.19))
        bezierPath.addCurve(to: CGPoint(x: 34.4, y: 6.69), controlPoint1: CGPoint(x: 34.74, y: 6.19), controlPoint2: CGPoint(x: 34.53, y: 6.35))
        bezierPath.addCurve(to: CGPoint(x: 34.22, y: 8.26), controlPoint1: CGPoint(x: 34.28, y: 7.02), controlPoint2: CGPoint(x: 34.22, y: 7.54))
        bezierPath.addLine(to: CGPoint(x: 34.22, y: 11.38))
        bezierPath.addCurve(to: CGPoint(x: 34.4, y: 12.99), controlPoint1: CGPoint(x: 34.22, y: 12.13), controlPoint2: CGPoint(x: 34.28, y: 12.66))
        bezierPath.addCurve(to: CGPoint(x: 35.05, y: 13.48), controlPoint1: CGPoint(x: 34.51, y: 13.31), controlPoint2: CGPoint(x: 34.73, y: 13.48))
        bezierPath.addCurve(to: CGPoint(x: 35.71, y: 12.99), controlPoint1: CGPoint(x: 35.36, y: 13.48), controlPoint2: CGPoint(x: 35.59, y: 13.31))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 33.18, y: 14.56))
        bezierPath.addCurve(to: CGPoint(x: 32.21, y: 13.13), controlPoint1: CGPoint(x: 32.72, y: 14.25), controlPoint2: CGPoint(x: 32.4, y: 13.78))
        bezierPath.addCurve(to: CGPoint(x: 31.93, y: 10.57), controlPoint1: CGPoint(x: 32.02, y: 12.49), controlPoint2: CGPoint(x: 31.93, y: 11.64))
        bezierPath.addLine(to: CGPoint(x: 31.93, y: 9.11))
        bezierPath.addCurve(to: CGPoint(x: 32.25, y: 6.51), controlPoint1: CGPoint(x: 31.93, y: 8.03), controlPoint2: CGPoint(x: 32.04, y: 7.17))
        bezierPath.addCurve(to: CGPoint(x: 33.28, y: 5.08), controlPoint1: CGPoint(x: 32.47, y: 5.86), controlPoint2: CGPoint(x: 32.81, y: 5.38))
        bezierPath.addCurve(to: CGPoint(x: 35.1, y: 4.63), controlPoint1: CGPoint(x: 33.74, y: 4.78), controlPoint2: CGPoint(x: 34.35, y: 4.63))
        bezierPath.addCurve(to: CGPoint(x: 36.88, y: 5.09), controlPoint1: CGPoint(x: 35.84, y: 4.63), controlPoint2: CGPoint(x: 36.43, y: 4.79))
        bezierPath.addCurve(to: CGPoint(x: 37.86, y: 6.52), controlPoint1: CGPoint(x: 37.33, y: 5.4), controlPoint2: CGPoint(x: 37.65, y: 5.87))
        bezierPath.addCurve(to: CGPoint(x: 38.17, y: 9.11), controlPoint1: CGPoint(x: 38.07, y: 7.17), controlPoint2: CGPoint(x: 38.17, y: 8.03))
        bezierPath.addLine(to: CGPoint(x: 38.17, y: 10.57))
        bezierPath.addCurve(to: CGPoint(x: 37.87, y: 13.14), controlPoint1: CGPoint(x: 38.17, y: 11.64), controlPoint2: CGPoint(x: 38.07, y: 12.49))
        bezierPath.addCurve(to: CGPoint(x: 36.89, y: 14.56), controlPoint1: CGPoint(x: 37.67, y: 13.79), controlPoint2: CGPoint(x: 37.34, y: 14.26))
        bezierPath.addCurve(to: CGPoint(x: 35.05, y: 15.01), controlPoint1: CGPoint(x: 36.44, y: 14.86), controlPoint2: CGPoint(x: 35.82, y: 15.01))
        bezierPath.addCurve(to: CGPoint(x: 33.18, y: 14.56), controlPoint1: CGPoint(x: 34.25, y: 15.01), controlPoint2: CGPoint(x: 33.63, y: 14.86))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 67.89, y: 10.59))
        bezierPath.addLine(to: CGPoint(x: 67.89, y: 11.1))
        bezierPath.addCurve(to: CGPoint(x: 67.95, y: 12.54), controlPoint1: CGPoint(x: 67.89, y: 11.74), controlPoint2: CGPoint(x: 67.91, y: 12.22))
        bezierPath.addCurve(to: CGPoint(x: 68.19, y: 13.25), controlPoint1: CGPoint(x: 67.99, y: 12.87), controlPoint2: CGPoint(x: 68.07, y: 13.1))
        bezierPath.addCurve(to: CGPoint(x: 68.74, y: 13.47), controlPoint1: CGPoint(x: 68.31, y: 13.39), controlPoint2: CGPoint(x: 68.49, y: 13.47))
        bezierPath.addCurve(to: CGPoint(x: 69.44, y: 13.08), controlPoint1: CGPoint(x: 69.08, y: 13.47), controlPoint2: CGPoint(x: 69.31, y: 13.34))
        bezierPath.addCurve(to: CGPoint(x: 69.64, y: 11.77), controlPoint1: CGPoint(x: 69.56, y: 12.81), controlPoint2: CGPoint(x: 69.63, y: 12.38))
        bezierPath.addLine(to: CGPoint(x: 71.59, y: 11.88))
        bezierPath.addCurve(to: CGPoint(x: 71.61, y: 12.24), controlPoint1: CGPoint(x: 71.6, y: 11.97), controlPoint2: CGPoint(x: 71.61, y: 12.09))
        bezierPath.addCurve(to: CGPoint(x: 70.85, y: 14.32), controlPoint1: CGPoint(x: 71.61, y: 13.17), controlPoint2: CGPoint(x: 71.35, y: 13.86))
        bezierPath.addCurve(to: CGPoint(x: 68.7, y: 15), controlPoint1: CGPoint(x: 70.34, y: 14.78), controlPoint2: CGPoint(x: 69.62, y: 15))
        bezierPath.addCurve(to: CGPoint(x: 66.36, y: 13.96), controlPoint1: CGPoint(x: 67.58, y: 15), controlPoint2: CGPoint(x: 66.8, y: 14.66))
        bezierPath.addCurve(to: CGPoint(x: 65.69, y: 10.72), controlPoint1: CGPoint(x: 65.91, y: 13.26), controlPoint2: CGPoint(x: 65.69, y: 12.18))
        bezierPath.addLine(to: CGPoint(x: 65.69, y: 8.97))
        bezierPath.addCurve(to: CGPoint(x: 66.38, y: 5.68), controlPoint1: CGPoint(x: 65.69, y: 7.47), controlPoint2: CGPoint(x: 65.92, y: 6.37))
        bezierPath.addCurve(to: CGPoint(x: 68.76, y: 4.64), controlPoint1: CGPoint(x: 66.85, y: 4.99), controlPoint2: CGPoint(x: 67.64, y: 4.64))
        bezierPath.addCurve(to: CGPoint(x: 70.54, y: 5.07), controlPoint1: CGPoint(x: 69.53, y: 4.64), controlPoint2: CGPoint(x: 70.13, y: 4.78))
        bezierPath.addCurve(to: CGPoint(x: 71.42, y: 6.39), controlPoint1: CGPoint(x: 70.96, y: 5.35), controlPoint2: CGPoint(x: 71.25, y: 5.79))
        bezierPath.addCurve(to: CGPoint(x: 71.67, y: 8.87), controlPoint1: CGPoint(x: 71.59, y: 6.99), controlPoint2: CGPoint(x: 71.67, y: 7.82))
        bezierPath.addLine(to: CGPoint(x: 71.67, y: 10.59))
        bezierPath.addLine(to: CGPoint(x: 67.89, y: 10.59))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 27.68, y: 10.4))
        bezierPath.addLine(to: CGPoint(x: 25.12, y: 1.14))
        bezierPath.addLine(to: CGPoint(x: 27.36, y: 1.14))
        bezierPath.addLine(to: CGPoint(x: 28.26, y: 5.34))
        bezierPath.addCurve(to: CGPoint(x: 28.76, y: 7.98), controlPoint1: CGPoint(x: 28.49, y: 6.37), controlPoint2: CGPoint(x: 28.65, y: 7.25))
        bezierPath.addLine(to: CGPoint(x: 28.83, y: 7.98))
        bezierPath.addCurve(to: CGPoint(x: 29.34, y: 5.35), controlPoint1: CGPoint(x: 28.9, y: 7.46), controlPoint2: CGPoint(x: 29.07, y: 6.58))
        bezierPath.addLine(to: CGPoint(x: 30.27, y: 1.14))
        bezierPath.addLine(to: CGPoint(x: 32.51, y: 1.14))
        bezierPath.addLine(to: CGPoint(x: 29.91, y: 10.4))
        bezierPath.addLine(to: CGPoint(x: 29.91, y: 14.85))
        bezierPath.addLine(to: CGPoint(x: 27.68, y: 14.85))
        bezierPath.addLine(to: CGPoint(x: 27.68, y: 10.4))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 45.45, y: 4.83))
        bezierPath.addLine(to: CGPoint(x: 45.45, y: 14.85))
        bezierPath.addLine(to: CGPoint(x: 43.69, y: 14.85))
        bezierPath.addLine(to: CGPoint(x: 43.49, y: 13.62))
        bezierPath.addLine(to: CGPoint(x: 43.44, y: 13.62))
        bezierPath.addCurve(to: CGPoint(x: 41.29, y: 15.01), controlPoint1: CGPoint(x: 42.96, y: 14.55), controlPoint2: CGPoint(x: 42.24, y: 15.01))
        bezierPath.addCurve(to: CGPoint(x: 39.81, y: 14.36), controlPoint1: CGPoint(x: 40.62, y: 15.01), controlPoint2: CGPoint(x: 40.13, y: 14.8))
        bezierPath.addCurve(to: CGPoint(x: 39.34, y: 12.32), controlPoint1: CGPoint(x: 39.5, y: 13.92), controlPoint2: CGPoint(x: 39.34, y: 13.24))
        bezierPath.addLine(to: CGPoint(x: 39.34, y: 4.83))
        bezierPath.addLine(to: CGPoint(x: 41.6, y: 4.83))
        bezierPath.addLine(to: CGPoint(x: 41.6, y: 12.19))
        bezierPath.addCurve(to: CGPoint(x: 41.74, y: 13.14), controlPoint1: CGPoint(x: 41.6, y: 12.63), controlPoint2: CGPoint(x: 41.65, y: 12.95))
        bezierPath.addCurve(to: CGPoint(x: 42.23, y: 13.43), controlPoint1: CGPoint(x: 41.84, y: 13.33), controlPoint2: CGPoint(x: 42.01, y: 13.43))
        bezierPath.addCurve(to: CGPoint(x: 42.8, y: 13.25), controlPoint1: CGPoint(x: 42.43, y: 13.43), controlPoint2: CGPoint(x: 42.62, y: 13.37))
        bezierPath.addCurve(to: CGPoint(x: 43.2, y: 12.79), controlPoint1: CGPoint(x: 42.98, y: 13.13), controlPoint2: CGPoint(x: 43.11, y: 12.98))
        bezierPath.addLine(to: CGPoint(x: 43.2, y: 4.83))
        bezierPath.addLine(to: CGPoint(x: 45.45, y: 4.83))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 57.02, y: 4.83))
        bezierPath.addLine(to: CGPoint(x: 57.02, y: 14.85))
        bezierPath.addLine(to: CGPoint(x: 55.26, y: 14.85))
        bezierPath.addLine(to: CGPoint(x: 55.06, y: 13.62))
        bezierPath.addLine(to: CGPoint(x: 55.01, y: 13.62))
        bezierPath.addCurve(to: CGPoint(x: 52.86, y: 15.01), controlPoint1: CGPoint(x: 54.53, y: 14.55), controlPoint2: CGPoint(x: 53.82, y: 15.01))
        bezierPath.addCurve(to: CGPoint(x: 51.39, y: 14.36), controlPoint1: CGPoint(x: 52.19, y: 15.01), controlPoint2: CGPoint(x: 51.7, y: 14.8))
        bezierPath.addCurve(to: CGPoint(x: 50.91, y: 12.32), controlPoint1: CGPoint(x: 51.07, y: 13.92), controlPoint2: CGPoint(x: 50.91, y: 13.24))
        bezierPath.addLine(to: CGPoint(x: 50.91, y: 4.83))
        bezierPath.addLine(to: CGPoint(x: 53.17, y: 4.83))
        bezierPath.addLine(to: CGPoint(x: 53.17, y: 12.19))
        bezierPath.addCurve(to: CGPoint(x: 53.31, y: 13.14), controlPoint1: CGPoint(x: 53.17, y: 12.63), controlPoint2: CGPoint(x: 53.22, y: 12.95))
        bezierPath.addCurve(to: CGPoint(x: 53.8, y: 13.43), controlPoint1: CGPoint(x: 53.41, y: 13.33), controlPoint2: CGPoint(x: 53.58, y: 13.43))
        bezierPath.addCurve(to: CGPoint(x: 54.37, y: 13.25), controlPoint1: CGPoint(x: 54, y: 13.43), controlPoint2: CGPoint(x: 54.19, y: 13.37))
        bezierPath.addCurve(to: CGPoint(x: 54.77, y: 12.79), controlPoint1: CGPoint(x: 54.55, y: 13.13), controlPoint2: CGPoint(x: 54.68, y: 12.98))
        bezierPath.addLine(to: CGPoint(x: 54.77, y: 4.83))
        bezierPath.addLine(to: CGPoint(x: 57.02, y: 4.83))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 51.58, y: 2.95))
        bezierPath.addLine(to: CGPoint(x: 49.34, y: 2.95))
        bezierPath.addLine(to: CGPoint(x: 49.34, y: 14.85))
        bezierPath.addLine(to: CGPoint(x: 47.14, y: 14.85))
        bezierPath.addLine(to: CGPoint(x: 47.14, y: 2.95))
        bezierPath.addLine(to: CGPoint(x: 44.9, y: 2.95))
        bezierPath.addLine(to: CGPoint(x: 44.9, y: 1.14))
        bezierPath.addLine(to: CGPoint(x: 51.58, y: 1.14))
        bezierPath.addLine(to: CGPoint(x: 51.58, y: 2.95))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 64.49, y: 6.43))
        bezierPath.addCurve(to: CGPoint(x: 64.69, y: 9.06), controlPoint1: CGPoint(x: 64.63, y: 7.06), controlPoint2: CGPoint(x: 64.69, y: 7.94))
        bezierPath.addLine(to: CGPoint(x: 64.69, y: 10.65))
        bezierPath.addCurve(to: CGPoint(x: 64.16, y: 13.94), controlPoint1: CGPoint(x: 64.69, y: 12.14), controlPoint2: CGPoint(x: 64.51, y: 13.24))
        bezierPath.addCurve(to: CGPoint(x: 62.47, y: 15), controlPoint1: CGPoint(x: 63.8, y: 14.65), controlPoint2: CGPoint(x: 63.23, y: 15))
        bezierPath.addCurve(to: CGPoint(x: 61.31, y: 14.7), controlPoint1: CGPoint(x: 62.05, y: 15), controlPoint2: CGPoint(x: 61.66, y: 14.9))
        bezierPath.addCurve(to: CGPoint(x: 60.53, y: 13.9), controlPoint1: CGPoint(x: 60.96, y: 14.51), controlPoint2: CGPoint(x: 60.7, y: 14.24))
        bezierPath.addLine(to: CGPoint(x: 60.48, y: 13.9))
        bezierPath.addLine(to: CGPoint(x: 60.25, y: 14.85))
        bezierPath.addLine(to: CGPoint(x: 58.39, y: 14.85))
        bezierPath.addLine(to: CGPoint(x: 58.39, y: 0.63))
        bezierPath.addLine(to: CGPoint(x: 60.56, y: 0.63))
        bezierPath.addLine(to: CGPoint(x: 60.56, y: 5.91))
        bezierPath.addLine(to: CGPoint(x: 60.58, y: 5.91))
        bezierPath.addCurve(to: CGPoint(x: 61.41, y: 4.99), controlPoint1: CGPoint(x: 60.77, y: 5.53), controlPoint2: CGPoint(x: 61.05, y: 5.22))
        bezierPath.addCurve(to: CGPoint(x: 62.57, y: 4.63), controlPoint1: CGPoint(x: 61.77, y: 4.75), controlPoint2: CGPoint(x: 62.16, y: 4.63))
        bezierPath.addCurve(to: CGPoint(x: 63.83, y: 5.06), controlPoint1: CGPoint(x: 63.1, y: 4.63), controlPoint2: CGPoint(x: 63.52, y: 4.78))
        bezierPath.addCurve(to: CGPoint(x: 64.49, y: 6.43), controlPoint1: CGPoint(x: 64.13, y: 5.34), controlPoint2: CGPoint(x: 64.35, y: 5.8))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 22.38, y: 2.5))
        bezierPath.addCurve(to: CGPoint(x: 22.86, y: 8), controlPoint1: CGPoint(x: 22.86, y: 4.28), controlPoint2: CGPoint(x: 22.86, y: 8))
        bezierPath.addCurve(to: CGPoint(x: 22.38, y: 13.5), controlPoint1: CGPoint(x: 22.86, y: 8), controlPoint2: CGPoint(x: 22.86, y: 11.72))
        bezierPath.addCurve(to: CGPoint(x: 20.36, y: 15.52), controlPoint1: CGPoint(x: 22.12, y: 14.48), controlPoint2: CGPoint(x: 21.34, y: 15.26))
        bezierPath.addCurve(to: CGPoint(x: 11.43, y: 16), controlPoint1: CGPoint(x: 18.58, y: 16), controlPoint2: CGPoint(x: 11.43, y: 16))
        bezierPath.addCurve(to: CGPoint(x: 2.5, y: 15.52), controlPoint1: CGPoint(x: 11.43, y: 16), controlPoint2: CGPoint(x: 4.28, y: 16))
        bezierPath.addCurve(to: CGPoint(x: 0.48, y: 13.5), controlPoint1: CGPoint(x: 1.51, y: 15.26), controlPoint2: CGPoint(x: 0.74, y: 14.48))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 0, y: 11.72), controlPoint2: CGPoint(x: 0, y: 8))
        bezierPath.addCurve(to: CGPoint(x: 0.48, y: 2.5), controlPoint1: CGPoint(x: 0, y: 8), controlPoint2: CGPoint(x: 0, y: 4.28))
        bezierPath.addCurve(to: CGPoint(x: 2.5, y: 0.48), controlPoint1: CGPoint(x: 0.74, y: 1.51), controlPoint2: CGPoint(x: 1.51, y: 0.74))
        bezierPath.addCurve(to: CGPoint(x: 11.43, y: 0), controlPoint1: CGPoint(x: 4.28, y: 0), controlPoint2: CGPoint(x: 11.43, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 20.36, y: 0.48), controlPoint1: CGPoint(x: 11.43, y: 0), controlPoint2: CGPoint(x: 18.58, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 22.38, y: 2.5), controlPoint1: CGPoint(x: 21.34, y: 0.74), controlPoint2: CGPoint(x: 22.12, y: 1.51))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 9.14, y: 11.43))
        bezierPath.addLine(to: CGPoint(x: 15.08, y: 8))
        bezierPath.addLine(to: CGPoint(x: 9.14, y: 4.57))
        bezierPath.addLine(to: CGPoint(x: 9.14, y: 11.43))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 68.18, y: 6.37))
        bezierPath.addCurve(to: CGPoint(x: 67.95, y: 7.07), controlPoint1: CGPoint(x: 68.07, y: 6.52), controlPoint2: CGPoint(x: 67.99, y: 6.75))
        bezierPath.addCurve(to: CGPoint(x: 67.89, y: 8.53), controlPoint1: CGPoint(x: 67.91, y: 7.39), controlPoint2: CGPoint(x: 67.89, y: 7.88))
        bezierPath.addLine(to: CGPoint(x: 67.89, y: 9.25))
        bezierPath.addLine(to: CGPoint(x: 69.55, y: 9.25))
        bezierPath.addLine(to: CGPoint(x: 69.55, y: 8.53))
        bezierPath.addCurve(to: CGPoint(x: 69.48, y: 7.07), controlPoint1: CGPoint(x: 69.55, y: 7.89), controlPoint2: CGPoint(x: 69.52, y: 7.4))
        bezierPath.addCurve(to: CGPoint(x: 69.24, y: 6.37), controlPoint1: CGPoint(x: 69.44, y: 6.74), controlPoint2: CGPoint(x: 69.36, y: 6.5))
        bezierPath.addCurve(to: CGPoint(x: 68.71, y: 6.16), controlPoint1: CGPoint(x: 69.13, y: 6.23), controlPoint2: CGPoint(x: 68.95, y: 6.16))
        bezierPath.addCurve(to: CGPoint(x: 68.18, y: 6.37), controlPoint1: CGPoint(x: 68.47, y: 6.16), controlPoint2: CGPoint(x: 68.3, y: 6.23))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 62.42, y: 10.52))
        bezierPath.addLine(to: CGPoint(x: 62.42, y: 9.23))
        bezierPath.addCurve(to: CGPoint(x: 62.35, y: 7.41), controlPoint1: CGPoint(x: 62.42, y: 8.44), controlPoint2: CGPoint(x: 62.4, y: 7.84))
        bezierPath.addCurve(to: CGPoint(x: 62.09, y: 6.51), controlPoint1: CGPoint(x: 62.3, y: 6.99), controlPoint2: CGPoint(x: 62.21, y: 6.69))
        bezierPath.addCurve(to: CGPoint(x: 61.56, y: 6.24), controlPoint1: CGPoint(x: 61.96, y: 6.33), controlPoint2: CGPoint(x: 61.78, y: 6.24))
        bezierPath.addCurve(to: CGPoint(x: 60.95, y: 6.5), controlPoint1: CGPoint(x: 61.34, y: 6.24), controlPoint2: CGPoint(x: 61.14, y: 6.32))
        bezierPath.addCurve(to: CGPoint(x: 60.56, y: 7.17), controlPoint1: CGPoint(x: 60.77, y: 6.67), controlPoint2: CGPoint(x: 60.64, y: 6.9))
        bezierPath.addLine(to: CGPoint(x: 60.56, y: 12.86))
        bezierPath.addCurve(to: CGPoint(x: 60.94, y: 13.25), controlPoint1: CGPoint(x: 60.66, y: 13.03), controlPoint2: CGPoint(x: 60.78, y: 13.16))
        bezierPath.addCurve(to: CGPoint(x: 61.46, y: 13.38), controlPoint1: CGPoint(x: 61.1, y: 13.34), controlPoint2: CGPoint(x: 61.27, y: 13.38))
        bezierPath.addCurve(to: CGPoint(x: 62.03, y: 13.12), controlPoint1: CGPoint(x: 61.7, y: 13.38), controlPoint2: CGPoint(x: 61.89, y: 13.29))
        bezierPath.addCurve(to: CGPoint(x: 62.33, y: 12.24), controlPoint1: CGPoint(x: 62.17, y: 12.94), controlPoint2: CGPoint(x: 62.27, y: 12.65))
        bezierPath.addCurve(to: CGPoint(x: 62.42, y: 10.52), controlPoint1: CGPoint(x: 62.39, y: 11.82), controlPoint2: CGPoint(x: 62.42, y: 11.25))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        color.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawMissedcalllast(accent: UIColor = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// Color Declarations
        let accentopacity64 = accent.withAlpha(0.64)
        let accentopacity32 = accent.withAlpha(0.32)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 1, y: 1, width: 38, height: 38))
        accentopacity32.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()

        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 5, y: 5, width: 30, height: 30))
        accentopacity64.setStroke()
        oval2Path.lineWidth = 1
        oval2Path.stroke()

        //// Text Drawing
        let textPath = UIBezierPath()
        textPath.move(to: CGPoint(x: 17.02, y: 10))
        textPath.addCurve(to: CGPoint(x: 16.51, y: 10.11), controlPoint1: CGPoint(x: 16.85, y: 10), controlPoint2: CGPoint(x: 16.68, y: 10.04))
        textPath.addLine(to: CGPoint(x: 15.11, y: 10.72))
        textPath.addCurve(to: CGPoint(x: 11.6, y: 16.02), controlPoint1: CGPoint(x: 12.87, y: 11.74), controlPoint2: CGPoint(x: 11.6, y: 13.81))
        textPath.addCurve(to: CGPoint(x: 12.43, y: 19.07), controlPoint1: CGPoint(x: 11.6, y: 17.04), controlPoint2: CGPoint(x: 11.87, y: 18.08))
        textPath.addLine(to: CGPoint(x: 16.97, y: 26.99))
        textPath.addCurve(to: CGPoint(x: 21.97, y: 30), controlPoint1: CGPoint(x: 18.09, y: 28.94), controlPoint2: CGPoint(x: 19.99, y: 30))
        textPath.addCurve(to: CGPoint(x: 25.47, y: 28.82), controlPoint1: CGPoint(x: 23.16, y: 30), controlPoint2: CGPoint(x: 24.38, y: 29.62))
        textPath.addLine(to: CGPoint(x: 26.7, y: 27.91))
        textPath.addCurve(to: CGPoint(x: 27.23, y: 26.85), controlPoint1: CGPoint(x: 27.04, y: 27.65), controlPoint2: CGPoint(x: 27.23, y: 27.26))
        textPath.addCurve(to: CGPoint(x: 26.97, y: 26.07), controlPoint1: CGPoint(x: 27.23, y: 26.58), controlPoint2: CGPoint(x: 27.14, y: 26.31))
        textPath.addLine(to: CGPoint(x: 24.72, y: 22.96))
        textPath.addCurve(to: CGPoint(x: 23.66, y: 22.42), controlPoint1: CGPoint(x: 24.46, y: 22.6), controlPoint2: CGPoint(x: 24.06, y: 22.42))
        textPath.addCurve(to: CGPoint(x: 22.89, y: 22.64), controlPoint1: CGPoint(x: 23.39, y: 22.42), controlPoint2: CGPoint(x: 23.13, y: 22.49))
        textPath.addCurve(to: CGPoint(x: 21.53, y: 23.29), controlPoint1: CGPoint(x: 22.89, y: 22.64), controlPoint2: CGPoint(x: 22.25, y: 23.29))
        textPath.addCurve(to: CGPoint(x: 20.39, y: 22.51), controlPoint1: CGPoint(x: 21.14, y: 23.29), controlPoint2: CGPoint(x: 20.73, y: 23.1))
        textPath.addLine(to: CGPoint(x: 17.93, y: 18.2))
        textPath.addCurve(to: CGPoint(x: 17.68, y: 17.37), controlPoint1: CGPoint(x: 17.75, y: 17.89), controlPoint2: CGPoint(x: 17.68, y: 17.61))
        textPath.addCurve(to: CGPoint(x: 19.07, y: 15.94), controlPoint1: CGPoint(x: 17.68, y: 16.33), controlPoint2: CGPoint(x: 19.07, y: 15.94))
        textPath.addCurve(to: CGPoint(x: 19.83, y: 14.73), controlPoint1: CGPoint(x: 19.55, y: 15.72), controlPoint2: CGPoint(x: 19.83, y: 15.23))
        textPath.addCurve(to: CGPoint(x: 19.72, y: 14.19), controlPoint1: CGPoint(x: 19.83, y: 14.55), controlPoint2: CGPoint(x: 19.79, y: 14.37))
        textPath.addLine(to: CGPoint(x: 18.22, y: 10.78))
        textPath.addCurve(to: CGPoint(x: 17.02, y: 10), controlPoint1: CGPoint(x: 18, y: 10.29), controlPoint2: CGPoint(x: 17.52, y: 10))
        textPath.close()
        textPath.move(to: CGPoint(x: 17.01, y: 11.25))
        textPath.addLine(to: CGPoint(x: 17.07, y: 11.29))
        textPath.addLine(to: CGPoint(x: 18.57, y: 14.7))
        textPath.addLine(to: CGPoint(x: 18.56, y: 14.79))
        textPath.addCurve(to: CGPoint(x: 16.43, y: 17.38), controlPoint1: CGPoint(x: 17.98, y: 14.99), controlPoint2: CGPoint(x: 16.43, y: 15.67))
        textPath.addCurve(to: CGPoint(x: 16.84, y: 18.82), controlPoint1: CGPoint(x: 16.43, y: 17.79), controlPoint2: CGPoint(x: 16.53, y: 18.28))
        textPath.addLine(to: CGPoint(x: 19.31, y: 23.13))
        textPath.addCurve(to: CGPoint(x: 21.53, y: 24.54), controlPoint1: CGPoint(x: 20.01, y: 24.36), controlPoint2: CGPoint(x: 21, y: 24.54))
        textPath.addCurve(to: CGPoint(x: 23.62, y: 23.67), controlPoint1: CGPoint(x: 22.5, y: 24.54), controlPoint2: CGPoint(x: 23.28, y: 23.97))
        textPath.addLine(to: CGPoint(x: 23.71, y: 23.69))
        textPath.addLine(to: CGPoint(x: 25.96, y: 26.81))
        textPath.addCurve(to: CGPoint(x: 25.95, y: 26.91), controlPoint1: CGPoint(x: 25.99, y: 26.84), controlPoint2: CGPoint(x: 25.98, y: 26.89))
        textPath.addLine(to: CGPoint(x: 24.73, y: 27.82))
        textPath.addCurve(to: CGPoint(x: 21.97, y: 28.75), controlPoint1: CGPoint(x: 23.89, y: 28.43), controlPoint2: CGPoint(x: 22.94, y: 28.75))
        textPath.addCurve(to: CGPoint(x: 18.05, y: 26.37), controlPoint1: CGPoint(x: 20.37, y: 28.75), controlPoint2: CGPoint(x: 18.91, y: 27.86))
        textPath.addLine(to: CGPoint(x: 13.52, y: 18.45))
        textPath.addCurve(to: CGPoint(x: 12.85, y: 16.02), controlPoint1: CGPoint(x: 13.08, y: 17.67), controlPoint2: CGPoint(x: 12.85, y: 16.84))
        textPath.addCurve(to: CGPoint(x: 13.07, y: 14.65), controlPoint1: CGPoint(x: 12.85, y: 15.56), controlPoint2: CGPoint(x: 12.92, y: 15.1))
        textPath.addCurve(to: CGPoint(x: 15.62, y: 11.86), controlPoint1: CGPoint(x: 13.47, y: 13.42), controlPoint2: CGPoint(x: 14.37, y: 12.43))
        textPath.addLine(to: CGPoint(x: 17.01, y: 11.25))
        textPath.close()
        accent.setFill()
        textPath.fill()
    }

    @objc dynamic public class func drawVimeo(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// logo-vimeo Drawing
        let logovimeoPath = UIBezierPath()
        logovimeoPath.move(to: CGPoint(x: 26.16, y: 0.76))
        logovimeoPath.addCurve(to: CGPoint(x: 26.7, y: 2.16), controlPoint1: CGPoint(x: 26.55, y: 1.22), controlPoint2: CGPoint(x: 26.73, y: 1.69))
        logovimeoPath.addCurve(to: CGPoint(x: 25.65, y: 4.18), controlPoint1: CGPoint(x: 26.68, y: 2.86), controlPoint2: CGPoint(x: 26.32, y: 3.54))
        logovimeoPath.addCurve(to: CGPoint(x: 22.95, y: 5.27), controlPoint1: CGPoint(x: 24.89, y: 4.91), controlPoint2: CGPoint(x: 23.99, y: 5.27))
        logovimeoPath.addCurve(to: CGPoint(x: 20.63, y: 3.17), controlPoint1: CGPoint(x: 21.35, y: 5.27), controlPoint2: CGPoint(x: 20.57, y: 4.57))
        logovimeoPath.addCurve(to: CGPoint(x: 21.16, y: 1.83), controlPoint1: CGPoint(x: 20.65, y: 2.71), controlPoint2: CGPoint(x: 20.82, y: 2.27))
        logovimeoPath.addCurve(to: CGPoint(x: 21.91, y: 1.07), controlPoint1: CGPoint(x: 21.35, y: 1.58), controlPoint2: CGPoint(x: 21.61, y: 1.32))
        logovimeoPath.addCurve(to: CGPoint(x: 22.28, y: 0.8), controlPoint1: CGPoint(x: 22.04, y: 0.97), controlPoint2: CGPoint(x: 22.16, y: 0.88))
        logovimeoPath.addCurve(to: CGPoint(x: 24.68, y: 0.07), controlPoint1: CGPoint(x: 23.02, y: 0.31), controlPoint2: CGPoint(x: 23.81, y: 0.07))
        logovimeoPath.addCurve(to: CGPoint(x: 26.16, y: 0.76), controlPoint1: CGPoint(x: 25.27, y: 0.07), controlPoint2: CGPoint(x: 25.76, y: 0.3))
        logovimeoPath.close()
        logovimeoPath.move(to: CGPoint(x: 62.03, y: 11.58))
        logovimeoPath.addCurve(to: CGPoint(x: 60.62, y: 12.11), controlPoint1: CGPoint(x: 61.57, y: 11.58), controlPoint2: CGPoint(x: 61.1, y: 11.76))
        logovimeoPath.addCurve(to: CGPoint(x: 59.47, y: 13.32), controlPoint1: CGPoint(x: 60.24, y: 12.4), controlPoint2: CGPoint(x: 59.85, y: 12.8))
        logovimeoPath.addCurve(to: CGPoint(x: 58.12, y: 16.66), controlPoint1: CGPoint(x: 58.59, y: 14.48), controlPoint2: CGPoint(x: 58.15, y: 15.59))
        logovimeoPath.addCurve(to: CGPoint(x: 58.12, y: 17.2), controlPoint1: CGPoint(x: 58.1, y: 16.66), controlPoint2: CGPoint(x: 58.1, y: 16.84))
        logovimeoPath.addCurve(to: CGPoint(x: 61.7, y: 14.9), controlPoint1: CGPoint(x: 59.49, y: 16.7), controlPoint2: CGPoint(x: 60.69, y: 15.93))
        logovimeoPath.addCurve(to: CGPoint(x: 62.96, y: 12.71), controlPoint1: CGPoint(x: 62.51, y: 14), controlPoint2: CGPoint(x: 62.93, y: 13.27))
        logovimeoPath.addCurve(to: CGPoint(x: 62.03, y: 11.58), controlPoint1: CGPoint(x: 62.99, y: 11.96), controlPoint2: CGPoint(x: 62.68, y: 11.58))
        logovimeoPath.close()
        logovimeoPath.move(to: CGPoint(x: 16.05, y: 7.48))
        logovimeoPath.addCurve(to: CGPoint(x: 18.78, y: 10.54), controlPoint1: CGPoint(x: 17.79, y: 7.53), controlPoint2: CGPoint(x: 18.7, y: 8.55))
        logovimeoPath.addCurve(to: CGPoint(x: 20.04, y: 9.4), controlPoint1: CGPoint(x: 19.42, y: 9.96), controlPoint2: CGPoint(x: 20.04, y: 9.4))
        logovimeoPath.addCurve(to: CGPoint(x: 22.74, y: 7.72), controlPoint1: CGPoint(x: 21.25, y: 8.33), controlPoint2: CGPoint(x: 22.15, y: 7.77))
        logovimeoPath.addCurve(to: CGPoint(x: 24.78, y: 8.53), controlPoint1: CGPoint(x: 23.67, y: 7.63), controlPoint2: CGPoint(x: 24.35, y: 7.9))
        logovimeoPath.addCurve(to: CGPoint(x: 25.27, y: 10.99), controlPoint1: CGPoint(x: 25.22, y: 9.17), controlPoint2: CGPoint(x: 25.38, y: 9.98))
        logovimeoPath.addCurve(to: CGPoint(x: 24.09, y: 17.5), controlPoint1: CGPoint(x: 24.9, y: 12.7), controlPoint2: CGPoint(x: 24.51, y: 14.87))
        logovimeoPath.addCurve(to: CGPoint(x: 25.4, y: 19.31), controlPoint1: CGPoint(x: 24.06, y: 18.71), controlPoint2: CGPoint(x: 24.5, y: 19.31))
        logovimeoPath.addCurve(to: CGPoint(x: 27.51, y: 18.06), controlPoint1: CGPoint(x: 25.79, y: 19.31), controlPoint2: CGPoint(x: 26.49, y: 18.9))
        logovimeoPath.addCurve(to: CGPoint(x: 27.85, y: 15.94), controlPoint1: CGPoint(x: 27.61, y: 17.44), controlPoint2: CGPoint(x: 27.71, y: 16.75))
        logovimeoPath.addCurve(to: CGPoint(x: 28.24, y: 12.89), controlPoint1: CGPoint(x: 28.09, y: 14.63), controlPoint2: CGPoint(x: 28.22, y: 13.62))
        logovimeoPath.addCurve(to: CGPoint(x: 27.86, y: 12.13), controlPoint1: CGPoint(x: 28.3, y: 12.39), controlPoint2: CGPoint(x: 28.17, y: 12.13))
        logovimeoPath.addCurve(to: CGPoint(x: 26.43, y: 12.99), controlPoint1: CGPoint(x: 27.69, y: 12.13), controlPoint2: CGPoint(x: 27.22, y: 12.42))
        logovimeoPath.addLine(to: CGPoint(x: 25.42, y: 11.85))
        logovimeoPath.addCurve(to: CGPoint(x: 28.07, y: 9.4), controlPoint1: CGPoint(x: 25.56, y: 11.74), controlPoint2: CGPoint(x: 26.44, y: 10.92))
        logovimeoPath.addCurve(to: CGPoint(x: 28.67, y: 8.87), controlPoint1: CGPoint(x: 28.28, y: 9.21), controlPoint2: CGPoint(x: 28.48, y: 9.03))
        logovimeoPath.addCurve(to: CGPoint(x: 30.48, y: 7.72), controlPoint1: CGPoint(x: 29.53, y: 8.12), controlPoint2: CGPoint(x: 30.13, y: 7.74))
        logovimeoPath.addCurve(to: CGPoint(x: 32.25, y: 8.62), controlPoint1: CGPoint(x: 31.21, y: 7.66), controlPoint2: CGPoint(x: 31.8, y: 7.96))
        logovimeoPath.addCurve(to: CGPoint(x: 32.86, y: 10.16), controlPoint1: CGPoint(x: 32.56, y: 9.08), controlPoint2: CGPoint(x: 32.77, y: 9.59))
        logovimeoPath.addCurve(to: CGPoint(x: 32.93, y: 10.92), controlPoint1: CGPoint(x: 32.9, y: 10.4), controlPoint2: CGPoint(x: 32.93, y: 10.66))
        logovimeoPath.addCurve(to: CGPoint(x: 32.84, y: 11.72), controlPoint1: CGPoint(x: 32.93, y: 11.2), controlPoint2: CGPoint(x: 32.9, y: 11.47))
        logovimeoPath.addCurve(to: CGPoint(x: 33.86, y: 10.46), controlPoint1: CGPoint(x: 33.14, y: 11.26), controlPoint2: CGPoint(x: 33.48, y: 10.84))
        logovimeoPath.addCurve(to: CGPoint(x: 34.32, y: 10.03), controlPoint1: CGPoint(x: 34, y: 10.31), controlPoint2: CGPoint(x: 34.16, y: 10.17))
        logovimeoPath.addCurve(to: CGPoint(x: 38.66, y: 8.14), controlPoint1: CGPoint(x: 35.61, y: 8.91), controlPoint2: CGPoint(x: 37.06, y: 8.28))
        logovimeoPath.addCurve(to: CGPoint(x: 41.62, y: 9.11), controlPoint1: CGPoint(x: 40.04, y: 8.02), controlPoint2: CGPoint(x: 41.02, y: 8.35))
        logovimeoPath.addCurve(to: CGPoint(x: 42.29, y: 11.76), controlPoint1: CGPoint(x: 42.09, y: 9.73), controlPoint2: CGPoint(x: 42.32, y: 10.61))
        logovimeoPath.addCurve(to: CGPoint(x: 42.92, y: 11.22), controlPoint1: CGPoint(x: 42.49, y: 11.6), controlPoint2: CGPoint(x: 42.7, y: 11.41))
        logovimeoPath.addCurve(to: CGPoint(x: 44.82, y: 9.4), controlPoint1: CGPoint(x: 43.57, y: 10.46), controlPoint2: CGPoint(x: 44.2, y: 9.85))
        logovimeoPath.addCurve(to: CGPoint(x: 48.07, y: 8.14), controlPoint1: CGPoint(x: 45.86, y: 8.64), controlPoint2: CGPoint(x: 46.95, y: 8.22))
        logovimeoPath.addCurve(to: CGPoint(x: 50.98, y: 9.1), controlPoint1: CGPoint(x: 49.42, y: 8.02), controlPoint2: CGPoint(x: 50.39, y: 8.35))
        logovimeoPath.addCurve(to: CGPoint(x: 51.66, y: 11.75), controlPoint1: CGPoint(x: 51.49, y: 9.72), controlPoint2: CGPoint(x: 51.71, y: 10.6))
        logovimeoPath.addCurve(to: CGPoint(x: 51.09, y: 15.17), controlPoint1: CGPoint(x: 51.63, y: 12.53), controlPoint2: CGPoint(x: 51.44, y: 13.68))
        logovimeoPath.addCurve(to: CGPoint(x: 50.96, y: 15.72), controlPoint1: CGPoint(x: 51.04, y: 15.36), controlPoint2: CGPoint(x: 51, y: 15.55))
        logovimeoPath.addCurve(to: CGPoint(x: 50.56, y: 17.76), controlPoint1: CGPoint(x: 50.69, y: 16.88), controlPoint2: CGPoint(x: 50.56, y: 17.56))
        logovimeoPath.addCurve(to: CGPoint(x: 50.73, y: 18.98), controlPoint1: CGPoint(x: 50.53, y: 18.35), controlPoint2: CGPoint(x: 50.59, y: 18.75))
        logovimeoPath.addCurve(to: CGPoint(x: 51.74, y: 19.31), controlPoint1: CGPoint(x: 50.87, y: 19.2), controlPoint2: CGPoint(x: 51.21, y: 19.31))
        logovimeoPath.addCurve(to: CGPoint(x: 52.81, y: 18.84), controlPoint1: CGPoint(x: 51.98, y: 19.31), controlPoint2: CGPoint(x: 52.34, y: 19.16))
        logovimeoPath.addCurve(to: CGPoint(x: 52.75, y: 17.74), controlPoint1: CGPoint(x: 52.76, y: 18.49), controlPoint2: CGPoint(x: 52.75, y: 18.12))
        logovimeoPath.addCurve(to: CGPoint(x: 55.79, y: 11.25), controlPoint1: CGPoint(x: 52.78, y: 15.46), controlPoint2: CGPoint(x: 53.79, y: 13.3))
        logovimeoPath.addLine(to: CGPoint(x: 55.87, y: 11.17))
        logovimeoPath.addCurve(to: CGPoint(x: 56.48, y: 10.59), controlPoint1: CGPoint(x: 56.07, y: 10.97), controlPoint2: CGPoint(x: 56.27, y: 10.77))
        logovimeoPath.addCurve(to: CGPoint(x: 63.55, y: 7.87), controlPoint1: CGPoint(x: 58.52, y: 8.78), controlPoint2: CGPoint(x: 60.88, y: 7.87))
        logovimeoPath.addCurve(to: CGPoint(x: 67.94, y: 11.24), controlPoint1: CGPoint(x: 66.31, y: 7.87), controlPoint2: CGPoint(x: 67.77, y: 9))
        logovimeoPath.addCurve(to: CGPoint(x: 65.58, y: 15.66), controlPoint1: CGPoint(x: 68.05, y: 12.67), controlPoint2: CGPoint(x: 67.26, y: 14.14))
        logovimeoPath.addCurve(to: CGPoint(x: 58.78, y: 18.81), controlPoint1: CGPoint(x: 63.78, y: 17.31), controlPoint2: CGPoint(x: 61.51, y: 18.36))
        logovimeoPath.addCurve(to: CGPoint(x: 61.06, y: 19.86), controlPoint1: CGPoint(x: 59.29, y: 19.51), controlPoint2: CGPoint(x: 60.05, y: 19.86))
        logovimeoPath.addCurve(to: CGPoint(x: 67.69, y: 18.32), controlPoint1: CGPoint(x: 63.09, y: 19.86), controlPoint2: CGPoint(x: 65.3, y: 19.35))
        logovimeoPath.addCurve(to: CGPoint(x: 68, y: 18.18), controlPoint1: CGPoint(x: 67.79, y: 18.27), controlPoint2: CGPoint(x: 67.9, y: 18.23))
        logovimeoPath.addCurve(to: CGPoint(x: 67.96, y: 17.66), controlPoint1: CGPoint(x: 67.98, y: 18.01), controlPoint2: CGPoint(x: 67.97, y: 17.84))
        logovimeoPath.addCurve(to: CGPoint(x: 69.61, y: 12.18), controlPoint1: CGPoint(x: 67.84, y: 15.7), controlPoint2: CGPoint(x: 68.39, y: 13.88))
        logovimeoPath.addCurve(to: CGPoint(x: 70.58, y: 11.01), controlPoint1: CGPoint(x: 69.9, y: 11.78), controlPoint2: CGPoint(x: 70.22, y: 11.39))
        logovimeoPath.addCurve(to: CGPoint(x: 78.21, y: 7.64), controlPoint1: CGPoint(x: 72.6, y: 8.76), controlPoint2: CGPoint(x: 75.14, y: 7.64))
        logovimeoPath.addCurve(to: CGPoint(x: 82.68, y: 9.62), controlPoint1: CGPoint(x: 80.18, y: 7.64), controlPoint2: CGPoint(x: 81.67, y: 8.3))
        logovimeoPath.addCurve(to: CGPoint(x: 83.99, y: 14.29), controlPoint1: CGPoint(x: 83.64, y: 10.82), controlPoint2: CGPoint(x: 84.07, y: 12.38))
        logovimeoPath.addCurve(to: CGPoint(x: 81.12, y: 20.99), controlPoint1: CGPoint(x: 83.88, y: 16.87), controlPoint2: CGPoint(x: 82.92, y: 19.1))
        logovimeoPath.addCurve(to: CGPoint(x: 74.41, y: 23.81), controlPoint1: CGPoint(x: 79.32, y: 22.87), controlPoint2: CGPoint(x: 77.08, y: 23.81))
        logovimeoPath.addCurve(to: CGPoint(x: 69.35, y: 21.66), controlPoint1: CGPoint(x: 72.19, y: 23.81), controlPoint2: CGPoint(x: 70.5, y: 23.09))
        logovimeoPath.addCurve(to: CGPoint(x: 68.68, y: 20.6), controlPoint1: CGPoint(x: 69.09, y: 21.33), controlPoint2: CGPoint(x: 68.87, y: 20.98))
        logovimeoPath.addCurve(to: CGPoint(x: 67.73, y: 21.16), controlPoint1: CGPoint(x: 68.38, y: 20.78), controlPoint2: CGPoint(x: 68.06, y: 20.97))
        logovimeoPath.addCurve(to: CGPoint(x: 58.66, y: 23.73), controlPoint1: CGPoint(x: 64.75, y: 22.87), controlPoint2: CGPoint(x: 61.72, y: 23.73))
        logovimeoPath.addCurve(to: CGPoint(x: 53.76, y: 21.45), controlPoint1: CGPoint(x: 56.38, y: 23.73), controlPoint2: CGPoint(x: 54.75, y: 22.97))
        logovimeoPath.addCurve(to: CGPoint(x: 53.56, y: 21.12), controlPoint1: CGPoint(x: 53.69, y: 21.34), controlPoint2: CGPoint(x: 53.62, y: 21.24))
        logovimeoPath.addLine(to: CGPoint(x: 53.47, y: 21.2))
        logovimeoPath.addCurve(to: CGPoint(x: 47.82, y: 23.65), controlPoint1: CGPoint(x: 51.59, y: 22.83), controlPoint2: CGPoint(x: 49.7, y: 23.65))
        logovimeoPath.addCurve(to: CGPoint(x: 45.16, y: 20.61), controlPoint1: CGPoint(x: 45.99, y: 23.65), controlPoint2: CGPoint(x: 45.1, y: 22.64))
        logovimeoPath.addCurve(to: CGPoint(x: 45.69, y: 17.37), controlPoint1: CGPoint(x: 45.19, y: 19.71), controlPoint2: CGPoint(x: 45.36, y: 18.63))
        logovimeoPath.addCurve(to: CGPoint(x: 46.21, y: 14.42), controlPoint1: CGPoint(x: 46.01, y: 16.11), controlPoint2: CGPoint(x: 46.19, y: 15.12))
        logovimeoPath.addCurve(to: CGPoint(x: 46.22, y: 14.26), controlPoint1: CGPoint(x: 46.22, y: 14.36), controlPoint2: CGPoint(x: 46.22, y: 14.31))
        logovimeoPath.addCurve(to: CGPoint(x: 45.24, y: 12.82), controlPoint1: CGPoint(x: 46.21, y: 13.3), controlPoint2: CGPoint(x: 45.88, y: 12.82))
        logovimeoPath.addCurve(to: CGPoint(x: 43.95, y: 13.56), controlPoint1: CGPoint(x: 44.85, y: 12.82), controlPoint2: CGPoint(x: 44.42, y: 13.07))
        logovimeoPath.addCurve(to: CGPoint(x: 42.62, y: 15.43), controlPoint1: CGPoint(x: 43.53, y: 14), controlPoint2: CGPoint(x: 43.09, y: 14.62))
        logovimeoPath.addCurve(to: CGPoint(x: 40.88, y: 20.74), controlPoint1: CGPoint(x: 41.54, y: 17.26), controlPoint2: CGPoint(x: 40.96, y: 19.03))
        logovimeoPath.addCurve(to: CGPoint(x: 41.24, y: 23.53), controlPoint1: CGPoint(x: 40.82, y: 21.96), controlPoint2: CGPoint(x: 40.94, y: 22.88))
        logovimeoPath.addCurve(to: CGPoint(x: 37.11, y: 22.56), controlPoint1: CGPoint(x: 39.27, y: 23.59), controlPoint2: CGPoint(x: 37.9, y: 23.26))
        logovimeoPath.addCurve(to: CGPoint(x: 36.15, y: 19.48), controlPoint1: CGPoint(x: 36.41, y: 21.94), controlPoint2: CGPoint(x: 36.09, y: 20.92))
        logovimeoPath.addCurve(to: CGPoint(x: 36.56, y: 16.78), controlPoint1: CGPoint(x: 36.17, y: 18.58), controlPoint2: CGPoint(x: 36.31, y: 17.68))
        logovimeoPath.addCurve(to: CGPoint(x: 36.97, y: 14.38), controlPoint1: CGPoint(x: 36.81, y: 15.88), controlPoint2: CGPoint(x: 36.95, y: 15.08))
        logovimeoPath.addCurve(to: CGPoint(x: 35.83, y: 12.82), controlPoint1: CGPoint(x: 37.03, y: 13.34), controlPoint2: CGPoint(x: 36.65, y: 12.82))
        logovimeoPath.addCurve(to: CGPoint(x: 33.55, y: 15.22), controlPoint1: CGPoint(x: 35.13, y: 12.82), controlPoint2: CGPoint(x: 34.37, y: 13.62))
        logovimeoPath.addCurve(to: CGPoint(x: 32.2, y: 20.24), controlPoint1: CGPoint(x: 32.74, y: 16.82), controlPoint2: CGPoint(x: 32.29, y: 18.5))
        logovimeoPath.addCurve(to: CGPoint(x: 32.5, y: 23.53), controlPoint1: CGPoint(x: 32.14, y: 21.81), controlPoint2: CGPoint(x: 32.25, y: 22.91))
        logovimeoPath.addCurve(to: CGPoint(x: 28.39, y: 22.31), controlPoint1: CGPoint(x: 30.57, y: 23.59), controlPoint2: CGPoint(x: 29.2, y: 23.18))
        logovimeoPath.addCurve(to: CGPoint(x: 27.61, y: 20.76), controlPoint1: CGPoint(x: 28.02, y: 21.91), controlPoint2: CGPoint(x: 27.76, y: 21.39))
        logovimeoPath.addCurve(to: CGPoint(x: 27.13, y: 21.2), controlPoint1: CGPoint(x: 27.45, y: 20.91), controlPoint2: CGPoint(x: 27.29, y: 21.06))
        logovimeoPath.addCurve(to: CGPoint(x: 21.47, y: 23.65), controlPoint1: CGPoint(x: 25.24, y: 22.83), controlPoint2: CGPoint(x: 23.36, y: 23.65))
        logovimeoPath.addCurve(to: CGPoint(x: 19.47, y: 22.81), controlPoint1: CGPoint(x: 20.6, y: 23.65), controlPoint2: CGPoint(x: 19.93, y: 23.37))
        logovimeoPath.addCurve(to: CGPoint(x: 18.82, y: 20.61), controlPoint1: CGPoint(x: 19, y: 22.24), controlPoint2: CGPoint(x: 18.79, y: 21.51))
        logovimeoPath.addCurve(to: CGPoint(x: 19.68, y: 16.32), controlPoint1: CGPoint(x: 18.84, y: 19.69), controlPoint2: CGPoint(x: 19.13, y: 18.25))
        logovimeoPath.addCurve(to: CGPoint(x: 20.5, y: 13.2), controlPoint1: CGPoint(x: 20.23, y: 14.38), controlPoint2: CGPoint(x: 20.5, y: 13.34))
        logovimeoPath.addCurve(to: CGPoint(x: 19.74, y: 12.1), controlPoint1: CGPoint(x: 20.5, y: 12.47), controlPoint2: CGPoint(x: 20.25, y: 12.1))
        logovimeoPath.addCurve(to: CGPoint(x: 18.44, y: 12.89), controlPoint1: CGPoint(x: 19.58, y: 12.1), controlPoint2: CGPoint(x: 19.15, y: 12.36))
        logovimeoPath.addCurve(to: CGPoint(x: 14.95, y: 18.75), controlPoint1: CGPoint(x: 17.91, y: 14.48), controlPoint2: CGPoint(x: 16.74, y: 16.44))
        logovimeoPath.addCurve(to: CGPoint(x: 8.46, y: 23.73), controlPoint1: CGPoint(x: 12.39, y: 22.07), controlPoint2: CGPoint(x: 10.23, y: 23.73))
        logovimeoPath.addCurve(to: CGPoint(x: 5.68, y: 20.69), controlPoint1: CGPoint(x: 7.37, y: 23.73), controlPoint2: CGPoint(x: 6.44, y: 22.72))
        logovimeoPath.addLine(to: CGPoint(x: 4.17, y: 15.13))
        logovimeoPath.addCurve(to: CGPoint(x: 2.36, y: 12.1), controlPoint1: CGPoint(x: 3.61, y: 13.11), controlPoint2: CGPoint(x: 3, y: 12.1))
        logovimeoPath.addCurve(to: CGPoint(x: 0.88, y: 12.99), controlPoint1: CGPoint(x: 2.22, y: 12.1), controlPoint2: CGPoint(x: 1.73, y: 12.4))
        logovimeoPath.addLine(to: CGPoint(x: 0, y: 11.85))
        logovimeoPath.addCurve(to: CGPoint(x: 2.74, y: 9.4), controlPoint1: CGPoint(x: 0.93, y: 11.03), controlPoint2: CGPoint(x: 1.84, y: 10.22))
        logovimeoPath.addCurve(to: CGPoint(x: 5.53, y: 7.72), controlPoint1: CGPoint(x: 3.98, y: 8.33), controlPoint2: CGPoint(x: 4.91, y: 7.77))
        logovimeoPath.addCurve(to: CGPoint(x: 8.23, y: 10.71), controlPoint1: CGPoint(x: 6.99, y: 7.57), controlPoint2: CGPoint(x: 7.89, y: 8.57))
        logovimeoPath.addCurve(to: CGPoint(x: 8.98, y: 15.02), controlPoint1: CGPoint(x: 8.59, y: 13.02), controlPoint2: CGPoint(x: 8.84, y: 14.46))
        logovimeoPath.addCurve(to: CGPoint(x: 10.38, y: 17.89), controlPoint1: CGPoint(x: 9.41, y: 16.93), controlPoint2: CGPoint(x: 9.87, y: 17.89))
        logovimeoPath.addCurve(to: CGPoint(x: 12.15, y: 16.03), controlPoint1: CGPoint(x: 10.77, y: 17.89), controlPoint2: CGPoint(x: 11.36, y: 17.27))
        logovimeoPath.addCurve(to: CGPoint(x: 13.41, y: 13.19), controlPoint1: CGPoint(x: 12.93, y: 14.79), controlPoint2: CGPoint(x: 13.36, y: 13.84))
        logovimeoPath.addCurve(to: CGPoint(x: 12.15, y: 11.58), controlPoint1: CGPoint(x: 13.53, y: 12.12), controlPoint2: CGPoint(x: 13.1, y: 11.58))
        logovimeoPath.addCurve(to: CGPoint(x: 10.76, y: 11.89), controlPoint1: CGPoint(x: 11.7, y: 11.58), controlPoint2: CGPoint(x: 11.23, y: 11.68))
        logovimeoPath.addCurve(to: CGPoint(x: 13.33, y: 8.12), controlPoint1: CGPoint(x: 11.31, y: 10.07), controlPoint2: CGPoint(x: 12.17, y: 8.82))
        logovimeoPath.addCurve(to: CGPoint(x: 16.05, y: 7.48), controlPoint1: CGPoint(x: 14.1, y: 7.66), controlPoint2: CGPoint(x: 15.01, y: 7.45))
        logovimeoPath.close()
        logovimeoPath.move(to: CGPoint(x: 77.87, y: 11.09))
        logovimeoPath.addCurve(to: CGPoint(x: 74.57, y: 13.04), controlPoint1: CGPoint(x: 76.56, y: 11.09), controlPoint2: CGPoint(x: 75.46, y: 11.74))
        logovimeoPath.addCurve(to: CGPoint(x: 74.33, y: 13.41), controlPoint1: CGPoint(x: 74.49, y: 13.16), controlPoint2: CGPoint(x: 74.41, y: 13.28))
        logovimeoPath.addCurve(to: CGPoint(x: 73.06, y: 17.47), controlPoint1: CGPoint(x: 73.54, y: 14.68), controlPoint2: CGPoint(x: 73.12, y: 16.03))
        logovimeoPath.addCurve(to: CGPoint(x: 73.44, y: 19.33), controlPoint1: CGPoint(x: 73.04, y: 18.17), controlPoint2: CGPoint(x: 73.16, y: 18.79))
        logovimeoPath.addCurve(to: CGPoint(x: 74.75, y: 20.26), controlPoint1: CGPoint(x: 73.75, y: 19.95), controlPoint2: CGPoint(x: 74.19, y: 20.26))
        logovimeoPath.addCurve(to: CGPoint(x: 78, y: 18.02), controlPoint1: CGPoint(x: 76.02, y: 20.26), controlPoint2: CGPoint(x: 77.1, y: 19.51))
        logovimeoPath.addCurve(to: CGPoint(x: 79.22, y: 14.13), controlPoint1: CGPoint(x: 78.76, y: 16.78), controlPoint2: CGPoint(x: 79.17, y: 15.48))
        logovimeoPath.addCurve(to: CGPoint(x: 78.91, y: 12.04), controlPoint1: CGPoint(x: 79.25, y: 13.37), controlPoint2: CGPoint(x: 79.15, y: 12.67))
        logovimeoPath.addCurve(to: CGPoint(x: 77.87, y: 11.09), controlPoint1: CGPoint(x: 78.67, y: 11.41), controlPoint2: CGPoint(x: 78.32, y: 11.09))
        logovimeoPath.close()
        color.setFill()
        logovimeoPath.fill()
    }

    @objc dynamic public class func drawOngoingcall() {
        //// Color Declarations
        let fillColor9 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let black16 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.160)
        let fillColor12 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.400)

        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 9, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 9), controlPoint1: CGPoint(x: 13.97, y: 18), controlPoint2: CGPoint(x: 18, y: 13.97))
        bezierPath.addCurve(to: CGPoint(x: 9, y: 0), controlPoint1: CGPoint(x: 18, y: 4.03), controlPoint2: CGPoint(x: 13.97, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 4.03, y: 0), controlPoint2: CGPoint(x: 0, y: 4.03))
        bezierPath.addCurve(to: CGPoint(x: 9, y: 18), controlPoint1: CGPoint(x: 0, y: 13.97), controlPoint2: CGPoint(x: 4.03, y: 18))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        black16.setFill()
        bezierPath.fill()

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 6, y: 6, width: 6, height: 6))
        fillColor9.setFill()
        ovalPath.fill()

        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 3, y: 3, width: 12, height: 12))
        fillColor12.setFill()
        oval2Path.fill()
    }

    @objc dynamic public class func drawJoinongoingcall(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Group 2
        //// Group 3
        context.saveGState()
        context.setAlpha(0.32)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 9, y: 18))
        clipPath.addCurve(to: CGPoint(x: 18, y: 9), controlPoint1: CGPoint(x: 13.97, y: 18), controlPoint2: CGPoint(x: 18, y: 13.97))
        clipPath.addCurve(to: CGPoint(x: 9, y: 0), controlPoint1: CGPoint(x: 18, y: 4.03), controlPoint2: CGPoint(x: 13.97, y: 0))
        clipPath.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 4.03, y: 0), controlPoint2: CGPoint(x: 0, y: 4.03))
        clipPath.addCurve(to: CGPoint(x: 9, y: 18), controlPoint1: CGPoint(x: 0, y: 13.97), controlPoint2: CGPoint(x: 4.03, y: 18))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 9, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 9), controlPoint1: CGPoint(x: 13.97, y: 18), controlPoint2: CGPoint(x: 18, y: 13.97))
        bezierPath.addCurve(to: CGPoint(x: 9, y: 0), controlPoint1: CGPoint(x: 18, y: 4.03), controlPoint2: CGPoint(x: 13.97, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 4.03, y: 0), controlPoint2: CGPoint(x: 0, y: 4.03))
        bezierPath.addCurve(to: CGPoint(x: 9, y: 18), controlPoint1: CGPoint(x: 0, y: 13.97), controlPoint2: CGPoint(x: 4.03, y: 18))
        bezierPath.close()
        color.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()

        context.endTransparencyLayer()
        context.restoreGState()

        //// Group 4
        context.saveGState()
        context.setAlpha(0.72)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 2
        let clip2Path = UIBezierPath(ovalIn: CGRect(x: 3, y: 3, width: 12, height: 12))
        clip2Path.addClip()

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 3, y: 3, width: 12, height: 12))
        color.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()

        context.endTransparencyLayer()
        context.restoreGState()

        //// Group 5
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 3
        let clip3Path = UIBezierPath(ovalIn: CGRect(x: 6, y: 6, width: 6, height: 6))
        clip3Path.addClip()

        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalIn: CGRect(x: 6, y: 6, width: 6, height: 6))
        color.setStroke()
        oval3Path.lineWidth = 2
        oval3Path.stroke()

        context.endTransparencyLayer()
        context.restoreGState()
    }

    @objc dynamic public class func drawLogo(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 256.09, y: 140.1))
        bezier2Path.addCurve(to: CGPoint(x: 188.37, y: 208), controlPoint1: CGPoint(x: 256.09, y: 177.6), controlPoint2: CGPoint(x: 225.88, y: 208))
        bezier2Path.addCurve(to: CGPoint(x: 147.85, y: 194.6), controlPoint1: CGPoint(x: 173.26, y: 208), controlPoint2: CGPoint(x: 159.16, y: 203))
        bezier2Path.addCurve(to: CGPoint(x: 168.06, y: 140), controlPoint1: CGPoint(x: 160.46, y: 179.9), controlPoint2: CGPoint(x: 168.06, y: 160.9))
        bezier2Path.addLine(to: CGPoint(x: 168.06, y: 32))
        bezier2Path.addCurve(to: CGPoint(x: 136.05, y: 0), controlPoint1: CGPoint(x: 168.06, y: 14.4), controlPoint2: CGPoint(x: 153.66, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 104.04, y: 32), controlPoint1: CGPoint(x: 118.44, y: 0), controlPoint2: CGPoint(x: 104.04, y: 14.3))
        bezier2Path.addLine(to: CGPoint(x: 104.04, y: 140.1))
        bezier2Path.addCurve(to: CGPoint(x: 124.75, y: 194.7), controlPoint1: CGPoint(x: 104.04, y: 160.9), controlPoint2: CGPoint(x: 112.04, y: 180))
        bezier2Path.addCurve(to: CGPoint(x: 84.23, y: 208), controlPoint1: CGPoint(x: 113.44, y: 203), controlPoint2: CGPoint(x: 99.34, y: 208))
        bezier2Path.addCurve(to: CGPoint(x: 16.01, y: 140.1), controlPoint1: CGPoint(x: 46.72, y: 208), controlPoint2: CGPoint(x: 16.01, y: 177.5))
        bezier2Path.addLine(to: CGPoint(x: 16.01, y: 8.2))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 8.2))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 140.1))
        bezier2Path.addCurve(to: CGPoint(x: 84.33, y: 224), controlPoint1: CGPoint(x: 0, y: 186.3), controlPoint2: CGPoint(x: 38.01, y: 224))
        bezier2Path.addCurve(to: CGPoint(x: 136.55, y: 205.9), controlPoint1: CGPoint(x: 103.94, y: 224), controlPoint2: CGPoint(x: 122.14, y: 217.2))
        bezier2Path.addCurve(to: CGPoint(x: 188.27, y: 224), controlPoint1: CGPoint(x: 150.86, y: 217.2), controlPoint2: CGPoint(x: 168.66, y: 224))
        bezier2Path.addCurve(to: CGPoint(x: 272, y: 140.1), controlPoint1: CGPoint(x: 234.59, y: 224), controlPoint2: CGPoint(x: 272, y: 186.4))
        bezier2Path.addLine(to: CGPoint(x: 272, y: 8.2))
        bezier2Path.addLine(to: CGPoint(x: 255.99, y: 8.2))
        bezier2Path.addLine(to: CGPoint(x: 255.99, y: 140.1))
        bezier2Path.addLine(to: CGPoint(x: 256.09, y: 140.1))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 136.05, y: 183.8))
        bezier2Path.addCurve(to: CGPoint(x: 120.04, y: 140.1), controlPoint1: CGPoint(x: 126.05, y: 172), controlPoint2: CGPoint(x: 120.04, y: 156.7))
        bezier2Path.addLine(to: CGPoint(x: 120.04, y: 32))
        bezier2Path.addCurve(to: CGPoint(x: 136.05, y: 16), controlPoint1: CGPoint(x: 120.04, y: 23.2), controlPoint2: CGPoint(x: 127.25, y: 16))
        bezier2Path.addCurve(to: CGPoint(x: 152.06, y: 32), controlPoint1: CGPoint(x: 144.85, y: 16), controlPoint2: CGPoint(x: 152.06, y: 23.2))
        bezier2Path.addLine(to: CGPoint(x: 152.06, y: 140.1))
        bezier2Path.addCurve(to: CGPoint(x: 136.05, y: 183.8), controlPoint1: CGPoint(x: 152.06, y: 156.7), controlPoint2: CGPoint(x: 146.05, y: 171.9))
        bezier2Path.close()
        color.setFill()
        bezier2Path.fill()
    }

    @objc dynamic public class func drawWire(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Logo 2 Drawing
        let logo2Path = UIBezierPath()
        logo2Path.move(to: CGPoint(x: 42.72, y: 41.02))
        logo2Path.addCurve(to: CGPoint(x: 39.11, y: 31.27), controlPoint1: CGPoint(x: 40.47, y: 38.38), controlPoint2: CGPoint(x: 39.11, y: 34.98))
        logo2Path.addLine(to: CGPoint(x: 39.11, y: 7.14))
        logo2Path.addCurve(to: CGPoint(x: 42.73, y: 3.57), controlPoint1: CGPoint(x: 39.11, y: 5.17), controlPoint2: CGPoint(x: 40.74, y: 3.57))
        logo2Path.addCurve(to: CGPoint(x: 46.34, y: 7.14), controlPoint1: CGPoint(x: 44.72, y: 3.57), controlPoint2: CGPoint(x: 46.34, y: 5.17))
        logo2Path.addLine(to: CGPoint(x: 46.34, y: 31.27))
        logo2Path.addCurve(to: CGPoint(x: 42.72, y: 41.02), controlPoint1: CGPoint(x: 46.34, y: 34.98), controlPoint2: CGPoint(x: 44.97, y: 38.38))
        logo2Path.addLine(to: CGPoint(x: 42.72, y: 41.02))
        logo2Path.close()
        logo2Path.move(to: CGPoint(x: 69.83, y: 31.27))
        logo2Path.addCurve(to: CGPoint(x: 54.55, y: 46.43), controlPoint1: CGPoint(x: 69.83, y: 39.63), controlPoint2: CGPoint(x: 63.02, y: 46.43))
        logo2Path.addCurve(to: CGPoint(x: 45.4, y: 43.45), controlPoint1: CGPoint(x: 51.13, y: 46.43), controlPoint2: CGPoint(x: 47.95, y: 45.31))
        logo2Path.addCurve(to: CGPoint(x: 49.95, y: 31.27), controlPoint1: CGPoint(x: 48.25, y: 40.17), controlPoint2: CGPoint(x: 49.95, y: 35.92))
        logo2Path.addLine(to: CGPoint(x: 49.96, y: 7.14))
        logo2Path.addCurve(to: CGPoint(x: 42.73, y: 0), controlPoint1: CGPoint(x: 49.96, y: 3.2), controlPoint2: CGPoint(x: 46.72, y: 0))
        logo2Path.addCurve(to: CGPoint(x: 35.5, y: 7.14), controlPoint1: CGPoint(x: 38.74, y: 0), controlPoint2: CGPoint(x: 35.5, y: 3.2))
        logo2Path.addLine(to: CGPoint(x: 35.49, y: 31.27))
        logo2Path.addCurve(to: CGPoint(x: 40.16, y: 43.45), controlPoint1: CGPoint(x: 35.49, y: 35.92), controlPoint2: CGPoint(x: 37.31, y: 40.17))
        logo2Path.addCurve(to: CGPoint(x: 31.01, y: 46.43), controlPoint1: CGPoint(x: 37.61, y: 45.31), controlPoint2: CGPoint(x: 34.43, y: 46.43))
        logo2Path.addCurve(to: CGPoint(x: 15.61, y: 31.27), controlPoint1: CGPoint(x: 22.54, y: 46.43), controlPoint2: CGPoint(x: 15.61, y: 39.63))
        logo2Path.addLine(to: CGPoint(x: 15.61, y: 1.83))
        logo2Path.addLine(to: CGPoint(x: 12, y: 1.83))
        logo2Path.addLine(to: CGPoint(x: 12, y: 31.27))
        logo2Path.addCurve(to: CGPoint(x: 31.05, y: 50), controlPoint1: CGPoint(x: 12, y: 41.6), controlPoint2: CGPoint(x: 20.59, y: 50))
        logo2Path.addCurve(to: CGPoint(x: 42.84, y: 45.95), controlPoint1: CGPoint(x: 35.49, y: 50), controlPoint2: CGPoint(x: 39.6, y: 48.48))
        logo2Path.addCurve(to: CGPoint(x: 54.53, y: 50), controlPoint1: CGPoint(x: 46.07, y: 48.48), controlPoint2: CGPoint(x: 50.09, y: 50))
        logo2Path.addCurve(to: CGPoint(x: 73.45, y: 31.27), controlPoint1: CGPoint(x: 64.99, y: 50), controlPoint2: CGPoint(x: 73.45, y: 41.6))
        logo2Path.addLine(to: CGPoint(x: 73.45, y: 1.83))
        logo2Path.addLine(to: CGPoint(x: 69.83, y: 1.83))
        logo2Path.addLine(to: CGPoint(x: 69.83, y: 31.27))
        logo2Path.close()
        logo2Path.move(to: CGPoint(x: 84.3, y: 49.05))
        logo2Path.addLine(to: CGPoint(x: 87.91, y: 49.05))
        logo2Path.addLine(to: CGPoint(x: 87.91, y: 1.73))
        logo2Path.addLine(to: CGPoint(x: 84.3, y: 1.73))
        logo2Path.addLine(to: CGPoint(x: 84.3, y: 49.05))
        logo2Path.close()
        logo2Path.move(to: CGPoint(x: 119.55, y: 0.91))
        logo2Path.addCurve(to: CGPoint(x: 102.37, y: 9.89), controlPoint1: CGPoint(x: 112.42, y: 0.91), controlPoint2: CGPoint(x: 106.12, y: 4.47))
        logo2Path.addLine(to: CGPoint(x: 102.37, y: 1.73))
        logo2Path.addLine(to: CGPoint(x: 98.75, y: 1.73))
        logo2Path.addLine(to: CGPoint(x: 98.75, y: 49.05))
        logo2Path.addLine(to: CGPoint(x: 102.37, y: 49.05))
        logo2Path.addLine(to: CGPoint(x: 102.37, y: 21.45))
        logo2Path.addLine(to: CGPoint(x: 102.37, y: 21.45))
        logo2Path.addCurve(to: CGPoint(x: 119.55, y: 4.48), controlPoint1: CGPoint(x: 102.37, y: 12.09), controlPoint2: CGPoint(x: 110.08, y: 4.48))
        logo2Path.addLine(to: CGPoint(x: 119.55, y: 0.91))
        logo2Path.close()
        logo2Path.move(to: CGPoint(x: 126.33, y: 38.98))
        logo2Path.addCurve(to: CGPoint(x: 127.55, y: 10.62), controlPoint1: CGPoint(x: 119.3, y: 30.74), controlPoint2: CGPoint(x: 119.7, y: 18.38))
        logo2Path.addCurve(to: CGPoint(x: 156.25, y: 9.41), controlPoint1: CGPoint(x: 135.4, y: 2.87), controlPoint2: CGPoint(x: 147.92, y: 2.46))
        logo2Path.addLine(to: CGPoint(x: 126.33, y: 38.98))
        logo2Path.close()
        logo2Path.move(to: CGPoint(x: 161.37, y: 9.4))
        logo2Path.addCurve(to: CGPoint(x: 160.14, y: 8.1), controlPoint1: CGPoint(x: 160.98, y: 8.96), controlPoint2: CGPoint(x: 160.57, y: 8.52))
        logo2Path.addCurve(to: CGPoint(x: 125, y: 8.1), controlPoint1: CGPoint(x: 150.45, y: -1.48), controlPoint2: CGPoint(x: 134.68, y: -1.48))
        logo2Path.addCurve(to: CGPoint(x: 125, y: 42.82), controlPoint1: CGPoint(x: 115.31, y: 17.67), controlPoint2: CGPoint(x: 115.31, y: 33.25))
        logo2Path.addCurve(to: CGPoint(x: 160.13, y: 42.82), controlPoint1: CGPoint(x: 134.68, y: 52.39), controlPoint2: CGPoint(x: 150.44, y: 52.39))
        logo2Path.addLine(to: CGPoint(x: 157.58, y: 40.3))
        logo2Path.addCurve(to: CGPoint(x: 128.88, y: 41.5), controlPoint1: CGPoint(x: 149.73, y: 48.05), controlPoint2: CGPoint(x: 137.22, y: 48.45))
        logo2Path.addLine(to: CGPoint(x: 143.84, y: 26.72))
        logo2Path.addLine(to: CGPoint(x: 161.37, y: 9.4))
        logo2Path.close()
        logo2Path.move(to: CGPoint(x: 164.71, y: 2.14))
        logo2Path.addLine(to: CGPoint(x: 165.98, y: 2.14))
        logo2Path.addLine(to: CGPoint(x: 165.98, y: 5.36))
        logo2Path.addLine(to: CGPoint(x: 166.36, y: 5.36))
        logo2Path.addLine(to: CGPoint(x: 166.36, y: 2.14))
        logo2Path.addLine(to: CGPoint(x: 167.63, y: 2.14))
        logo2Path.addLine(to: CGPoint(x: 167.63, y: 1.79))
        logo2Path.addLine(to: CGPoint(x: 164.71, y: 1.79))
        logo2Path.addLine(to: CGPoint(x: 164.71, y: 2.14))
        logo2Path.close()
        logo2Path.move(to: CGPoint(x: 171.43, y: 1.79))
        logo2Path.addLine(to: CGPoint(x: 170.17, y: 4.89))
        logo2Path.addLine(to: CGPoint(x: 168.92, y: 1.79))
        logo2Path.addLine(to: CGPoint(x: 168.33, y: 1.79))
        logo2Path.addLine(to: CGPoint(x: 168.33, y: 5.36))
        logo2Path.addLine(to: CGPoint(x: 168.69, y: 5.36))
        logo2Path.addLine(to: CGPoint(x: 168.69, y: 2.17))
        logo2Path.addLine(to: CGPoint(x: 169.99, y: 5.36))
        logo2Path.addLine(to: CGPoint(x: 170.34, y: 5.36))
        logo2Path.addLine(to: CGPoint(x: 171.63, y: 2.18))
        logo2Path.addLine(to: CGPoint(x: 171.63, y: 5.36))
        logo2Path.addLine(to: CGPoint(x: 172, y: 5.36))
        logo2Path.addLine(to: CGPoint(x: 172, y: 1.79))
        logo2Path.addLine(to: CGPoint(x: 171.43, y: 1.79))
        logo2Path.close()
        logo2Path.usesEvenOddFillRule = true
        color.setFill()
        logo2Path.fill()
    }

    @objc dynamic public class func drawShieldverified() {
        //// Color Declarations
        let e2EE = UIColor(red: 0.000, green: 0.588, blue: 0.941, alpha: 1.000)
        let black24 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.240)

        //// path-1 Drawing
        let path1Path = UIBezierPath()
        path1Path.move(to: CGPoint(x: 15, y: 1.87))
        path1Path.addLine(to: CGPoint(x: 8, y: 0))
        path1Path.addLine(to: CGPoint(x: 1, y: 2))
        path1Path.addLine(to: CGPoint(x: 1, y: 8))
        path1Path.addCurve(to: CGPoint(x: 8, y: 16), controlPoint1: CGPoint(x: 1, y: 12), controlPoint2: CGPoint(x: 4.01, y: 15.1))
        path1Path.addCurve(to: CGPoint(x: 15, y: 8), controlPoint1: CGPoint(x: 12.03, y: 15.1), controlPoint2: CGPoint(x: 15, y: 12))
        path1Path.addLine(to: CGPoint(x: 15, y: 1.87))
        path1Path.close()
        path1Path.usesEvenOddFillRule = true
        e2EE.setFill()
        path1Path.fill()

        //// Shadow Drawing
        let shadowPath = UIBezierPath()
        shadowPath.move(to: CGPoint(x: 15, y: 1.87))
        shadowPath.addLine(to: CGPoint(x: 8, y: 0))
        shadowPath.addLine(to: CGPoint(x: 8, y: 16))
        shadowPath.addCurve(to: CGPoint(x: 15, y: 8), controlPoint1: CGPoint(x: 12.03, y: 15.09), controlPoint2: CGPoint(x: 15, y: 12))
        shadowPath.addLine(to: CGPoint(x: 15, y: 1.87))
        shadowPath.close()
        shadowPath.usesEvenOddFillRule = true
        black24.setFill()
        shadowPath.fill()
    }

    @objc dynamic public class func drawShieldnotverified() {
        //// Color Declarations
        let e2EE = UIColor(red: 0.000, green: 0.588, blue: 0.941, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 15, y: 1.87))
        bezierPath.addLine(to: CGPoint(x: 15, y: 8))
        bezierPath.addCurve(to: CGPoint(x: 8, y: 16), controlPoint1: CGPoint(x: 15, y: 12), controlPoint2: CGPoint(x: 12.03, y: 15.1))
        bezierPath.addCurve(to: CGPoint(x: 1, y: 8), controlPoint1: CGPoint(x: 4, y: 15.1), controlPoint2: CGPoint(x: 1, y: 12))
        bezierPath.addLine(to: CGPoint(x: 1, y: 2))
        bezierPath.addLine(to: CGPoint(x: 8, y: 0))
        bezierPath.addLine(to: CGPoint(x: 15, y: 1.87))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 8, y: 1.56))
        bezierPath.addLine(to: CGPoint(x: 7.98, y: 1.56))
        bezierPath.addLine(to: CGPoint(x: 2.5, y: 3.02))
        bezierPath.addLine(to: CGPoint(x: 2.5, y: 8))
        bezierPath.addCurve(to: CGPoint(x: 8, y: 14.46), controlPoint1: CGPoint(x: 2.5, y: 11.06), controlPoint2: CGPoint(x: 4.68, y: 13.59))
        bezierPath.addLine(to: CGPoint(x: 8, y: 14.46))
        bezierPath.addLine(to: CGPoint(x: 8, y: 1.56))
        bezierPath.addLine(to: CGPoint(x: 8, y: 1.56))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        e2EE.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawShield(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Fill-1 Drawing
        let fill1Path = UIBezierPath()
        fill1Path.move(to: CGPoint(x: 5.88, y: 145.5))
        fill1Path.addCurve(to: CGPoint(x: 2.94, y: 148.44), controlPoint1: CGPoint(x: 5.88, y: 147.12), controlPoint2: CGPoint(x: 4.57, y: 148.44))
        fill1Path.addCurve(to: CGPoint(x: -0, y: 145.5), controlPoint1: CGPoint(x: 1.32, y: 148.44), controlPoint2: CGPoint(x: -0, y: 147.12))
        fill1Path.addLine(to: CGPoint(x: -0, y: 49.96))
        fill1Path.addCurve(to: CGPoint(x: 2.94, y: 47.02), controlPoint1: CGPoint(x: -0, y: 48.34), controlPoint2: CGPoint(x: 1.32, y: 47.02))
        fill1Path.addCurve(to: CGPoint(x: 32.2, y: 44.35), controlPoint1: CGPoint(x: 12.13, y: 47.02), controlPoint2: CGPoint(x: 21.91, y: 46.11))
        fill1Path.addCurve(to: CGPoint(x: 100.35, y: 23.73), controlPoint1: CGPoint(x: 53.75, y: 40.67), controlPoint2: CGPoint(x: 76.83, y: 33.45))
        fill1Path.addCurve(to: CGPoint(x: 135.05, y: 7.66), controlPoint1: CGPoint(x: 112.71, y: 18.61), controlPoint2: CGPoint(x: 124.4, y: 13.14))
        fill1Path.addCurve(to: CGPoint(x: 144.99, y: 2.37), controlPoint1: CGPoint(x: 138.78, y: 5.74), controlPoint2: CGPoint(x: 142.11, y: 3.97))
        fill1Path.addCurve(to: CGPoint(x: 147.63, y: 0.9), controlPoint1: CGPoint(x: 146, y: 1.82), controlPoint2: CGPoint(x: 146.88, y: 1.32))
        fill1Path.addCurve(to: CGPoint(x: 148.3, y: 0.51), controlPoint1: CGPoint(x: 147.88, y: 0.75), controlPoint2: CGPoint(x: 148.11, y: 0.62))
        fill1Path.addCurve(to: CGPoint(x: 151.49, y: 0.39), controlPoint1: CGPoint(x: 149.43, y: -0.15), controlPoint2: CGPoint(x: 150.57, y: -0.15))
        fill1Path.addCurve(to: CGPoint(x: 152.37, y: 0.9), controlPoint1: CGPoint(x: 151.89, y: 0.62), controlPoint2: CGPoint(x: 152.12, y: 0.75))
        fill1Path.addCurve(to: CGPoint(x: 155.01, y: 2.37), controlPoint1: CGPoint(x: 153.12, y: 1.32), controlPoint2: CGPoint(x: 154, y: 1.82))
        fill1Path.addCurve(to: CGPoint(x: 164.95, y: 7.66), controlPoint1: CGPoint(x: 157.89, y: 3.97), controlPoint2: CGPoint(x: 161.22, y: 5.74))
        fill1Path.addCurve(to: CGPoint(x: 199.65, y: 23.73), controlPoint1: CGPoint(x: 175.6, y: 13.14), controlPoint2: CGPoint(x: 187.29, y: 18.61))
        fill1Path.addCurve(to: CGPoint(x: 267.8, y: 44.35), controlPoint1: CGPoint(x: 223.17, y: 33.45), controlPoint2: CGPoint(x: 246.25, y: 40.67))
        fill1Path.addCurve(to: CGPoint(x: 297.06, y: 47.02), controlPoint1: CGPoint(x: 278.09, y: 46.11), controlPoint2: CGPoint(x: 287.87, y: 47.02))
        fill1Path.addCurve(to: CGPoint(x: 300, y: 49.96), controlPoint1: CGPoint(x: 298.68, y: 47.02), controlPoint2: CGPoint(x: 300, y: 48.34))
        fill1Path.addLine(to: CGPoint(x: 300, y: 88.18))
        fill1Path.addCurve(to: CGPoint(x: 297.06, y: 91.12), controlPoint1: CGPoint(x: 300, y: 89.8), controlPoint2: CGPoint(x: 298.68, y: 91.12))
        fill1Path.addCurve(to: CGPoint(x: 294.12, y: 88.18), controlPoint1: CGPoint(x: 295.43, y: 91.12), controlPoint2: CGPoint(x: 294.12, y: 89.8))
        fill1Path.addLine(to: CGPoint(x: 294.12, y: 52.87))
        fill1Path.addCurve(to: CGPoint(x: 266.81, y: 50.15), controlPoint1: CGPoint(x: 285.45, y: 52.7), controlPoint2: CGPoint(x: 276.33, y: 51.77))
        fill1Path.addCurve(to: CGPoint(x: 197.41, y: 29.16), controlPoint1: CGPoint(x: 244.77, y: 46.39), controlPoint2: CGPoint(x: 221.3, y: 39.04))
        fill1Path.addCurve(to: CGPoint(x: 162.26, y: 12.89), controlPoint1: CGPoint(x: 184.89, y: 23.98), controlPoint2: CGPoint(x: 173.05, y: 18.44))
        fill1Path.addCurve(to: CGPoint(x: 152.16, y: 7.52), controlPoint1: CGPoint(x: 158.48, y: 10.95), controlPoint2: CGPoint(x: 155.1, y: 9.14))
        fill1Path.addCurve(to: CGPoint(x: 150, y: 6.31), controlPoint1: CGPoint(x: 151.36, y: 7.08), controlPoint2: CGPoint(x: 150.64, y: 6.67))
        fill1Path.addCurve(to: CGPoint(x: 147.84, y: 7.52), controlPoint1: CGPoint(x: 149.36, y: 6.67), controlPoint2: CGPoint(x: 148.64, y: 7.08))
        fill1Path.addCurve(to: CGPoint(x: 137.74, y: 12.89), controlPoint1: CGPoint(x: 144.9, y: 9.14), controlPoint2: CGPoint(x: 141.52, y: 10.95))
        fill1Path.addCurve(to: CGPoint(x: 102.59, y: 29.16), controlPoint1: CGPoint(x: 126.95, y: 18.44), controlPoint2: CGPoint(x: 115.11, y: 23.98))
        fill1Path.addCurve(to: CGPoint(x: 33.19, y: 50.15), controlPoint1: CGPoint(x: 78.7, y: 39.04), controlPoint2: CGPoint(x: 55.23, y: 46.39))
        fill1Path.addCurve(to: CGPoint(x: 5.88, y: 52.87), controlPoint1: CGPoint(x: 23.67, y: 51.77), controlPoint2: CGPoint(x: 14.55, y: 52.7))
        fill1Path.addLine(to: CGPoint(x: 5.88, y: 145.5))
        fill1Path.close()
        fill1Path.usesEvenOddFillRule = true
        color.setFill()
        fill1Path.fill()

        //// Fill-4 Drawing
        let fill4Path = UIBezierPath()
        fill4Path.move(to: CGPoint(x: 255.88, y: 276.29))
        fill4Path.addCurve(to: CGPoint(x: 236.76, y: 257.18), controlPoint1: CGPoint(x: 245.32, y: 276.29), controlPoint2: CGPoint(x: 236.76, y: 267.73))
        fill4Path.addCurve(to: CGPoint(x: 255.88, y: 238.08), controlPoint1: CGPoint(x: 236.76, y: 246.63), controlPoint2: CGPoint(x: 245.32, y: 238.08))
        fill4Path.addCurve(to: CGPoint(x: 275, y: 257.18), controlPoint1: CGPoint(x: 266.44, y: 238.08), controlPoint2: CGPoint(x: 275, y: 246.63))
        fill4Path.addCurve(to: CGPoint(x: 255.88, y: 276.29), controlPoint1: CGPoint(x: 275, y: 267.73), controlPoint2: CGPoint(x: 266.44, y: 276.29))
        fill4Path.close()
        fill4Path.move(to: CGPoint(x: 255.88, y: 232.2))
        fill4Path.addCurve(to: CGPoint(x: 230.88, y: 257.18), controlPoint1: CGPoint(x: 242.08, y: 232.2), controlPoint2: CGPoint(x: 230.88, y: 243.38))
        fill4Path.addCurve(to: CGPoint(x: 255.88, y: 282.17), controlPoint1: CGPoint(x: 230.88, y: 270.98), controlPoint2: CGPoint(x: 242.08, y: 282.17))
        fill4Path.addCurve(to: CGPoint(x: 280.88, y: 257.18), controlPoint1: CGPoint(x: 269.69, y: 282.17), controlPoint2: CGPoint(x: 280.88, y: 270.98))
        fill4Path.addCurve(to: CGPoint(x: 255.88, y: 232.2), controlPoint1: CGPoint(x: 280.88, y: 243.38), controlPoint2: CGPoint(x: 269.69, y: 232.2))
        fill4Path.close()
        fill4Path.usesEvenOddFillRule = true
        color.setFill()
        fill4Path.fill()

        //// Fill-6 Drawing
        let fill6Path = UIBezierPath()
        fill6Path.move(to: CGPoint(x: 269.16, y: 260.2))
        fill6Path.addCurve(to: CGPoint(x: 265.11, y: 261.14), controlPoint1: CGPoint(x: 267.78, y: 259.34), controlPoint2: CGPoint(x: 265.97, y: 259.76))
        fill6Path.addCurve(to: CGPoint(x: 256.57, y: 265.27), controlPoint1: CGPoint(x: 263.37, y: 263.91), controlPoint2: CGPoint(x: 260.66, y: 265.27))
        fill6Path.addCurve(to: CGPoint(x: 247.21, y: 260.93), controlPoint1: CGPoint(x: 252.42, y: 265.27), controlPoint2: CGPoint(x: 249.39, y: 263.84))
        fill6Path.addCurve(to: CGPoint(x: 243.09, y: 260.34), controlPoint1: CGPoint(x: 246.23, y: 259.63), controlPoint2: CGPoint(x: 244.39, y: 259.37))
        fill6Path.addCurve(to: CGPoint(x: 242.5, y: 264.46), controlPoint1: CGPoint(x: 241.79, y: 261.32), controlPoint2: CGPoint(x: 241.53, y: 263.16))
        fill6Path.addCurve(to: CGPoint(x: 256.57, y: 271.14), controlPoint1: CGPoint(x: 245.83, y: 268.89), controlPoint2: CGPoint(x: 250.62, y: 271.14))
        fill6Path.addCurve(to: CGPoint(x: 270.09, y: 264.25), controlPoint1: CGPoint(x: 262.6, y: 271.14), controlPoint2: CGPoint(x: 267.23, y: 268.83))
        fill6Path.addCurve(to: CGPoint(x: 269.16, y: 260.2), controlPoint1: CGPoint(x: 270.96, y: 262.88), controlPoint2: CGPoint(x: 270.54, y: 261.06))
        fill6Path.close()
        fill6Path.usesEvenOddFillRule = true
        color.setFill()
        fill6Path.fill()

        //// Fill-8 Drawing
        let fill8Path = UIBezierPath(ovalIn: CGRect(x: 259.6, y: 247.82, width: 7.4, height: 7.4))
        color.setFill()
        fill8Path.fill()

        //// Fill-10 Drawing
        let fill10Path = UIBezierPath(ovalIn: CGRect(x: 245.85, y: 247.82, width: 7.4, height: 7.4))
        color.setFill()
        fill10Path.fill()

        //// Fill-12 Drawing
        let fill12Path = UIBezierPath()
        fill12Path.move(to: CGPoint(x: 291.17, y: 97))
        fill12Path.addLine(to: CGPoint(x: 238.22, y: 97))
        fill12Path.addCurve(to: CGPoint(x: 235.28, y: 94.06), controlPoint1: CGPoint(x: 236.59, y: 97), controlPoint2: CGPoint(x: 235.28, y: 95.68))
        fill12Path.addCurve(to: CGPoint(x: 238.22, y: 91.12), controlPoint1: CGPoint(x: 235.28, y: 92.44), controlPoint2: CGPoint(x: 236.59, y: 91.12))
        fill12Path.addCurve(to: CGPoint(x: 238.74, y: 91.17), controlPoint1: CGPoint(x: 238.38, y: 91.12), controlPoint2: CGPoint(x: 238.55, y: 91.14))
        fill12Path.addCurve(to: CGPoint(x: 242.03, y: 87.28), controlPoint1: CGPoint(x: 240.97, y: 91.57), controlPoint2: CGPoint(x: 242.8, y: 89.41))
        fill12Path.addCurve(to: CGPoint(x: 241.16, y: 82.3), controlPoint1: CGPoint(x: 241.46, y: 85.7), controlPoint2: CGPoint(x: 241.16, y: 84.02))
        fill12Path.addCurve(to: CGPoint(x: 255.87, y: 67.61), controlPoint1: CGPoint(x: 241.16, y: 74.19), controlPoint2: CGPoint(x: 247.75, y: 67.61))
        fill12Path.addCurve(to: CGPoint(x: 269.75, y: 77.45), controlPoint1: CGPoint(x: 262.17, y: 67.61), controlPoint2: CGPoint(x: 267.71, y: 71.6))
        fill12Path.addCurve(to: CGPoint(x: 272.77, y: 79.4), controlPoint1: CGPoint(x: 270.2, y: 78.71), controlPoint2: CGPoint(x: 271.44, y: 79.51))
        fill12Path.addCurve(to: CGPoint(x: 273.52, y: 79.36), controlPoint1: CGPoint(x: 273.11, y: 79.38), controlPoint2: CGPoint(x: 273.33, y: 79.36))
        fill12Path.addCurve(to: CGPoint(x: 282.35, y: 88.18), controlPoint1: CGPoint(x: 278.4, y: 79.36), controlPoint2: CGPoint(x: 282.35, y: 83.31))
        fill12Path.addCurve(to: CGPoint(x: 285.29, y: 91.12), controlPoint1: CGPoint(x: 282.35, y: 89.8), controlPoint2: CGPoint(x: 283.67, y: 91.12))
        fill12Path.addCurve(to: CGPoint(x: 288.23, y: 88.18), controlPoint1: CGPoint(x: 286.91, y: 91.12), controlPoint2: CGPoint(x: 288.23, y: 89.8))
        fill12Path.addCurve(to: CGPoint(x: 274.49, y: 73.52), controlPoint1: CGPoint(x: 288.23, y: 80.39), controlPoint2: CGPoint(x: 282.16, y: 74.02))
        fill12Path.addCurve(to: CGPoint(x: 255.87, y: 61.73), controlPoint1: CGPoint(x: 271.14, y: 66.43), controlPoint2: CGPoint(x: 263.96, y: 61.73))
        fill12Path.addCurve(to: CGPoint(x: 235.28, y: 82.3), controlPoint1: CGPoint(x: 244.5, y: 61.73), controlPoint2: CGPoint(x: 235.28, y: 70.94))
        fill12Path.addCurve(to: CGPoint(x: 235.55, y: 85.65), controlPoint1: CGPoint(x: 235.28, y: 83.43), controlPoint2: CGPoint(x: 235.37, y: 84.55))
        fill12Path.addCurve(to: CGPoint(x: 229.39, y: 94.06), controlPoint1: CGPoint(x: 231.98, y: 86.78), controlPoint2: CGPoint(x: 229.39, y: 90.12))
        fill12Path.addCurve(to: CGPoint(x: 238.22, y: 102.88), controlPoint1: CGPoint(x: 229.39, y: 98.93), controlPoint2: CGPoint(x: 233.34, y: 102.88))
        fill12Path.addLine(to: CGPoint(x: 291.17, y: 102.88))
        fill12Path.addCurve(to: CGPoint(x: 294.12, y: 105.82), controlPoint1: CGPoint(x: 293.47, y: 102.88), controlPoint2: CGPoint(x: 294.12, y: 103.52))
        fill12Path.addLine(to: CGPoint(x: 294.12, y: 238.09))
        fill12Path.addCurve(to: CGPoint(x: 239.33, y: 346.02), controlPoint1: CGPoint(x: 294.12, y: 281.78), controlPoint2: CGPoint(x: 273.8, y: 318.68))
        fill12Path.addCurve(to: CGPoint(x: 149.96, y: 382.12), controlPoint1: CGPoint(x: 211.17, y: 368.35), controlPoint2: CGPoint(x: 175.19, y: 382.12))
        fill12Path.addCurve(to: CGPoint(x: 102, y: 370.63), controlPoint1: CGPoint(x: 136.66, y: 382.12), controlPoint2: CGPoint(x: 119.43, y: 378.08))
        fill12Path.addCurve(to: CGPoint(x: 49.09, y: 336.02), controlPoint1: CGPoint(x: 82.73, y: 362.4), controlPoint2: CGPoint(x: 64.34, y: 350.56))
        fill12Path.addCurve(to: CGPoint(x: 44.93, y: 336.12), controlPoint1: CGPoint(x: 47.91, y: 334.9), controlPoint2: CGPoint(x: 46.05, y: 334.95))
        fill12Path.addCurve(to: CGPoint(x: 45.03, y: 340.28), controlPoint1: CGPoint(x: 43.81, y: 337.3), controlPoint2: CGPoint(x: 43.85, y: 339.16))
        fill12Path.addCurve(to: CGPoint(x: 149.96, y: 388), controlPoint1: CGPoint(x: 75.57, y: 369.39), controlPoint2: CGPoint(x: 119.14, y: 388))
        fill12Path.addCurve(to: CGPoint(x: 242.99, y: 350.62), controlPoint1: CGPoint(x: 176.58, y: 388), controlPoint2: CGPoint(x: 213.83, y: 373.74))
        fill12Path.addCurve(to: CGPoint(x: 300, y: 238.09), controlPoint1: CGPoint(x: 278.79, y: 322.24), controlPoint2: CGPoint(x: 300, y: 283.7))
        fill12Path.addLine(to: CGPoint(x: 300, y: 105.82))
        fill12Path.addCurve(to: CGPoint(x: 291.17, y: 97), controlPoint1: CGPoint(x: 300, y: 100.28), controlPoint2: CGPoint(x: 296.72, y: 97))
        fill12Path.close()
        fill12Path.usesEvenOddFillRule = true
        color.setFill()
        fill12Path.fill()

        //// Fill-14 Drawing
        let fill14Path = UIBezierPath()
        fill14Path.move(to: CGPoint(x: 55.88, y: 114.62))
        fill14Path.addLine(to: CGPoint(x: 20.59, y: 114.62))
        fill14Path.addCurve(to: CGPoint(x: 17.65, y: 111.68), controlPoint1: CGPoint(x: 18.96, y: 114.62), controlPoint2: CGPoint(x: 17.65, y: 113.31))
        fill14Path.addLine(to: CGPoint(x: 17.65, y: 64.65))
        fill14Path.addCurve(to: CGPoint(x: 20.59, y: 61.71), controlPoint1: CGPoint(x: 17.65, y: 63.03), controlPoint2: CGPoint(x: 18.96, y: 61.71))
        fill14Path.addLine(to: CGPoint(x: 44.12, y: 61.71))
        fill14Path.addCurve(to: CGPoint(x: 46.2, y: 62.57), controlPoint1: CGPoint(x: 44.9, y: 61.71), controlPoint2: CGPoint(x: 45.65, y: 62.02))
        fill14Path.addLine(to: CGPoint(x: 57.96, y: 74.33))
        fill14Path.addCurve(to: CGPoint(x: 58.82, y: 76.41), controlPoint1: CGPoint(x: 58.51, y: 74.88), controlPoint2: CGPoint(x: 58.82, y: 75.63))
        fill14Path.addLine(to: CGPoint(x: 58.82, y: 111.68))
        fill14Path.addCurve(to: CGPoint(x: 55.88, y: 114.62), controlPoint1: CGPoint(x: 58.82, y: 113.31), controlPoint2: CGPoint(x: 57.51, y: 114.62))
        fill14Path.close()
        fill14Path.move(to: CGPoint(x: 52.94, y: 108.74))
        fill14Path.addLine(to: CGPoint(x: 52.94, y: 77.63))
        fill14Path.addLine(to: CGPoint(x: 42.9, y: 67.59))
        fill14Path.addLine(to: CGPoint(x: 23.53, y: 67.59))
        fill14Path.addLine(to: CGPoint(x: 23.53, y: 108.74))
        fill14Path.addLine(to: CGPoint(x: 52.94, y: 108.74))
        fill14Path.close()
        fill14Path.usesEvenOddFillRule = true
        color.setFill()
        fill14Path.fill()

        //// Fill-16 Drawing
        let fill16Path = UIBezierPath(roundedRect: CGRect(x: 29, y: 81, width: 18, height: 6), cornerRadius: 3)
        color.setFill()
        fill16Path.fill()

        //// Fill-18 Drawing
        let fill18Path = UIBezierPath(roundedRect: CGRect(x: 29, y: 91, width: 18, height: 6), cornerRadius: 3)
        color.setFill()
        fill18Path.fill()

        //// Fill-20 Drawing
        let fill20Path = UIBezierPath()
        fill20Path.move(to: CGPoint(x: 162.98, y: 364.55))
        fill20Path.addLine(to: CGPoint(x: 152.07, y: 375.37))
        fill20Path.addCurve(to: CGPoint(x: 147.06, y: 373.29), controlPoint1: CGPoint(x: 150.22, y: 377.22), controlPoint2: CGPoint(x: 147.06, y: 375.9))
        fill20Path.addLine(to: CGPoint(x: 147.06, y: 338.02))
        fill20Path.addCurve(to: CGPoint(x: 155.88, y: 329.2), controlPoint1: CGPoint(x: 147.06, y: 333.15), controlPoint2: CGPoint(x: 151.01, y: 329.2))
        fill20Path.addLine(to: CGPoint(x: 191.1, y: 329.2))
        fill20Path.addCurve(to: CGPoint(x: 200, y: 338.1), controlPoint1: CGPoint(x: 196.01, y: 329.2), controlPoint2: CGPoint(x: 200, y: 333.18))
        fill20Path.addLine(to: CGPoint(x: 200, y: 355.73))
        fill20Path.addCurve(to: CGPoint(x: 191.18, y: 364.55), controlPoint1: CGPoint(x: 200, y: 360.6), controlPoint2: CGPoint(x: 196.05, y: 364.55))
        fill20Path.addLine(to: CGPoint(x: 162.98, y: 364.55))
        fill20Path.close()
        fill20Path.move(to: CGPoint(x: 152.94, y: 366.23))
        fill20Path.addLine(to: CGPoint(x: 159.69, y: 359.53))
        fill20Path.addCurve(to: CGPoint(x: 161.76, y: 358.67), controlPoint1: CGPoint(x: 160.24, y: 358.98), controlPoint2: CGPoint(x: 160.99, y: 358.67))
        fill20Path.addLine(to: CGPoint(x: 191.18, y: 358.67))
        fill20Path.addCurve(to: CGPoint(x: 194.12, y: 355.73), controlPoint1: CGPoint(x: 192.8, y: 358.67), controlPoint2: CGPoint(x: 194.12, y: 357.36))
        fill20Path.addLine(to: CGPoint(x: 194.12, y: 338.1))
        fill20Path.addCurve(to: CGPoint(x: 191.1, y: 335.08), controlPoint1: CGPoint(x: 194.12, y: 336.43), controlPoint2: CGPoint(x: 192.76, y: 335.08))
        fill20Path.addLine(to: CGPoint(x: 155.88, y: 335.08))
        fill20Path.addCurve(to: CGPoint(x: 152.94, y: 338.02), controlPoint1: CGPoint(x: 154.26, y: 335.08), controlPoint2: CGPoint(x: 152.94, y: 336.39))
        fill20Path.addLine(to: CGPoint(x: 152.94, y: 366.23))
        fill20Path.close()
        fill20Path.usesEvenOddFillRule = true
        color.setFill()
        fill20Path.fill()

        //// Fill-22 Drawing
        let fill22Path = UIBezierPath(ovalIn: CGRect(x: 159, y: 344.1, width: 6, height: 6))
        color.setFill()
        fill22Path.fill()

        //// Fill-24 Drawing
        let fill24Path = UIBezierPath(ovalIn: CGRect(x: 171, y: 344.1, width: 6, height: 6))
        color.setFill()
        fill24Path.fill()

        //// Fill-26 Drawing
        let fill26Path = UIBezierPath(ovalIn: CGRect(x: 182, y: 344.1, width: 6, height: 6))
        color.setFill()
        fill26Path.fill()

        //// Fill-28 Drawing
        let fill28Path = UIBezierPath()
        fill28Path.move(to: CGPoint(x: 150, y: 193.99))
        fill28Path.addCurve(to: CGPoint(x: 158.82, y: 202.8), controlPoint1: CGPoint(x: 154.87, y: 193.99), controlPoint2: CGPoint(x: 158.82, y: 197.93))
        fill28Path.addCurve(to: CGPoint(x: 150, y: 211.62), controlPoint1: CGPoint(x: 158.82, y: 207.67), controlPoint2: CGPoint(x: 154.87, y: 211.62))
        fill28Path.addCurve(to: CGPoint(x: 141.18, y: 202.8), controlPoint1: CGPoint(x: 145.13, y: 211.62), controlPoint2: CGPoint(x: 141.18, y: 207.67))
        fill28Path.addCurve(to: CGPoint(x: 150, y: 193.99), controlPoint1: CGPoint(x: 141.18, y: 197.93), controlPoint2: CGPoint(x: 145.13, y: 193.99))
        fill28Path.close()
        fill28Path.move(to: CGPoint(x: 150, y: 217.5))
        fill28Path.addCurve(to: CGPoint(x: 164.71, y: 202.8), controlPoint1: CGPoint(x: 158.12, y: 217.5), controlPoint2: CGPoint(x: 164.71, y: 210.92))
        fill28Path.addCurve(to: CGPoint(x: 150, y: 188.11), controlPoint1: CGPoint(x: 164.71, y: 194.69), controlPoint2: CGPoint(x: 158.12, y: 188.11))
        fill28Path.addCurve(to: CGPoint(x: 135.29, y: 202.8), controlPoint1: CGPoint(x: 141.88, y: 188.11), controlPoint2: CGPoint(x: 135.29, y: 194.69))
        fill28Path.addCurve(to: CGPoint(x: 150, y: 217.5), controlPoint1: CGPoint(x: 135.29, y: 210.92), controlPoint2: CGPoint(x: 141.88, y: 217.5))
        fill28Path.close()
        fill28Path.usesEvenOddFillRule = true
        color.setFill()
        fill28Path.fill()

        //// Fill-30 Drawing
        let fill30Path = UIBezierPath()
        fill30Path.move(to: CGPoint(x: 164.71, y: 235.14))
        fill30Path.addLine(to: CGPoint(x: 135.29, y: 235.14))
        fill30Path.addLine(to: CGPoint(x: 135.29, y: 226.32))
        fill30Path.addCurve(to: CGPoint(x: 136.61, y: 223.8), controlPoint1: CGPoint(x: 135.29, y: 224.9), controlPoint2: CGPoint(x: 135.73, y: 224.24))
        fill30Path.addCurve(to: CGPoint(x: 137.69, y: 223.45), controlPoint1: CGPoint(x: 136.93, y: 223.64), controlPoint2: CGPoint(x: 137.31, y: 223.52))
        fill30Path.addLine(to: CGPoint(x: 148.68, y: 228.95))
        fill30Path.addCurve(to: CGPoint(x: 151.32, y: 228.95), controlPoint1: CGPoint(x: 149.51, y: 229.36), controlPoint2: CGPoint(x: 150.49, y: 229.36))
        fill30Path.addLine(to: CGPoint(x: 162.39, y: 223.41))
        fill30Path.addCurve(to: CGPoint(x: 164.28, y: 224.69), controlPoint1: CGPoint(x: 163.39, y: 223.53), controlPoint2: CGPoint(x: 163.91, y: 223.96))
        fill30Path.addCurve(to: CGPoint(x: 164.65, y: 225.88), controlPoint1: CGPoint(x: 164.46, y: 225.05), controlPoint2: CGPoint(x: 164.58, y: 225.47))
        fill30Path.addCurve(to: CGPoint(x: 164.71, y: 226.32), controlPoint1: CGPoint(x: 164.69, y: 226.12), controlPoint2: CGPoint(x: 164.71, y: 226.29))
        fill30Path.addLine(to: CGPoint(x: 164.71, y: 235.14))
        fill30Path.close()
        fill30Path.move(to: CGPoint(x: 170.46, y: 224.92))
        fill30Path.addCurve(to: CGPoint(x: 169.54, y: 222.06), controlPoint1: CGPoint(x: 170.3, y: 223.96), controlPoint2: CGPoint(x: 170.01, y: 222.99))
        fill30Path.addCurve(to: CGPoint(x: 161.76, y: 217.5), controlPoint1: CGPoint(x: 168.14, y: 219.26), controlPoint2: CGPoint(x: 165.49, y: 217.5))
        fill30Path.addCurve(to: CGPoint(x: 160.45, y: 217.81), controlPoint1: CGPoint(x: 161.31, y: 217.5), controlPoint2: CGPoint(x: 160.86, y: 217.61))
        fill30Path.addLine(to: CGPoint(x: 150, y: 223.03))
        fill30Path.addLine(to: CGPoint(x: 139.55, y: 217.81))
        fill30Path.addCurve(to: CGPoint(x: 138.24, y: 217.5), controlPoint1: CGPoint(x: 139.14, y: 217.61), controlPoint2: CGPoint(x: 138.69, y: 217.5))
        fill30Path.addCurve(to: CGPoint(x: 136.83, y: 217.63), controlPoint1: CGPoint(x: 137.9, y: 217.5), controlPoint2: CGPoint(x: 137.42, y: 217.53))
        fill30Path.addCurve(to: CGPoint(x: 133.98, y: 218.55), controlPoint1: CGPoint(x: 135.87, y: 217.79), controlPoint2: CGPoint(x: 134.91, y: 218.08))
        fill30Path.addCurve(to: CGPoint(x: 129.41, y: 226.32), controlPoint1: CGPoint(x: 131.18, y: 219.95), controlPoint2: CGPoint(x: 129.41, y: 222.59))
        fill30Path.addLine(to: CGPoint(x: 129.41, y: 238.08))
        fill30Path.addCurve(to: CGPoint(x: 132.35, y: 241.02), controlPoint1: CGPoint(x: 129.41, y: 239.7), controlPoint2: CGPoint(x: 130.73, y: 241.02))
        fill30Path.addLine(to: CGPoint(x: 167.65, y: 241.02))
        fill30Path.addCurve(to: CGPoint(x: 170.59, y: 238.08), controlPoint1: CGPoint(x: 169.27, y: 241.02), controlPoint2: CGPoint(x: 170.59, y: 239.7))
        fill30Path.addLine(to: CGPoint(x: 170.59, y: 226.32))
        fill30Path.addCurve(to: CGPoint(x: 170.46, y: 224.92), controlPoint1: CGPoint(x: 170.59, y: 225.98), controlPoint2: CGPoint(x: 170.55, y: 225.5))
        fill30Path.close()
        fill30Path.usesEvenOddFillRule = true
        color.setFill()
        fill30Path.fill()

        //// Fill-32 Drawing
        let fill32Path = UIBezierPath()
        fill32Path.move(to: CGPoint(x: 150, y: 135.93))
        fill32Path.addCurve(to: CGPoint(x: 158.82, y: 144.75), controlPoint1: CGPoint(x: 154.87, y: 135.93), controlPoint2: CGPoint(x: 158.82, y: 139.88))
        fill32Path.addCurve(to: CGPoint(x: 150, y: 153.57), controlPoint1: CGPoint(x: 158.82, y: 149.62), controlPoint2: CGPoint(x: 154.87, y: 153.57))
        fill32Path.addCurve(to: CGPoint(x: 141.18, y: 144.75), controlPoint1: CGPoint(x: 145.13, y: 153.57), controlPoint2: CGPoint(x: 141.18, y: 149.62))
        fill32Path.addCurve(to: CGPoint(x: 150, y: 135.93), controlPoint1: CGPoint(x: 141.18, y: 139.88), controlPoint2: CGPoint(x: 145.13, y: 135.93))
        fill32Path.close()
        fill32Path.move(to: CGPoint(x: 150, y: 159.45))
        fill32Path.addCurve(to: CGPoint(x: 164.71, y: 144.75), controlPoint1: CGPoint(x: 158.12, y: 159.45), controlPoint2: CGPoint(x: 164.71, y: 152.87))
        fill32Path.addCurve(to: CGPoint(x: 150, y: 130.05), controlPoint1: CGPoint(x: 164.71, y: 136.63), controlPoint2: CGPoint(x: 158.12, y: 130.05))
        fill32Path.addCurve(to: CGPoint(x: 135.29, y: 144.75), controlPoint1: CGPoint(x: 141.88, y: 130.05), controlPoint2: CGPoint(x: 135.29, y: 136.63))
        fill32Path.addCurve(to: CGPoint(x: 150, y: 159.45), controlPoint1: CGPoint(x: 135.29, y: 152.87), controlPoint2: CGPoint(x: 141.88, y: 159.45))
        fill32Path.close()
        fill32Path.usesEvenOddFillRule = true
        color.setFill()
        fill32Path.fill()

        //// Fill-34 Drawing
        let fill34Path = UIBezierPath()
        fill34Path.move(to: CGPoint(x: 164.71, y: 177.08))
        fill34Path.addLine(to: CGPoint(x: 135.29, y: 177.08))
        fill34Path.addLine(to: CGPoint(x: 135.29, y: 168.27))
        fill34Path.addCurve(to: CGPoint(x: 136.61, y: 165.75), controlPoint1: CGPoint(x: 135.29, y: 166.85), controlPoint2: CGPoint(x: 135.73, y: 166.19))
        fill34Path.addCurve(to: CGPoint(x: 137.69, y: 165.4), controlPoint1: CGPoint(x: 136.93, y: 165.59), controlPoint2: CGPoint(x: 137.31, y: 165.47))
        fill34Path.addLine(to: CGPoint(x: 148.68, y: 170.89))
        fill34Path.addCurve(to: CGPoint(x: 151.32, y: 170.89), controlPoint1: CGPoint(x: 149.51, y: 171.31), controlPoint2: CGPoint(x: 150.49, y: 171.31))
        fill34Path.addLine(to: CGPoint(x: 162.39, y: 165.36))
        fill34Path.addCurve(to: CGPoint(x: 164.28, y: 166.64), controlPoint1: CGPoint(x: 163.39, y: 165.48), controlPoint2: CGPoint(x: 163.91, y: 165.91))
        fill34Path.addCurve(to: CGPoint(x: 164.65, y: 167.83), controlPoint1: CGPoint(x: 164.46, y: 167), controlPoint2: CGPoint(x: 164.58, y: 167.41))
        fill34Path.addCurve(to: CGPoint(x: 164.71, y: 168.27), controlPoint1: CGPoint(x: 164.69, y: 168.07), controlPoint2: CGPoint(x: 164.71, y: 168.23))
        fill34Path.addLine(to: CGPoint(x: 164.71, y: 177.08))
        fill34Path.close()
        fill34Path.move(to: CGPoint(x: 170.46, y: 166.86))
        fill34Path.addCurve(to: CGPoint(x: 169.54, y: 164.01), controlPoint1: CGPoint(x: 170.3, y: 165.9), controlPoint2: CGPoint(x: 170.01, y: 164.94))
        fill34Path.addCurve(to: CGPoint(x: 161.76, y: 159.45), controlPoint1: CGPoint(x: 168.14, y: 161.21), controlPoint2: CGPoint(x: 165.49, y: 159.45))
        fill34Path.addCurve(to: CGPoint(x: 160.45, y: 159.76), controlPoint1: CGPoint(x: 161.31, y: 159.45), controlPoint2: CGPoint(x: 160.86, y: 159.55))
        fill34Path.addLine(to: CGPoint(x: 150, y: 164.98))
        fill34Path.addLine(to: CGPoint(x: 139.55, y: 159.76))
        fill34Path.addCurve(to: CGPoint(x: 138.24, y: 159.45), controlPoint1: CGPoint(x: 139.14, y: 159.55), controlPoint2: CGPoint(x: 138.69, y: 159.45))
        fill34Path.addCurve(to: CGPoint(x: 136.83, y: 159.58), controlPoint1: CGPoint(x: 137.9, y: 159.45), controlPoint2: CGPoint(x: 137.42, y: 159.48))
        fill34Path.addCurve(to: CGPoint(x: 133.98, y: 160.49), controlPoint1: CGPoint(x: 135.87, y: 159.74), controlPoint2: CGPoint(x: 134.91, y: 160.03))
        fill34Path.addCurve(to: CGPoint(x: 129.41, y: 168.27), controlPoint1: CGPoint(x: 131.18, y: 161.89), controlPoint2: CGPoint(x: 129.41, y: 164.54))
        fill34Path.addLine(to: CGPoint(x: 129.41, y: 180.02))
        fill34Path.addCurve(to: CGPoint(x: 132.35, y: 182.96), controlPoint1: CGPoint(x: 129.41, y: 181.65), controlPoint2: CGPoint(x: 130.73, y: 182.96))
        fill34Path.addLine(to: CGPoint(x: 167.65, y: 182.96))
        fill34Path.addCurve(to: CGPoint(x: 170.59, y: 180.02), controlPoint1: CGPoint(x: 169.27, y: 182.96), controlPoint2: CGPoint(x: 170.59, y: 181.65))
        fill34Path.addLine(to: CGPoint(x: 170.59, y: 168.27))
        fill34Path.addCurve(to: CGPoint(x: 170.46, y: 166.86), controlPoint1: CGPoint(x: 170.59, y: 167.93), controlPoint2: CGPoint(x: 170.55, y: 167.45))
        fill34Path.close()
        fill34Path.usesEvenOddFillRule = true
        color.setFill()
        fill34Path.fill()

        //// Fill-36 Drawing
        let fill36Path = UIBezierPath()
        fill36Path.move(to: CGPoint(x: 200, y: 176.35))
        fill36Path.addCurve(to: CGPoint(x: 208.82, y: 185.17), controlPoint1: CGPoint(x: 204.87, y: 176.35), controlPoint2: CGPoint(x: 208.82, y: 180.3))
        fill36Path.addCurve(to: CGPoint(x: 200, y: 193.99), controlPoint1: CGPoint(x: 208.82, y: 190.04), controlPoint2: CGPoint(x: 204.87, y: 193.99))
        fill36Path.addCurve(to: CGPoint(x: 191.18, y: 185.17), controlPoint1: CGPoint(x: 195.13, y: 193.99), controlPoint2: CGPoint(x: 191.18, y: 190.04))
        fill36Path.addCurve(to: CGPoint(x: 200, y: 176.35), controlPoint1: CGPoint(x: 191.18, y: 180.3), controlPoint2: CGPoint(x: 195.13, y: 176.35))
        fill36Path.close()
        fill36Path.move(to: CGPoint(x: 200, y: 199.86))
        fill36Path.addCurve(to: CGPoint(x: 214.71, y: 185.17), controlPoint1: CGPoint(x: 208.12, y: 199.86), controlPoint2: CGPoint(x: 214.71, y: 193.28))
        fill36Path.addCurve(to: CGPoint(x: 200, y: 170.47), controlPoint1: CGPoint(x: 214.71, y: 177.05), controlPoint2: CGPoint(x: 208.12, y: 170.47))
        fill36Path.addCurve(to: CGPoint(x: 185.29, y: 185.17), controlPoint1: CGPoint(x: 191.88, y: 170.47), controlPoint2: CGPoint(x: 185.29, y: 177.05))
        fill36Path.addCurve(to: CGPoint(x: 200, y: 199.86), controlPoint1: CGPoint(x: 185.29, y: 193.28), controlPoint2: CGPoint(x: 191.88, y: 199.86))
        fill36Path.close()
        fill36Path.usesEvenOddFillRule = true
        color.setFill()
        fill36Path.fill()

        //// Fill-38 Drawing
        let fill38Path = UIBezierPath()
        fill38Path.move(to: CGPoint(x: 214.71, y: 217.5))
        fill38Path.addLine(to: CGPoint(x: 185.29, y: 217.5))
        fill38Path.addLine(to: CGPoint(x: 185.29, y: 208.68))
        fill38Path.addCurve(to: CGPoint(x: 186.61, y: 206.17), controlPoint1: CGPoint(x: 185.29, y: 207.26), controlPoint2: CGPoint(x: 185.74, y: 206.6))
        fill38Path.addCurve(to: CGPoint(x: 187.69, y: 205.82), controlPoint1: CGPoint(x: 186.93, y: 206), controlPoint2: CGPoint(x: 187.31, y: 205.89))
        fill38Path.addLine(to: CGPoint(x: 198.68, y: 211.31))
        fill38Path.addCurve(to: CGPoint(x: 201.32, y: 211.31), controlPoint1: CGPoint(x: 199.51, y: 211.73), controlPoint2: CGPoint(x: 200.49, y: 211.73))
        fill38Path.addLine(to: CGPoint(x: 212.39, y: 205.78))
        fill38Path.addCurve(to: CGPoint(x: 214.28, y: 207.06), controlPoint1: CGPoint(x: 213.39, y: 205.9), controlPoint2: CGPoint(x: 213.91, y: 206.32))
        fill38Path.addCurve(to: CGPoint(x: 214.65, y: 208.25), controlPoint1: CGPoint(x: 214.46, y: 207.42), controlPoint2: CGPoint(x: 214.58, y: 207.83))
        fill38Path.addCurve(to: CGPoint(x: 214.71, y: 208.68), controlPoint1: CGPoint(x: 214.69, y: 208.49), controlPoint2: CGPoint(x: 214.71, y: 208.65))
        fill38Path.addLine(to: CGPoint(x: 214.71, y: 217.5))
        fill38Path.close()
        fill38Path.move(to: CGPoint(x: 220.46, y: 207.28))
        fill38Path.addCurve(to: CGPoint(x: 219.54, y: 204.43), controlPoint1: CGPoint(x: 220.3, y: 206.32), controlPoint2: CGPoint(x: 220.01, y: 205.36))
        fill38Path.addCurve(to: CGPoint(x: 211.76, y: 199.86), controlPoint1: CGPoint(x: 218.14, y: 201.63), controlPoint2: CGPoint(x: 215.49, y: 199.86))
        fill38Path.addCurve(to: CGPoint(x: 210.45, y: 200.17), controlPoint1: CGPoint(x: 211.31, y: 199.86), controlPoint2: CGPoint(x: 210.86, y: 199.97))
        fill38Path.addLine(to: CGPoint(x: 200, y: 205.4))
        fill38Path.addLine(to: CGPoint(x: 189.55, y: 200.17))
        fill38Path.addCurve(to: CGPoint(x: 188.24, y: 199.86), controlPoint1: CGPoint(x: 189.14, y: 199.97), controlPoint2: CGPoint(x: 188.69, y: 199.86))
        fill38Path.addCurve(to: CGPoint(x: 186.83, y: 200), controlPoint1: CGPoint(x: 187.9, y: 199.86), controlPoint2: CGPoint(x: 187.42, y: 199.9))
        fill38Path.addCurve(to: CGPoint(x: 183.98, y: 200.91), controlPoint1: CGPoint(x: 185.87, y: 200.16), controlPoint2: CGPoint(x: 184.91, y: 200.45))
        fill38Path.addCurve(to: CGPoint(x: 179.41, y: 208.68), controlPoint1: CGPoint(x: 181.18, y: 202.31), controlPoint2: CGPoint(x: 179.41, y: 204.96))
        fill38Path.addLine(to: CGPoint(x: 179.41, y: 220.44))
        fill38Path.addCurve(to: CGPoint(x: 182.35, y: 223.38), controlPoint1: CGPoint(x: 179.41, y: 222.06), controlPoint2: CGPoint(x: 180.73, y: 223.38))
        fill38Path.addLine(to: CGPoint(x: 217.65, y: 223.38))
        fill38Path.addCurve(to: CGPoint(x: 220.59, y: 220.44), controlPoint1: CGPoint(x: 219.27, y: 223.38), controlPoint2: CGPoint(x: 220.59, y: 222.06))
        fill38Path.addLine(to: CGPoint(x: 220.59, y: 208.68))
        fill38Path.addCurve(to: CGPoint(x: 220.46, y: 207.28), controlPoint1: CGPoint(x: 220.59, y: 208.35), controlPoint2: CGPoint(x: 220.55, y: 207.87))
        fill38Path.close()
        fill38Path.usesEvenOddFillRule = true
        color.setFill()
        fill38Path.fill()

        //// Fill-40 Drawing
        let fill40Path = UIBezierPath()
        fill40Path.move(to: CGPoint(x: 100, y: 177.08))
        fill40Path.addCurve(to: CGPoint(x: 108.82, y: 185.9), controlPoint1: CGPoint(x: 104.87, y: 177.08), controlPoint2: CGPoint(x: 108.82, y: 181.03))
        fill40Path.addCurve(to: CGPoint(x: 100, y: 194.72), controlPoint1: CGPoint(x: 108.82, y: 190.77), controlPoint2: CGPoint(x: 104.87, y: 194.72))
        fill40Path.addCurve(to: CGPoint(x: 91.18, y: 185.9), controlPoint1: CGPoint(x: 95.13, y: 194.72), controlPoint2: CGPoint(x: 91.18, y: 190.77))
        fill40Path.addCurve(to: CGPoint(x: 100, y: 177.08), controlPoint1: CGPoint(x: 91.18, y: 181.03), controlPoint2: CGPoint(x: 95.13, y: 177.08))
        fill40Path.close()
        fill40Path.move(to: CGPoint(x: 100, y: 200.6))
        fill40Path.addCurve(to: CGPoint(x: 114.71, y: 185.9), controlPoint1: CGPoint(x: 108.12, y: 200.6), controlPoint2: CGPoint(x: 114.71, y: 194.02))
        fill40Path.addCurve(to: CGPoint(x: 100, y: 171.2), controlPoint1: CGPoint(x: 114.71, y: 177.79), controlPoint2: CGPoint(x: 108.12, y: 171.2))
        fill40Path.addCurve(to: CGPoint(x: 85.29, y: 185.9), controlPoint1: CGPoint(x: 91.88, y: 171.2), controlPoint2: CGPoint(x: 85.29, y: 177.79))
        fill40Path.addCurve(to: CGPoint(x: 100, y: 200.6), controlPoint1: CGPoint(x: 85.29, y: 194.02), controlPoint2: CGPoint(x: 91.88, y: 200.6))
        fill40Path.close()
        fill40Path.usesEvenOddFillRule = true
        color.setFill()
        fill40Path.fill()

        //// Fill-42 Drawing
        let fill42Path = UIBezierPath()
        fill42Path.move(to: CGPoint(x: 114.71, y: 218.24))
        fill42Path.addLine(to: CGPoint(x: 85.29, y: 218.24))
        fill42Path.addLine(to: CGPoint(x: 85.29, y: 209.42))
        fill42Path.addCurve(to: CGPoint(x: 86.61, y: 206.9), controlPoint1: CGPoint(x: 85.29, y: 208), controlPoint2: CGPoint(x: 85.73, y: 207.34))
        fill42Path.addCurve(to: CGPoint(x: 87.69, y: 206.55), controlPoint1: CGPoint(x: 86.93, y: 206.74), controlPoint2: CGPoint(x: 87.31, y: 206.62))
        fill42Path.addLine(to: CGPoint(x: 98.68, y: 212.05))
        fill42Path.addCurve(to: CGPoint(x: 101.32, y: 212.05), controlPoint1: CGPoint(x: 99.51, y: 212.46), controlPoint2: CGPoint(x: 100.49, y: 212.46))
        fill42Path.addLine(to: CGPoint(x: 112.39, y: 206.51))
        fill42Path.addCurve(to: CGPoint(x: 114.28, y: 207.79), controlPoint1: CGPoint(x: 113.39, y: 206.63), controlPoint2: CGPoint(x: 113.91, y: 207.06))
        fill42Path.addCurve(to: CGPoint(x: 114.65, y: 208.98), controlPoint1: CGPoint(x: 114.46, y: 208.15), controlPoint2: CGPoint(x: 114.58, y: 208.56))
        fill42Path.addCurve(to: CGPoint(x: 114.71, y: 209.42), controlPoint1: CGPoint(x: 114.69, y: 209.22), controlPoint2: CGPoint(x: 114.71, y: 209.39))
        fill42Path.addLine(to: CGPoint(x: 114.71, y: 218.24))
        fill42Path.close()
        fill42Path.move(to: CGPoint(x: 120.46, y: 208.02))
        fill42Path.addCurve(to: CGPoint(x: 119.54, y: 205.16), controlPoint1: CGPoint(x: 120.3, y: 207.06), controlPoint2: CGPoint(x: 120.01, y: 206.09))
        fill42Path.addCurve(to: CGPoint(x: 111.76, y: 200.6), controlPoint1: CGPoint(x: 118.14, y: 202.36), controlPoint2: CGPoint(x: 115.49, y: 200.6))
        fill42Path.addCurve(to: CGPoint(x: 110.45, y: 200.91), controlPoint1: CGPoint(x: 111.31, y: 200.6), controlPoint2: CGPoint(x: 110.86, y: 200.71))
        fill42Path.addLine(to: CGPoint(x: 100, y: 206.13))
        fill42Path.addLine(to: CGPoint(x: 89.55, y: 200.91))
        fill42Path.addCurve(to: CGPoint(x: 88.24, y: 200.6), controlPoint1: CGPoint(x: 89.14, y: 200.71), controlPoint2: CGPoint(x: 88.69, y: 200.6))
        fill42Path.addCurve(to: CGPoint(x: 86.83, y: 200.73), controlPoint1: CGPoint(x: 87.9, y: 200.6), controlPoint2: CGPoint(x: 87.42, y: 200.63))
        fill42Path.addCurve(to: CGPoint(x: 83.98, y: 201.64), controlPoint1: CGPoint(x: 85.87, y: 200.89), controlPoint2: CGPoint(x: 84.91, y: 201.18))
        fill42Path.addCurve(to: CGPoint(x: 79.41, y: 209.42), controlPoint1: CGPoint(x: 81.18, y: 203.04), controlPoint2: CGPoint(x: 79.41, y: 205.69))
        fill42Path.addLine(to: CGPoint(x: 79.41, y: 221.17))
        fill42Path.addCurve(to: CGPoint(x: 82.35, y: 224.11), controlPoint1: CGPoint(x: 79.41, y: 222.8), controlPoint2: CGPoint(x: 80.73, y: 224.11))
        fill42Path.addLine(to: CGPoint(x: 117.65, y: 224.11))
        fill42Path.addCurve(to: CGPoint(x: 120.59, y: 221.17), controlPoint1: CGPoint(x: 119.27, y: 224.11), controlPoint2: CGPoint(x: 120.59, y: 222.8))
        fill42Path.addLine(to: CGPoint(x: 120.59, y: 209.42))
        fill42Path.addCurve(to: CGPoint(x: 120.46, y: 208.02), controlPoint1: CGPoint(x: 120.59, y: 209.08), controlPoint2: CGPoint(x: 120.55, y: 208.6))
        fill42Path.close()
        fill42Path.usesEvenOddFillRule = true
        color.setFill()
        fill42Path.fill()

        //// Fill-44 Drawing
        let fill44Path = UIBezierPath()
        fill44Path.move(to: CGPoint(x: 70.59, y: 323.32))
        fill44Path.addLine(to: CGPoint(x: 66.91, y: 323.32))
        fill44Path.addCurve(to: CGPoint(x: 66.05, y: 322.71), controlPoint1: CGPoint(x: 66.67, y: 323.32), controlPoint2: CGPoint(x: 66.65, y: 323.31))
        fill44Path.addCurve(to: CGPoint(x: 61.03, y: 320.38), controlPoint1: CGPoint(x: 64.45, y: 321.11), controlPoint2: CGPoint(x: 63.23, y: 320.38))
        fill44Path.addCurve(to: CGPoint(x: 56.01, y: 322.71), controlPoint1: CGPoint(x: 58.82, y: 320.38), controlPoint2: CGPoint(x: 57.61, y: 321.11))
        fill44Path.addCurve(to: CGPoint(x: 55.15, y: 323.32), controlPoint1: CGPoint(x: 55.41, y: 323.31), controlPoint2: CGPoint(x: 55.39, y: 323.32))
        fill44Path.addCurve(to: CGPoint(x: 54.29, y: 322.71), controlPoint1: CGPoint(x: 54.9, y: 323.32), controlPoint2: CGPoint(x: 54.89, y: 323.31))
        fill44Path.addCurve(to: CGPoint(x: 49.26, y: 320.38), controlPoint1: CGPoint(x: 52.68, y: 321.11), controlPoint2: CGPoint(x: 51.47, y: 320.38))
        fill44Path.addCurve(to: CGPoint(x: 44.24, y: 322.71), controlPoint1: CGPoint(x: 47.06, y: 320.38), controlPoint2: CGPoint(x: 45.85, y: 321.11))
        fill44Path.addCurve(to: CGPoint(x: 43.38, y: 323.32), controlPoint1: CGPoint(x: 43.64, y: 323.31), controlPoint2: CGPoint(x: 43.63, y: 323.32))
        fill44Path.addCurve(to: CGPoint(x: 42.52, y: 322.71), controlPoint1: CGPoint(x: 43.14, y: 323.32), controlPoint2: CGPoint(x: 43.12, y: 323.31))
        fill44Path.addCurve(to: CGPoint(x: 37.5, y: 320.38), controlPoint1: CGPoint(x: 40.92, y: 321.11), controlPoint2: CGPoint(x: 39.7, y: 320.38))
        fill44Path.addCurve(to: CGPoint(x: 34.26, y: 318.41), controlPoint1: CGPoint(x: 37.02, y: 320.38), controlPoint2: CGPoint(x: 35.78, y: 319.71))
        fill44Path.addCurve(to: CGPoint(x: 29.57, y: 313.48), controlPoint1: CGPoint(x: 32.74, y: 317.13), controlPoint2: CGPoint(x: 31.08, y: 315.36))
        fill44Path.addCurve(to: CGPoint(x: 5.88, y: 238.08), controlPoint1: CGPoint(x: 14.35, y: 291.5), controlPoint2: CGPoint(x: 5.88, y: 265.77))
        fill44Path.addLine(to: CGPoint(x: 5.88, y: 169.11))
        fill44Path.addCurve(to: CGPoint(x: 5.88, y: 169.06), controlPoint1: CGPoint(x: 5.88, y: 169.09), controlPoint2: CGPoint(x: 5.88, y: 169.07))
        fill44Path.addCurve(to: CGPoint(x: 5.88, y: 169), controlPoint1: CGPoint(x: 5.88, y: 169.04), controlPoint2: CGPoint(x: 5.88, y: 169.02))
        fill44Path.addCurve(to: CGPoint(x: 20.61, y: 155.77), controlPoint1: CGPoint(x: 5.88, y: 160), controlPoint2: CGPoint(x: 10.4, y: 155.86))
        fill44Path.addLine(to: CGPoint(x: 44.85, y: 155.77))
        fill44Path.addCurve(to: CGPoint(x: 46.93, y: 154.91), controlPoint1: CGPoint(x: 45.63, y: 155.77), controlPoint2: CGPoint(x: 46.38, y: 155.46))
        fill44Path.addLine(to: CGPoint(x: 53.68, y: 148.17))
        fill44Path.addLine(to: CGPoint(x: 53.68, y: 151.36))
        fill44Path.addCurve(to: CGPoint(x: 56.62, y: 154.3), controlPoint1: CGPoint(x: 53.68, y: 152.99), controlPoint2: CGPoint(x: 54.99, y: 154.3))
        fill44Path.addCurve(to: CGPoint(x: 59.56, y: 151.36), controlPoint1: CGPoint(x: 58.24, y: 154.3), controlPoint2: CGPoint(x: 59.56, y: 152.99))
        fill44Path.addLine(to: CGPoint(x: 59.56, y: 141.08))
        fill44Path.addCurve(to: CGPoint(x: 59.5, y: 140.51), controlPoint1: CGPoint(x: 59.56, y: 140.88), controlPoint2: CGPoint(x: 59.54, y: 140.69))
        fill44Path.addCurve(to: CGPoint(x: 59.48, y: 140.43), controlPoint1: CGPoint(x: 59.5, y: 140.49), controlPoint2: CGPoint(x: 59.49, y: 140.46))
        fill44Path.addCurve(to: CGPoint(x: 59.33, y: 139.94), controlPoint1: CGPoint(x: 59.45, y: 140.26), controlPoint2: CGPoint(x: 59.39, y: 140.1))
        fill44Path.addCurve(to: CGPoint(x: 59.32, y: 139.93), controlPoint1: CGPoint(x: 59.33, y: 139.94), controlPoint2: CGPoint(x: 59.33, y: 139.93))
        fill44Path.addCurve(to: CGPoint(x: 58.31, y: 138.68), controlPoint1: CGPoint(x: 59.11, y: 139.41), controlPoint2: CGPoint(x: 58.75, y: 138.98))
        fill44Path.addCurve(to: CGPoint(x: 58.21, y: 138.61), controlPoint1: CGPoint(x: 58.28, y: 138.66), controlPoint2: CGPoint(x: 58.25, y: 138.63))
        fill44Path.addCurve(to: CGPoint(x: 57.81, y: 138.4), controlPoint1: CGPoint(x: 58.09, y: 138.53), controlPoint2: CGPoint(x: 57.95, y: 138.46))
        fill44Path.addCurve(to: CGPoint(x: 57.75, y: 138.36), controlPoint1: CGPoint(x: 57.79, y: 138.39), controlPoint2: CGPoint(x: 57.77, y: 138.37))
        fill44Path.addCurve(to: CGPoint(x: 57.26, y: 138.21), controlPoint1: CGPoint(x: 57.59, y: 138.3), controlPoint2: CGPoint(x: 57.42, y: 138.25))
        fill44Path.addCurve(to: CGPoint(x: 57.15, y: 138.19), controlPoint1: CGPoint(x: 57.22, y: 138.2), controlPoint2: CGPoint(x: 57.18, y: 138.2))
        fill44Path.addCurve(to: CGPoint(x: 56.47, y: 138.14), controlPoint1: CGPoint(x: 56.93, y: 138.15), controlPoint2: CGPoint(x: 56.7, y: 138.13))
        fill44Path.addLine(to: CGPoint(x: 46.32, y: 138.14))
        fill44Path.addCurve(to: CGPoint(x: 43.38, y: 141.08), controlPoint1: CGPoint(x: 44.7, y: 138.14), controlPoint2: CGPoint(x: 43.38, y: 139.45))
        fill44Path.addCurve(to: CGPoint(x: 46.32, y: 144.02), controlPoint1: CGPoint(x: 43.38, y: 142.7), controlPoint2: CGPoint(x: 44.7, y: 144.02))
        fill44Path.addLine(to: CGPoint(x: 49.52, y: 144.02))
        fill44Path.addLine(to: CGPoint(x: 43.63, y: 149.89))
        fill44Path.addLine(to: CGPoint(x: 20.59, y: 149.89))
        fill44Path.addCurve(to: CGPoint(x: -0, y: 169), controlPoint1: CGPoint(x: 7.24, y: 150), controlPoint2: CGPoint(x: -0, y: 156.64))
        fill44Path.addCurve(to: CGPoint(x: 0.01, y: 169.06), controlPoint1: CGPoint(x: -0, y: 169.02), controlPoint2: CGPoint(x: 0.01, y: 169.04))
        fill44Path.addCurve(to: CGPoint(x: -0, y: 169.11), controlPoint1: CGPoint(x: 0.01, y: 169.07), controlPoint2: CGPoint(x: -0, y: 169.09))
        fill44Path.addLine(to: CGPoint(x: -0, y: 238.08))
        fill44Path.addCurve(to: CGPoint(x: 24.79, y: 316.91), controlPoint1: CGPoint(x: -0, y: 267.04), controlPoint2: CGPoint(x: 8.87, y: 293.95))
        fill44Path.addCurve(to: CGPoint(x: 24.85, y: 316.99), controlPoint1: CGPoint(x: 24.81, y: 316.94), controlPoint2: CGPoint(x: 24.83, y: 316.96))
        fill44Path.addCurve(to: CGPoint(x: 24.91, y: 317.07), controlPoint1: CGPoint(x: 24.87, y: 317.01), controlPoint2: CGPoint(x: 24.89, y: 317.04))
        fill44Path.addCurve(to: CGPoint(x: 37.5, y: 326.26), controlPoint1: CGPoint(x: 29.27, y: 322.51), controlPoint2: CGPoint(x: 33.67, y: 326.26))
        fill44Path.addCurve(to: CGPoint(x: 38.36, y: 326.87), controlPoint1: CGPoint(x: 37.75, y: 326.26), controlPoint2: CGPoint(x: 37.76, y: 326.27))
        fill44Path.addCurve(to: CGPoint(x: 43.38, y: 329.2), controlPoint1: CGPoint(x: 39.97, y: 328.47), controlPoint2: CGPoint(x: 41.18, y: 329.2))
        fill44Path.addCurve(to: CGPoint(x: 48.4, y: 326.87), controlPoint1: CGPoint(x: 45.59, y: 329.2), controlPoint2: CGPoint(x: 46.8, y: 328.47))
        fill44Path.addCurve(to: CGPoint(x: 49.26, y: 326.26), controlPoint1: CGPoint(x: 49, y: 326.27), controlPoint2: CGPoint(x: 49.02, y: 326.26))
        fill44Path.addCurve(to: CGPoint(x: 50.13, y: 326.87), controlPoint1: CGPoint(x: 49.51, y: 326.26), controlPoint2: CGPoint(x: 49.53, y: 326.27))
        fill44Path.addCurve(to: CGPoint(x: 55.15, y: 329.2), controlPoint1: CGPoint(x: 51.73, y: 328.47), controlPoint2: CGPoint(x: 52.94, y: 329.2))
        fill44Path.addCurve(to: CGPoint(x: 60.17, y: 326.87), controlPoint1: CGPoint(x: 57.35, y: 329.2), controlPoint2: CGPoint(x: 58.56, y: 328.47))
        fill44Path.addCurve(to: CGPoint(x: 61.03, y: 326.26), controlPoint1: CGPoint(x: 60.77, y: 326.27), controlPoint2: CGPoint(x: 60.78, y: 326.26))
        fill44Path.addCurve(to: CGPoint(x: 61.89, y: 326.87), controlPoint1: CGPoint(x: 61.28, y: 326.26), controlPoint2: CGPoint(x: 61.29, y: 326.27))
        fill44Path.addCurve(to: CGPoint(x: 66.91, y: 329.2), controlPoint1: CGPoint(x: 63.5, y: 328.47), controlPoint2: CGPoint(x: 64.71, y: 329.2))
        fill44Path.addLine(to: CGPoint(x: 70.59, y: 329.2))
        fill44Path.addCurve(to: CGPoint(x: 73.53, y: 326.26), controlPoint1: CGPoint(x: 72.21, y: 329.2), controlPoint2: CGPoint(x: 73.53, y: 327.88))
        fill44Path.addCurve(to: CGPoint(x: 70.59, y: 323.32), controlPoint1: CGPoint(x: 73.53, y: 324.63), controlPoint2: CGPoint(x: 72.21, y: 323.32))
        fill44Path.close()
        fill44Path.usesEvenOddFillRule = true
        color.setFill()
        fill44Path.fill()

        //// Fill-47 Drawing
        let fill47Path = UIBezierPath()
        fill47Path.move(to: CGPoint(x: 102.94, y: 307.93))
        fill47Path.addLine(to: CGPoint(x: 100.35, y: 302.74))
        fill47Path.addLine(to: CGPoint(x: 105.54, y: 302.74))
        fill47Path.addLine(to: CGPoint(x: 102.94, y: 307.93))
        fill47Path.close()
        fill47Path.move(to: CGPoint(x: 98.53, y: 259.39))
        fill47Path.addLine(to: CGPoint(x: 107.35, y: 259.39))
        fill47Path.addLine(to: CGPoint(x: 107.35, y: 255.71))
        fill47Path.addLine(to: CGPoint(x: 98.53, y: 255.71))
        fill47Path.addLine(to: CGPoint(x: 98.53, y: 259.39))
        fill47Path.close()
        fill47Path.move(to: CGPoint(x: 98.53, y: 296.86))
        fill47Path.addLine(to: CGPoint(x: 107.35, y: 296.86))
        fill47Path.addLine(to: CGPoint(x: 107.35, y: 265.27))
        fill47Path.addLine(to: CGPoint(x: 98.53, y: 265.27))
        fill47Path.addLine(to: CGPoint(x: 98.53, y: 296.86))
        fill47Path.close()
        fill47Path.move(to: CGPoint(x: 113.23, y: 299.83))
        fill47Path.addCurve(to: CGPoint(x: 113.24, y: 299.8), controlPoint1: CGPoint(x: 113.23, y: 299.82), controlPoint2: CGPoint(x: 113.24, y: 299.81))
        fill47Path.addLine(to: CGPoint(x: 113.24, y: 252.77))
        fill47Path.addCurve(to: CGPoint(x: 110.29, y: 249.83), controlPoint1: CGPoint(x: 113.24, y: 251.15), controlPoint2: CGPoint(x: 111.92, y: 249.83))
        fill47Path.addLine(to: CGPoint(x: 95.59, y: 249.83))
        fill47Path.addCurve(to: CGPoint(x: 92.65, y: 252.77), controlPoint1: CGPoint(x: 93.96, y: 249.83), controlPoint2: CGPoint(x: 92.65, y: 251.15))
        fill47Path.addLine(to: CGPoint(x: 92.65, y: 299.8))
        fill47Path.addCurve(to: CGPoint(x: 92.65, y: 299.83), controlPoint1: CGPoint(x: 92.65, y: 299.81), controlPoint2: CGPoint(x: 92.65, y: 299.82))
        fill47Path.addCurve(to: CGPoint(x: 92.86, y: 300.88), controlPoint1: CGPoint(x: 92.65, y: 300.17), controlPoint2: CGPoint(x: 92.72, y: 300.53))
        fill47Path.addCurve(to: CGPoint(x: 92.91, y: 301.01), controlPoint1: CGPoint(x: 92.87, y: 300.92), controlPoint2: CGPoint(x: 92.89, y: 300.97))
        fill47Path.addCurve(to: CGPoint(x: 92.96, y: 301.12), controlPoint1: CGPoint(x: 92.93, y: 301.05), controlPoint2: CGPoint(x: 92.94, y: 301.08))
        fill47Path.addLine(to: CGPoint(x: 100.31, y: 315.81))
        fill47Path.addCurve(to: CGPoint(x: 105.57, y: 315.81), controlPoint1: CGPoint(x: 101.39, y: 317.98), controlPoint2: CGPoint(x: 104.49, y: 317.98))
        fill47Path.addLine(to: CGPoint(x: 112.92, y: 301.12))
        fill47Path.addCurve(to: CGPoint(x: 112.97, y: 301.01), controlPoint1: CGPoint(x: 112.94, y: 301.08), controlPoint2: CGPoint(x: 112.95, y: 301.05))
        fill47Path.addCurve(to: CGPoint(x: 113.03, y: 300.88), controlPoint1: CGPoint(x: 112.99, y: 300.97), controlPoint2: CGPoint(x: 113.01, y: 300.92))
        fill47Path.addCurve(to: CGPoint(x: 113.23, y: 299.83), controlPoint1: CGPoint(x: 113.16, y: 300.53), controlPoint2: CGPoint(x: 113.23, y: 300.17))
        fill47Path.close()
        fill47Path.usesEvenOddFillRule = true
        color.setFill()
        fill47Path.fill()

        //// Fill-49 Drawing
        let fill49Path = UIBezierPath()
        fill49Path.move(to: CGPoint(x: 114.71, y: 320.38))
        fill49Path.addCurve(to: CGPoint(x: 111.76, y: 317.44), controlPoint1: CGPoint(x: 113.08, y: 320.38), controlPoint2: CGPoint(x: 111.76, y: 319.06))
        fill49Path.addCurve(to: CGPoint(x: 114.71, y: 314.5), controlPoint1: CGPoint(x: 111.76, y: 315.82), controlPoint2: CGPoint(x: 113.08, y: 314.5))
        fill49Path.addCurve(to: CGPoint(x: 118.51, y: 312.42), controlPoint1: CGPoint(x: 116.18, y: 314.5), controlPoint2: CGPoint(x: 116.81, y: 314.12))
        fill49Path.addCurve(to: CGPoint(x: 126.47, y: 308.62), controlPoint1: CGPoint(x: 121.22, y: 309.72), controlPoint2: CGPoint(x: 123.04, y: 308.62))
        fill49Path.addCurve(to: CGPoint(x: 134.43, y: 312.42), controlPoint1: CGPoint(x: 129.9, y: 308.62), controlPoint2: CGPoint(x: 131.72, y: 309.72))
        fill49Path.addCurve(to: CGPoint(x: 138.24, y: 314.5), controlPoint1: CGPoint(x: 136.14, y: 314.12), controlPoint2: CGPoint(x: 136.76, y: 314.5))
        fill49Path.addCurve(to: CGPoint(x: 142.04, y: 312.42), controlPoint1: CGPoint(x: 139.71, y: 314.5), controlPoint2: CGPoint(x: 140.33, y: 314.12))
        fill49Path.addCurve(to: CGPoint(x: 150, y: 308.62), controlPoint1: CGPoint(x: 144.75, y: 309.72), controlPoint2: CGPoint(x: 146.57, y: 308.62))
        fill49Path.addCurve(to: CGPoint(x: 157.96, y: 312.42), controlPoint1: CGPoint(x: 153.43, y: 308.62), controlPoint2: CGPoint(x: 155.25, y: 309.72))
        fill49Path.addCurve(to: CGPoint(x: 161.76, y: 314.5), controlPoint1: CGPoint(x: 159.67, y: 314.12), controlPoint2: CGPoint(x: 160.29, y: 314.5))
        fill49Path.addCurve(to: CGPoint(x: 165.57, y: 312.42), controlPoint1: CGPoint(x: 163.24, y: 314.5), controlPoint2: CGPoint(x: 163.86, y: 314.12))
        fill49Path.addCurve(to: CGPoint(x: 173.53, y: 308.62), controlPoint1: CGPoint(x: 168.27, y: 309.72), controlPoint2: CGPoint(x: 170.1, y: 308.62))
        fill49Path.addCurve(to: CGPoint(x: 181.49, y: 312.42), controlPoint1: CGPoint(x: 176.96, y: 308.62), controlPoint2: CGPoint(x: 178.78, y: 309.72))
        fill49Path.addCurve(to: CGPoint(x: 185.29, y: 314.5), controlPoint1: CGPoint(x: 183.2, y: 314.12), controlPoint2: CGPoint(x: 183.82, y: 314.5))
        fill49Path.addCurve(to: CGPoint(x: 188.24, y: 317.44), controlPoint1: CGPoint(x: 186.92, y: 314.5), controlPoint2: CGPoint(x: 188.24, y: 315.82))
        fill49Path.addCurve(to: CGPoint(x: 185.29, y: 320.38), controlPoint1: CGPoint(x: 188.24, y: 319.06), controlPoint2: CGPoint(x: 186.92, y: 320.38))
        fill49Path.addCurve(to: CGPoint(x: 177.33, y: 316.58), controlPoint1: CGPoint(x: 181.86, y: 320.38), controlPoint2: CGPoint(x: 180.04, y: 319.29))
        fill49Path.addCurve(to: CGPoint(x: 173.53, y: 314.5), controlPoint1: CGPoint(x: 175.63, y: 314.88), controlPoint2: CGPoint(x: 175, y: 314.5))
        fill49Path.addCurve(to: CGPoint(x: 169.73, y: 316.58), controlPoint1: CGPoint(x: 172.06, y: 314.5), controlPoint2: CGPoint(x: 171.43, y: 314.88))
        fill49Path.addCurve(to: CGPoint(x: 161.76, y: 320.38), controlPoint1: CGPoint(x: 167.02, y: 319.29), controlPoint2: CGPoint(x: 165.19, y: 320.38))
        fill49Path.addCurve(to: CGPoint(x: 153.8, y: 316.58), controlPoint1: CGPoint(x: 158.34, y: 320.38), controlPoint2: CGPoint(x: 156.51, y: 319.29))
        fill49Path.addCurve(to: CGPoint(x: 150, y: 314.5), controlPoint1: CGPoint(x: 152.1, y: 314.88), controlPoint2: CGPoint(x: 151.47, y: 314.5))
        fill49Path.addCurve(to: CGPoint(x: 146.2, y: 316.58), controlPoint1: CGPoint(x: 148.53, y: 314.5), controlPoint2: CGPoint(x: 147.9, y: 314.88))
        fill49Path.addCurve(to: CGPoint(x: 138.24, y: 320.38), controlPoint1: CGPoint(x: 143.49, y: 319.29), controlPoint2: CGPoint(x: 141.67, y: 320.38))
        fill49Path.addCurve(to: CGPoint(x: 130.27, y: 316.58), controlPoint1: CGPoint(x: 134.81, y: 320.38), controlPoint2: CGPoint(x: 132.98, y: 319.29))
        fill49Path.addCurve(to: CGPoint(x: 126.47, y: 314.5), controlPoint1: CGPoint(x: 128.57, y: 314.88), controlPoint2: CGPoint(x: 127.94, y: 314.5))
        fill49Path.addCurve(to: CGPoint(x: 122.67, y: 316.58), controlPoint1: CGPoint(x: 125, y: 314.5), controlPoint2: CGPoint(x: 124.37, y: 314.88))
        fill49Path.addCurve(to: CGPoint(x: 114.71, y: 320.38), controlPoint1: CGPoint(x: 119.96, y: 319.29), controlPoint2: CGPoint(x: 118.14, y: 320.38))
        fill49Path.close()
        fill49Path.usesEvenOddFillRule = true
        color.setFill()
        fill49Path.fill()

        //// Fill-51 Drawing
        let fill51Path = UIBezierPath()
        fill51Path.move(to: CGPoint(x: 144.12, y: 83.04))
        fill51Path.addLine(to: CGPoint(x: 155.88, y: 83.04))
        fill51Path.addLine(to: CGPoint(x: 155.88, y: 77.16))
        fill51Path.addLine(to: CGPoint(x: 144.12, y: 77.16))
        fill51Path.addLine(to: CGPoint(x: 144.12, y: 83.04))
        fill51Path.close()
        fill51Path.move(to: CGPoint(x: 135.29, y: 56.58))
        fill51Path.addCurve(to: CGPoint(x: 150, y: 41.89), controlPoint1: CGPoint(x: 135.29, y: 48.47), controlPoint2: CGPoint(x: 141.88, y: 41.89))
        fill51Path.addCurve(to: CGPoint(x: 164.71, y: 56.58), controlPoint1: CGPoint(x: 158.12, y: 41.89), controlPoint2: CGPoint(x: 164.71, y: 48.47))
        fill51Path.addCurve(to: CGPoint(x: 152.94, y: 70.99), controlPoint1: CGPoint(x: 164.71, y: 63.69), controlPoint2: CGPoint(x: 159.65, y: 69.62))
        fill51Path.addLine(to: CGPoint(x: 152.94, y: 62.46))
        fill51Path.addCurve(to: CGPoint(x: 152.08, y: 60.38), controlPoint1: CGPoint(x: 152.94, y: 61.68), controlPoint2: CGPoint(x: 152.63, y: 60.93))
        fill51Path.addLine(to: CGPoint(x: 151.22, y: 59.52))
        fill51Path.addLine(to: CGPoint(x: 155.88, y: 59.52))
        fill51Path.addCurve(to: CGPoint(x: 158.82, y: 56.58), controlPoint1: CGPoint(x: 157.51, y: 59.52), controlPoint2: CGPoint(x: 158.82, y: 58.21))
        fill51Path.addCurve(to: CGPoint(x: 155.88, y: 53.64), controlPoint1: CGPoint(x: 158.82, y: 54.96), controlPoint2: CGPoint(x: 157.51, y: 53.64))
        fill51Path.addLine(to: CGPoint(x: 144.12, y: 53.64))
        fill51Path.addCurve(to: CGPoint(x: 142.04, y: 58.66), controlPoint1: CGPoint(x: 141.5, y: 53.64), controlPoint2: CGPoint(x: 140.19, y: 56.81))
        fill51Path.addLine(to: CGPoint(x: 147.06, y: 63.68))
        fill51Path.addLine(to: CGPoint(x: 147.06, y: 70.99))
        fill51Path.addCurve(to: CGPoint(x: 135.29, y: 56.58), controlPoint1: CGPoint(x: 140.35, y: 69.62), controlPoint2: CGPoint(x: 135.29, y: 63.69))
        fill51Path.close()
        fill51Path.move(to: CGPoint(x: 170.59, y: 56.58))
        fill51Path.addCurve(to: CGPoint(x: 150, y: 36.01), controlPoint1: CGPoint(x: 170.59, y: 45.22), controlPoint2: CGPoint(x: 161.37, y: 36.01))
        fill51Path.addCurve(to: CGPoint(x: 129.41, y: 56.58), controlPoint1: CGPoint(x: 138.63, y: 36.01), controlPoint2: CGPoint(x: 129.41, y: 45.22))
        fill51Path.addCurve(to: CGPoint(x: 138.24, y: 73.46), controlPoint1: CGPoint(x: 129.41, y: 63.57), controlPoint2: CGPoint(x: 132.9, y: 69.75))
        fill51Path.addLine(to: CGPoint(x: 138.24, y: 85.98))
        fill51Path.addCurve(to: CGPoint(x: 141.18, y: 88.92), controlPoint1: CGPoint(x: 138.24, y: 87.6), controlPoint2: CGPoint(x: 139.55, y: 88.92))
        fill51Path.addLine(to: CGPoint(x: 158.82, y: 88.92))
        fill51Path.addCurve(to: CGPoint(x: 161.76, y: 85.98), controlPoint1: CGPoint(x: 160.45, y: 88.92), controlPoint2: CGPoint(x: 161.76, y: 87.6))
        fill51Path.addLine(to: CGPoint(x: 161.76, y: 73.46))
        fill51Path.addCurve(to: CGPoint(x: 170.59, y: 56.58), controlPoint1: CGPoint(x: 167.1, y: 69.75), controlPoint2: CGPoint(x: 170.59, y: 63.57))
        fill51Path.close()
        fill51Path.usesEvenOddFillRule = true
        color.setFill()
        fill51Path.fill()

        //// Fill-53 Drawing
        let fill53Path = UIBezierPath(roundedRect: CGRect(x: 147, y: 21, width: 6, height: 12), cornerRadius: 3)
        color.setFill()
        fill53Path.fill()

        //// Fill-54 Drawing
        context.saveGState()
        context.translateBy(x: 171.32, y: 37.11)
        context.rotate(by: 45 * CGFloat.pi/180)

        let fill54Path = UIBezierPath(roundedRect: CGRect(x: -2.94, y: -6.07, width: 5.88, height: 12.13), cornerRadius: 2.94)
        color.setFill()
        fill54Path.fill()

        context.restoreGState()

        //// Fill-55 Drawing
        let fill55Path = UIBezierPath(roundedRect: CGRect(x: 174, y: 54, width: 11, height: 6), cornerRadius: 3)
        color.setFill()
        fill55Path.fill()

        //// Fill-56 Drawing
        context.saveGState()
        context.translateBy(x: 128.68, y: 36.86)
        context.rotate(by: 45 * CGFloat.pi/180)

        let fill56Path = UIBezierPath(roundedRect: CGRect(x: -6.07, y: -2.94, width: 12.13, height: 5.88), cornerRadius: 2.94)
        color.setFill()
        fill56Path.fill()

        context.restoreGState()

        //// Fill-57 Drawing
        let fill57Path = UIBezierPath(roundedRect: CGRect(x: 115, y: 54, width: 11, height: 6), cornerRadius: 3)
        color.setFill()
        fill57Path.fill()

        //// Fill-58 Drawing
        let fill58Path = UIBezierPath()
        fill58Path.move(to: CGPoint(x: 208.82, y: 76.42))
        fill58Path.addLine(to: CGPoint(x: 220.29, y: 76.42))
        fill58Path.addCurve(to: CGPoint(x: 208.82, y: 64.96), controlPoint1: CGPoint(x: 219.12, y: 70.67), controlPoint2: CGPoint(x: 214.59, y: 66.13))
        fill58Path.addLine(to: CGPoint(x: 208.82, y: 76.42))
        fill58Path.close()
        fill58Path.move(to: CGPoint(x: 205.88, y: 82.3))
        fill58Path.addCurve(to: CGPoint(x: 202.94, y: 79.36), controlPoint1: CGPoint(x: 204.26, y: 82.3), controlPoint2: CGPoint(x: 202.94, y: 80.99))
        fill58Path.addLine(to: CGPoint(x: 202.94, y: 61.73))
        fill58Path.addCurve(to: CGPoint(x: 205.88, y: 58.79), controlPoint1: CGPoint(x: 202.94, y: 60.1), controlPoint2: CGPoint(x: 204.26, y: 58.79))
        fill58Path.addCurve(to: CGPoint(x: 226.47, y: 79.36), controlPoint1: CGPoint(x: 217.25, y: 58.79), controlPoint2: CGPoint(x: 226.47, y: 68))
        fill58Path.addCurve(to: CGPoint(x: 223.53, y: 82.3), controlPoint1: CGPoint(x: 226.47, y: 80.99), controlPoint2: CGPoint(x: 225.15, y: 82.3))
        fill58Path.addLine(to: CGPoint(x: 205.88, y: 82.3))
        fill58Path.close()
        fill58Path.usesEvenOddFillRule = true
        color.setFill()
        fill58Path.fill()

        //// Fill-59 Drawing
        let fill59Path = UIBezierPath()
        fill59Path.move(to: CGPoint(x: 196.33, y: 91.86))
        fill59Path.addCurve(to: CGPoint(x: 193.39, y: 88.92), controlPoint1: CGPoint(x: 194.7, y: 91.86), controlPoint2: CGPoint(x: 193.39, y: 90.54))
        fill59Path.addLine(to: CGPoint(x: 193.39, y: 71.52))
        fill59Path.addCurve(to: CGPoint(x: 178.68, y: 88.92), controlPoint1: CGPoint(x: 185.04, y: 72.92), controlPoint2: CGPoint(x: 178.68, y: 80.18))
        fill59Path.addCurve(to: CGPoint(x: 196.33, y: 106.56), controlPoint1: CGPoint(x: 178.68, y: 98.66), controlPoint2: CGPoint(x: 186.58, y: 106.56))
        fill59Path.addCurve(to: CGPoint(x: 213.69, y: 91.86), controlPoint1: CGPoint(x: 204.95, y: 106.56), controlPoint2: CGPoint(x: 212.2, y: 100.17))
        fill59Path.addLine(to: CGPoint(x: 196.33, y: 91.86))
        fill59Path.close()
        fill59Path.move(to: CGPoint(x: 199.27, y: 85.98))
        fill59Path.addLine(to: CGPoint(x: 216.91, y: 85.98))
        fill59Path.addCurve(to: CGPoint(x: 219.85, y: 88.95), controlPoint1: CGPoint(x: 218.55, y: 85.98), controlPoint2: CGPoint(x: 219.87, y: 87.32))
        fill59Path.addCurve(to: CGPoint(x: 196.33, y: 112.44), controlPoint1: CGPoint(x: 219.72, y: 101.87), controlPoint2: CGPoint(x: 209.19, y: 112.44))
        fill59Path.addCurve(to: CGPoint(x: 172.79, y: 88.92), controlPoint1: CGPoint(x: 183.33, y: 112.44), controlPoint2: CGPoint(x: 172.79, y: 101.91))
        fill59Path.addCurve(to: CGPoint(x: 196.33, y: 65.4), controlPoint1: CGPoint(x: 172.79, y: 75.93), controlPoint2: CGPoint(x: 183.33, y: 65.4))
        fill59Path.addCurve(to: CGPoint(x: 199.27, y: 68.34), controlPoint1: CGPoint(x: 197.95, y: 65.4), controlPoint2: CGPoint(x: 199.27, y: 66.72))
        fill59Path.addLine(to: CGPoint(x: 199.27, y: 85.98))
        fill59Path.close()
        fill59Path.usesEvenOddFillRule = true
        color.setFill()
        fill59Path.fill()

        //// Fill-60 Drawing
        let fill60Path = UIBezierPath()
        fill60Path.move(to: CGPoint(x: 277.04, y: 142.3))
        fill60Path.addCurve(to: CGPoint(x: 273.02, y: 143.34), controlPoint1: CGPoint(x: 275.64, y: 141.47), controlPoint2: CGPoint(x: 273.84, y: 141.94))
        fill60Path.addCurve(to: CGPoint(x: 258.96, y: 151.36), controlPoint1: CGPoint(x: 270.13, y: 148.27), controlPoint2: CGPoint(x: 264.82, y: 151.36))
        fill60Path.addCurve(to: CGPoint(x: 244, y: 141.58), controlPoint1: CGPoint(x: 252.24, y: 151.36), controlPoint2: CGPoint(x: 246.48, y: 147.32))
        fill60Path.addCurve(to: CGPoint(x: 247.4, y: 140.45), controlPoint1: CGPoint(x: 245.23, y: 142), controlPoint2: CGPoint(x: 246.64, y: 141.58))
        fill60Path.addCurve(to: CGPoint(x: 246.6, y: 136.37), controlPoint1: CGPoint(x: 248.3, y: 139.1), controlPoint2: CGPoint(x: 247.94, y: 137.27))
        fill60Path.addLine(to: CGPoint(x: 241.71, y: 133.08))
        fill60Path.addCurve(to: CGPoint(x: 240.79, y: 132.53), controlPoint1: CGPoint(x: 241.44, y: 132.85), controlPoint2: CGPoint(x: 241.14, y: 132.66))
        fill60Path.addCurve(to: CGPoint(x: 237.06, y: 133.7), controlPoint1: CGPoint(x: 239.46, y: 131.92), controlPoint2: CGPoint(x: 237.84, y: 132.39))
        fill60Path.addLine(to: CGPoint(x: 233.5, y: 139.68))
        fill60Path.addCurve(to: CGPoint(x: 234.53, y: 143.7), controlPoint1: CGPoint(x: 232.67, y: 141.07), controlPoint2: CGPoint(x: 233.13, y: 142.88))
        fill60Path.addCurve(to: CGPoint(x: 238.27, y: 143.07), controlPoint1: CGPoint(x: 235.78, y: 144.45), controlPoint2: CGPoint(x: 237.35, y: 144.15))
        fill60Path.addCurve(to: CGPoint(x: 258.96, y: 157.24), controlPoint1: CGPoint(x: 241.44, y: 151.35), controlPoint2: CGPoint(x: 249.51, y: 157.24))
        fill60Path.addCurve(to: CGPoint(x: 278.09, y: 146.32), controlPoint1: CGPoint(x: 266.92, y: 157.24), controlPoint2: CGPoint(x: 274.15, y: 153.03))
        fill60Path.addCurve(to: CGPoint(x: 277.04, y: 142.3), controlPoint1: CGPoint(x: 278.91, y: 144.92), controlPoint2: CGPoint(x: 278.45, y: 143.12))
        fill60Path.close()
        fill60Path.usesEvenOddFillRule = true
        color.setFill()
        fill60Path.fill()

        //// Fill-61 Drawing
        let fill61Path = UIBezierPath()
        fill61Path.move(to: CGPoint(x: 283.22, y: 126.79))
        fill61Path.addCurve(to: CGPoint(x: 279.61, y: 127.28), controlPoint1: CGPoint(x: 282.03, y: 126.08), controlPoint2: CGPoint(x: 280.54, y: 126.32))
        fill61Path.addCurve(to: CGPoint(x: 258.94, y: 113.16), controlPoint1: CGPoint(x: 276.43, y: 119.02), controlPoint2: CGPoint(x: 268.37, y: 113.16))
        fill61Path.addCurve(to: CGPoint(x: 239.8, y: 124.08), controlPoint1: CGPoint(x: 250.97, y: 113.16), controlPoint2: CGPoint(x: 243.74, y: 117.37))
        fill61Path.addCurve(to: CGPoint(x: 240.85, y: 128.1), controlPoint1: CGPoint(x: 238.98, y: 125.48), controlPoint2: CGPoint(x: 239.45, y: 127.28))
        fill61Path.addCurve(to: CGPoint(x: 244.88, y: 127.05), controlPoint1: CGPoint(x: 242.25, y: 128.92), controlPoint2: CGPoint(x: 244.05, y: 128.45))
        fill61Path.addCurve(to: CGPoint(x: 258.94, y: 119.04), controlPoint1: CGPoint(x: 247.77, y: 122.13), controlPoint2: CGPoint(x: 253.08, y: 119.04))
        fill61Path.addCurve(to: CGPoint(x: 273.97, y: 129), controlPoint1: CGPoint(x: 265.73, y: 119.04), controlPoint2: CGPoint(x: 271.53, y: 123.15))
        fill61Path.addCurve(to: CGPoint(x: 270.35, y: 130.05), controlPoint1: CGPoint(x: 272.69, y: 128.44), controlPoint2: CGPoint(x: 271.16, y: 128.85))
        fill61Path.addCurve(to: CGPoint(x: 271.15, y: 134.13), controlPoint1: CGPoint(x: 269.45, y: 131.4), controlPoint2: CGPoint(x: 269.81, y: 133.22))
        fill61Path.addLine(to: CGPoint(x: 276.52, y: 137.74))
        fill61Path.addCurve(to: CGPoint(x: 280.69, y: 136.8), controlPoint1: CGPoint(x: 277.92, y: 138.68), controlPoint2: CGPoint(x: 279.83, y: 138.25))
        fill61Path.addLine(to: CGPoint(x: 284.25, y: 130.82))
        fill61Path.addCurve(to: CGPoint(x: 283.22, y: 126.79), controlPoint1: CGPoint(x: 285.08, y: 129.43), controlPoint2: CGPoint(x: 284.62, y: 127.62))
        fill61Path.close()
        fill61Path.usesEvenOddFillRule = true
        color.setFill()
        fill61Path.fill()

        //// Fill-62 Drawing
        let fill62Path = UIBezierPath()
        fill62Path.move(to: CGPoint(x: 64.71, y: 229.99))
        fill62Path.addLine(to: CGPoint(x: 46.65, y: 229.99))
        fill62Path.addCurve(to: CGPoint(x: 44.12, y: 228.52), controlPoint1: CGPoint(x: 46.14, y: 229.12), controlPoint2: CGPoint(x: 45.2, y: 228.52))
        fill62Path.addCurve(to: CGPoint(x: 41.58, y: 229.99), controlPoint1: CGPoint(x: 43.03, y: 228.52), controlPoint2: CGPoint(x: 42.09, y: 229.12))
        fill62Path.addLine(to: CGPoint(x: 23.53, y: 229.99))
        fill62Path.addLine(to: CGPoint(x: 23.53, y: 200.6))
        fill62Path.addLine(to: CGPoint(x: 32.35, y: 200.6))
        fill62Path.addCurve(to: CGPoint(x: 35.29, y: 197.66), controlPoint1: CGPoint(x: 33.98, y: 200.6), controlPoint2: CGPoint(x: 35.29, y: 199.28))
        fill62Path.addCurve(to: CGPoint(x: 36.61, y: 195.14), controlPoint1: CGPoint(x: 35.29, y: 196.24), controlPoint2: CGPoint(x: 35.73, y: 195.58))
        fill62Path.addCurve(to: CGPoint(x: 37.8, y: 194.77), controlPoint1: CGPoint(x: 36.97, y: 194.97), controlPoint2: CGPoint(x: 37.38, y: 194.84))
        fill62Path.addCurve(to: CGPoint(x: 38.24, y: 194.72), controlPoint1: CGPoint(x: 38.04, y: 194.73), controlPoint2: CGPoint(x: 38.2, y: 194.72))
        fill62Path.addLine(to: CGPoint(x: 50, y: 194.72))
        fill62Path.addCurve(to: CGPoint(x: 52.52, y: 196.03), controlPoint1: CGPoint(x: 51.42, y: 194.72), controlPoint2: CGPoint(x: 52.08, y: 195.16))
        fill62Path.addCurve(to: CGPoint(x: 52.89, y: 197.22), controlPoint1: CGPoint(x: 52.7, y: 196.39), controlPoint2: CGPoint(x: 52.82, y: 196.81))
        fill62Path.addCurve(to: CGPoint(x: 52.94, y: 197.66), controlPoint1: CGPoint(x: 52.93, y: 197.47), controlPoint2: CGPoint(x: 52.94, y: 197.63))
        fill62Path.addCurve(to: CGPoint(x: 55.88, y: 200.6), controlPoint1: CGPoint(x: 52.94, y: 199.28), controlPoint2: CGPoint(x: 54.26, y: 200.6))
        fill62Path.addLine(to: CGPoint(x: 64.71, y: 200.6))
        fill62Path.addLine(to: CGPoint(x: 64.71, y: 229.99))
        fill62Path.close()
        fill62Path.move(to: CGPoint(x: 67.65, y: 194.72))
        fill62Path.addLine(to: CGPoint(x: 58.32, y: 194.72))
        fill62Path.addCurve(to: CGPoint(x: 57.78, y: 193.41), controlPoint1: CGPoint(x: 58.17, y: 194.28), controlPoint2: CGPoint(x: 57.99, y: 193.84))
        fill62Path.addCurve(to: CGPoint(x: 50, y: 188.84), controlPoint1: CGPoint(x: 56.38, y: 190.61), controlPoint2: CGPoint(x: 53.73, y: 188.84))
        fill62Path.addLine(to: CGPoint(x: 38.24, y: 188.84))
        fill62Path.addCurve(to: CGPoint(x: 36.83, y: 188.97), controlPoint1: CGPoint(x: 37.9, y: 188.84), controlPoint2: CGPoint(x: 37.42, y: 188.88))
        fill62Path.addCurve(to: CGPoint(x: 33.98, y: 189.89), controlPoint1: CGPoint(x: 35.87, y: 189.13), controlPoint2: CGPoint(x: 34.91, y: 189.42))
        fill62Path.addCurve(to: CGPoint(x: 29.83, y: 194.72), controlPoint1: CGPoint(x: 31.98, y: 190.88), controlPoint2: CGPoint(x: 30.51, y: 192.52))
        fill62Path.addLine(to: CGPoint(x: 20.59, y: 194.72))
        fill62Path.addCurve(to: CGPoint(x: 17.65, y: 197.66), controlPoint1: CGPoint(x: 18.96, y: 194.72), controlPoint2: CGPoint(x: 17.65, y: 196.04))
        fill62Path.addLine(to: CGPoint(x: 17.65, y: 232.93))
        fill62Path.addCurve(to: CGPoint(x: 20.59, y: 235.87), controlPoint1: CGPoint(x: 17.65, y: 234.56), controlPoint2: CGPoint(x: 18.96, y: 235.87))
        fill62Path.addLine(to: CGPoint(x: 41.18, y: 235.87))
        fill62Path.addLine(to: CGPoint(x: 41.18, y: 238.81))
        fill62Path.addCurve(to: CGPoint(x: 44.12, y: 241.75), controlPoint1: CGPoint(x: 41.18, y: 240.43), controlPoint2: CGPoint(x: 42.49, y: 241.75))
        fill62Path.addCurve(to: CGPoint(x: 47.06, y: 238.81), controlPoint1: CGPoint(x: 45.74, y: 241.75), controlPoint2: CGPoint(x: 47.06, y: 240.43))
        fill62Path.addLine(to: CGPoint(x: 47.06, y: 235.87))
        fill62Path.addLine(to: CGPoint(x: 67.65, y: 235.87))
        fill62Path.addCurve(to: CGPoint(x: 70.59, y: 232.93), controlPoint1: CGPoint(x: 69.27, y: 235.87), controlPoint2: CGPoint(x: 70.59, y: 234.56))
        fill62Path.addLine(to: CGPoint(x: 70.59, y: 197.66))
        fill62Path.addCurve(to: CGPoint(x: 67.65, y: 194.72), controlPoint1: CGPoint(x: 70.59, y: 196.04), controlPoint2: CGPoint(x: 69.27, y: 194.72))
        fill62Path.close()
        fill62Path.usesEvenOddFillRule = true
        color.setFill()
        fill62Path.fill()

        //// Fill-63 Drawing
        let fill63Path = UIBezierPath()
        fill63Path.move(to: CGPoint(x: 44.12, y: 221.17))
        fill63Path.addCurve(to: CGPoint(x: 36.76, y: 213.83), controlPoint1: CGPoint(x: 40.06, y: 221.17), controlPoint2: CGPoint(x: 36.76, y: 217.88))
        fill63Path.addCurve(to: CGPoint(x: 44.12, y: 206.48), controlPoint1: CGPoint(x: 36.76, y: 209.77), controlPoint2: CGPoint(x: 40.06, y: 206.48))
        fill63Path.addCurve(to: CGPoint(x: 51.47, y: 213.83), controlPoint1: CGPoint(x: 48.18, y: 206.48), controlPoint2: CGPoint(x: 51.47, y: 209.77))
        fill63Path.addCurve(to: CGPoint(x: 44.12, y: 221.17), controlPoint1: CGPoint(x: 51.47, y: 217.88), controlPoint2: CGPoint(x: 48.18, y: 221.17))
        fill63Path.close()
        fill63Path.move(to: CGPoint(x: 44.12, y: 200.6))
        fill63Path.addCurve(to: CGPoint(x: 30.88, y: 213.83), controlPoint1: CGPoint(x: 36.81, y: 200.6), controlPoint2: CGPoint(x: 30.88, y: 206.52))
        fill63Path.addCurve(to: CGPoint(x: 44.12, y: 227.05), controlPoint1: CGPoint(x: 30.88, y: 221.13), controlPoint2: CGPoint(x: 36.81, y: 227.05))
        fill63Path.addCurve(to: CGPoint(x: 57.35, y: 213.83), controlPoint1: CGPoint(x: 51.43, y: 227.05), controlPoint2: CGPoint(x: 57.35, y: 221.13))
        fill63Path.addCurve(to: CGPoint(x: 44.12, y: 200.6), controlPoint1: CGPoint(x: 57.35, y: 206.52), controlPoint2: CGPoint(x: 51.43, y: 200.6))
        fill63Path.close()
        fill63Path.usesEvenOddFillRule = true
        color.setFill()
        fill63Path.fill()

        //// Fill-64 Drawing
        let fill64Path = UIBezierPath(roundedRect: CGRect(x: 41, y: 264, width: 6, height: 13), cornerRadius: 3)
        color.setFill()
        fill64Path.fill()

        //// Fill-65 Drawing
        let fill65Path = UIBezierPath(roundedRect: CGRect(x: 41, y: 246, width: 6, height: 13), cornerRadius: 3)
        color.setFill()
        fill65Path.fill()

        //// Fill-66 Drawing
        let fill66Path = UIBezierPath(roundedRect: CGRect(x: 41, y: 281, width: 6, height: 14), cornerRadius: 3)
        color.setFill()
        fill66Path.fill()

        //// Fill-67 Drawing
        let fill67Path = UIBezierPath(ovalIn: CGRect(x: 200, y: 289, width: 6, height: 6))
        color.setFill()
        fill67Path.fill()

        //// Fill-68 Drawing
        let fill68Path = UIBezierPath()
        fill68Path.move(to: CGPoint(x: 214.71, y: 296.86))
        fill68Path.addLine(to: CGPoint(x: 191.18, y: 296.86))
        fill68Path.addLine(to: CGPoint(x: 191.18, y: 255.71))
        fill68Path.addLine(to: CGPoint(x: 211.76, y: 255.72))
        fill68Path.addLine(to: CGPoint(x: 214.71, y: 255.72))
        fill68Path.addLine(to: CGPoint(x: 214.71, y: 296.86))
        fill68Path.close()
        fill68Path.move(to: CGPoint(x: 217.65, y: 249.84))
        fill68Path.addLine(to: CGPoint(x: 211.76, y: 249.84))
        fill68Path.addLine(to: CGPoint(x: 194.12, y: 249.83))
        fill68Path.addLine(to: CGPoint(x: 188.24, y: 249.83))
        fill68Path.addCurve(to: CGPoint(x: 185.29, y: 252.77), controlPoint1: CGPoint(x: 186.61, y: 249.83), controlPoint2: CGPoint(x: 185.29, y: 251.15))
        fill68Path.addLine(to: CGPoint(x: 185.29, y: 299.8))
        fill68Path.addCurve(to: CGPoint(x: 188.24, y: 302.74), controlPoint1: CGPoint(x: 185.29, y: 301.43), controlPoint2: CGPoint(x: 186.61, y: 302.74))
        fill68Path.addLine(to: CGPoint(x: 217.65, y: 302.74))
        fill68Path.addCurve(to: CGPoint(x: 220.59, y: 299.8), controlPoint1: CGPoint(x: 219.27, y: 302.74), controlPoint2: CGPoint(x: 220.59, y: 301.43))
        fill68Path.addLine(to: CGPoint(x: 220.59, y: 252.78))
        fill68Path.addCurve(to: CGPoint(x: 217.65, y: 249.84), controlPoint1: CGPoint(x: 220.59, y: 251.15), controlPoint2: CGPoint(x: 219.27, y: 249.84))
        fill68Path.close()
        fill68Path.usesEvenOddFillRule = true
        color.setFill()
        fill68Path.fill()

        //// Fill-69 Drawing
        let fill69Path = UIBezierPath()
        fill69Path.move(to: CGPoint(x: 136.03, y: 347.95))
        fill69Path.addCurve(to: CGPoint(x: 118.38, y: 365.22), controlPoint1: CGPoint(x: 136.03, y: 365.32), controlPoint2: CGPoint(x: 118.99, y: 365.22))
        fill69Path.addLine(to: CGPoint(x: 103.68, y: 365.22))
        fill69Path.addCurve(to: CGPoint(x: 100.74, y: 362.31), controlPoint1: CGPoint(x: 103.68, y: 365.22), controlPoint2: CGPoint(x: 100.74, y: 365.22))
        fill69Path.addCurve(to: CGPoint(x: 103.68, y: 359.4), controlPoint1: CGPoint(x: 100.74, y: 359.4), controlPoint2: CGPoint(x: 103.68, y: 359.4))
        fill69Path.addLine(to: CGPoint(x: 118.38, y: 359.34))
        fill69Path.addCurve(to: CGPoint(x: 130.15, y: 347.95), controlPoint1: CGPoint(x: 118.43, y: 359.34), controlPoint2: CGPoint(x: 130.15, y: 359.77))
        fill69Path.addCurve(to: CGPoint(x: 118.38, y: 336.48), controlPoint1: CGPoint(x: 130.15, y: 336.12), controlPoint2: CGPoint(x: 118.49, y: 336.49))
        fill69Path.addLine(to: CGPoint(x: 94.85, y: 336.48))
        fill69Path.addCurve(to: CGPoint(x: 88.24, y: 343.16), controlPoint1: CGPoint(x: 94.85, y: 336.48), controlPoint2: CGPoint(x: 88.24, y: 336.55))
        fill69Path.addCurve(to: CGPoint(x: 94.85, y: 349.78), controlPoint1: CGPoint(x: 88.24, y: 347.57), controlPoint2: CGPoint(x: 90.44, y: 349.78))
        fill69Path.addLine(to: CGPoint(x: 118.75, y: 349.78))
        fill69Path.addCurve(to: CGPoint(x: 120.59, y: 347.95), controlPoint1: CGPoint(x: 118.75, y: 349.78), controlPoint2: CGPoint(x: 120.59, y: 349.8))
        fill69Path.addCurve(to: CGPoint(x: 118.75, y: 346.05), controlPoint1: CGPoint(x: 120.59, y: 346.11), controlPoint2: CGPoint(x: 118.75, y: 346.05))
        fill69Path.addLine(to: CGPoint(x: 94.85, y: 346.1))
        fill69Path.addCurve(to: CGPoint(x: 91.91, y: 343.16), controlPoint1: CGPoint(x: 94.85, y: 346.1), controlPoint2: CGPoint(x: 91.91, y: 346.1))
        fill69Path.addCurve(to: CGPoint(x: 94.85, y: 340.22), controlPoint1: CGPoint(x: 91.91, y: 340.22), controlPoint2: CGPoint(x: 94.85, y: 340.22))
        fill69Path.addLine(to: CGPoint(x: 118.38, y: 340.22))
        fill69Path.addCurve(to: CGPoint(x: 126.47, y: 347.95), controlPoint1: CGPoint(x: 118.38, y: 340.22), controlPoint2: CGPoint(x: 126.47, y: 339.86))
        fill69Path.addCurve(to: CGPoint(x: 118.38, y: 355.66), controlPoint1: CGPoint(x: 126.47, y: 356.04), controlPoint2: CGPoint(x: 118.38, y: 355.66))
        fill69Path.addLine(to: CGPoint(x: 95.06, y: 355.66))
        fill69Path.addCurve(to: CGPoint(x: 82.35, y: 343.16), controlPoint1: CGPoint(x: 95.06, y: 355.66), controlPoint2: CGPoint(x: 82.35, y: 355.64))
        fill69Path.addCurve(to: CGPoint(x: 94.85, y: 330.68), controlPoint1: CGPoint(x: 82.35, y: 330.68), controlPoint2: CGPoint(x: 94.85, y: 330.68))
        fill69Path.addLine(to: CGPoint(x: 118.38, y: 330.68))
        fill69Path.addCurve(to: CGPoint(x: 136.03, y: 347.95), controlPoint1: CGPoint(x: 118.38, y: 330.68), controlPoint2: CGPoint(x: 136.03, y: 330.58))
        fill69Path.close()
        fill69Path.usesEvenOddFillRule = true
        color.setFill()
        fill69Path.fill()

        //// Fill-70 Drawing
        let fill70Path = UIBezierPath()
        fill70Path.move(to: CGPoint(x: 89.71, y: 91.11))
        fill70Path.addCurve(to: CGPoint(x: 75, y: 76.41), controlPoint1: CGPoint(x: 81.58, y: 91.11), controlPoint2: CGPoint(x: 75, y: 84.53))
        fill70Path.addCurve(to: CGPoint(x: 89.71, y: 61.71), controlPoint1: CGPoint(x: 75, y: 68.29), controlPoint2: CGPoint(x: 81.58, y: 61.71))
        fill70Path.addCurve(to: CGPoint(x: 104.41, y: 76.41), controlPoint1: CGPoint(x: 97.83, y: 61.71), controlPoint2: CGPoint(x: 104.41, y: 68.29))
        fill70Path.addCurve(to: CGPoint(x: 89.71, y: 91.11), controlPoint1: CGPoint(x: 104.41, y: 84.53), controlPoint2: CGPoint(x: 97.83, y: 91.11))
        fill70Path.close()
        fill70Path.move(to: CGPoint(x: 92.65, y: 56.05))
        fill70Path.addLine(to: CGPoint(x: 92.65, y: 52.89))
        fill70Path.addLine(to: CGPoint(x: 95.59, y: 52.89))
        fill70Path.addCurve(to: CGPoint(x: 98.53, y: 49.95), controlPoint1: CGPoint(x: 97.21, y: 52.89), controlPoint2: CGPoint(x: 98.53, y: 51.58))
        fill70Path.addCurve(to: CGPoint(x: 95.59, y: 47.02), controlPoint1: CGPoint(x: 98.53, y: 48.33), controlPoint2: CGPoint(x: 97.21, y: 47.02))
        fill70Path.addLine(to: CGPoint(x: 83.82, y: 47.02))
        fill70Path.addCurve(to: CGPoint(x: 80.88, y: 49.95), controlPoint1: CGPoint(x: 82.2, y: 47.02), controlPoint2: CGPoint(x: 80.88, y: 48.33))
        fill70Path.addCurve(to: CGPoint(x: 83.82, y: 52.89), controlPoint1: CGPoint(x: 80.88, y: 51.58), controlPoint2: CGPoint(x: 82.2, y: 52.89))
        fill70Path.addLine(to: CGPoint(x: 86.76, y: 52.89))
        fill70Path.addLine(to: CGPoint(x: 86.76, y: 56.05))
        fill70Path.addCurve(to: CGPoint(x: 69.12, y: 76.41), controlPoint1: CGPoint(x: 76.79, y: 57.47), controlPoint2: CGPoint(x: 69.12, y: 66.04))
        fill70Path.addCurve(to: CGPoint(x: 89.71, y: 96.99), controlPoint1: CGPoint(x: 69.12, y: 87.77), controlPoint2: CGPoint(x: 78.34, y: 96.99))
        fill70Path.addCurve(to: CGPoint(x: 110.29, y: 76.41), controlPoint1: CGPoint(x: 101.08, y: 96.99), controlPoint2: CGPoint(x: 110.29, y: 87.77))
        fill70Path.addCurve(to: CGPoint(x: 92.65, y: 56.05), controlPoint1: CGPoint(x: 110.29, y: 66.04), controlPoint2: CGPoint(x: 102.62, y: 57.47))
        fill70Path.close()
        fill70Path.usesEvenOddFillRule = true
        color.setFill()
        fill70Path.fill()

        //// Fill-71 Drawing
        let fill71Path = UIBezierPath()
        fill71Path.move(to: CGPoint(x: 92.65, y: 75.19))
        fill71Path.addLine(to: CGPoint(x: 97.67, y: 80.21))
        fill71Path.addCurve(to: CGPoint(x: 97.67, y: 84.37), controlPoint1: CGPoint(x: 98.82, y: 81.36), controlPoint2: CGPoint(x: 98.82, y: 83.22))
        fill71Path.addCurve(to: CGPoint(x: 93.51, y: 84.37), controlPoint1: CGPoint(x: 96.52, y: 85.51), controlPoint2: CGPoint(x: 94.66, y: 85.51))
        fill71Path.addLine(to: CGPoint(x: 87.63, y: 78.49))
        fill71Path.addCurve(to: CGPoint(x: 86.76, y: 76.41), controlPoint1: CGPoint(x: 87.07, y: 77.94), controlPoint2: CGPoint(x: 86.76, y: 77.19))
        fill71Path.addLine(to: CGPoint(x: 86.76, y: 68.33))
        fill71Path.addCurve(to: CGPoint(x: 89.71, y: 65.39), controlPoint1: CGPoint(x: 86.76, y: 66.7), controlPoint2: CGPoint(x: 88.08, y: 65.39))
        fill71Path.addCurve(to: CGPoint(x: 92.65, y: 68.33), controlPoint1: CGPoint(x: 91.33, y: 65.39), controlPoint2: CGPoint(x: 92.65, y: 66.7))
        fill71Path.addLine(to: CGPoint(x: 92.65, y: 75.19))
        fill71Path.close()
        fill71Path.usesEvenOddFillRule = true
        color.setFill()
        fill71Path.fill()

        //// Fill-72 Drawing
        let fill72Path = UIBezierPath()
        fill72Path.move(to: CGPoint(x: 154.54, y: 109.12))
        fill72Path.addLine(to: CGPoint(x: 157.99, y: 105.68))
        fill72Path.addCurve(to: CGPoint(x: 157.99, y: 101.52), controlPoint1: CGPoint(x: 159.14, y: 104.53), controlPoint2: CGPoint(x: 159.14, y: 102.67))
        fill72Path.addCurve(to: CGPoint(x: 153.83, y: 101.52), controlPoint1: CGPoint(x: 156.84, y: 100.37), controlPoint2: CGPoint(x: 154.98, y: 100.37))
        fill72Path.addLine(to: CGPoint(x: 150.38, y: 104.97))
        fill72Path.addLine(to: CGPoint(x: 146.93, y: 101.52))
        fill72Path.addCurve(to: CGPoint(x: 142.77, y: 101.52), controlPoint1: CGPoint(x: 145.78, y: 100.37), controlPoint2: CGPoint(x: 143.92, y: 100.37))
        fill72Path.addCurve(to: CGPoint(x: 142.77, y: 105.68), controlPoint1: CGPoint(x: 141.62, y: 102.67), controlPoint2: CGPoint(x: 141.62, y: 104.53))
        fill72Path.addLine(to: CGPoint(x: 146.22, y: 109.12))
        fill72Path.addLine(to: CGPoint(x: 142.77, y: 112.57))
        fill72Path.addCurve(to: CGPoint(x: 142.77, y: 116.72), controlPoint1: CGPoint(x: 141.62, y: 113.72), controlPoint2: CGPoint(x: 141.62, y: 115.58))
        fill72Path.addCurve(to: CGPoint(x: 146.93, y: 116.72), controlPoint1: CGPoint(x: 143.92, y: 117.87), controlPoint2: CGPoint(x: 145.78, y: 117.87))
        fill72Path.addLine(to: CGPoint(x: 150.38, y: 113.28))
        fill72Path.addLine(to: CGPoint(x: 153.83, y: 116.72))
        fill72Path.addCurve(to: CGPoint(x: 157.99, y: 116.72), controlPoint1: CGPoint(x: 154.98, y: 117.87), controlPoint2: CGPoint(x: 156.84, y: 117.87))
        fill72Path.addCurve(to: CGPoint(x: 157.99, y: 112.57), controlPoint1: CGPoint(x: 159.14, y: 115.58), controlPoint2: CGPoint(x: 159.14, y: 113.72))
        fill72Path.addLine(to: CGPoint(x: 154.54, y: 109.12))
        fill72Path.close()
        fill72Path.usesEvenOddFillRule = true
        color.setFill()
        fill72Path.fill()

        //// Fill-73 Drawing
        let fill73Path = UIBezierPath()
        fill73Path.move(to: CGPoint(x: 85.29, y: 126.38))
        fill73Path.addLine(to: CGPoint(x: 120.59, y: 126.38))
        fill73Path.addLine(to: CGPoint(x: 120.59, y: 114.62))
        fill73Path.addLine(to: CGPoint(x: 85.29, y: 114.62))
        fill73Path.addLine(to: CGPoint(x: 85.29, y: 126.38))
        fill73Path.close()
        fill73Path.move(to: CGPoint(x: 82.35, y: 132.26))
        fill73Path.addCurve(to: CGPoint(x: 79.41, y: 129.32), controlPoint1: CGPoint(x: 80.73, y: 132.26), controlPoint2: CGPoint(x: 79.41, y: 130.94))
        fill73Path.addLine(to: CGPoint(x: 79.41, y: 111.68))
        fill73Path.addCurve(to: CGPoint(x: 82.35, y: 108.74), controlPoint1: CGPoint(x: 79.41, y: 110.06), controlPoint2: CGPoint(x: 80.73, y: 108.74))
        fill73Path.addLine(to: CGPoint(x: 123.53, y: 108.74))
        fill73Path.addCurve(to: CGPoint(x: 126.47, y: 111.68), controlPoint1: CGPoint(x: 125.15, y: 108.74), controlPoint2: CGPoint(x: 126.47, y: 110.06))
        fill73Path.addLine(to: CGPoint(x: 126.47, y: 129.32))
        fill73Path.addCurve(to: CGPoint(x: 123.53, y: 132.26), controlPoint1: CGPoint(x: 126.47, y: 130.94), controlPoint2: CGPoint(x: 125.15, y: 132.26))
        fill73Path.addLine(to: CGPoint(x: 82.35, y: 132.26))
        fill73Path.close()
        fill73Path.usesEvenOddFillRule = true
        color.setFill()
        fill73Path.fill()

        //// Fill-74 Drawing
        let fill74Path = UIBezierPath(ovalIn: CGRect(x: 110, y: 118, width: 6, height: 6))
        color.setFill()
        fill74Path.fill()

        //// Fill-75 Drawing
        let fill75Path = UIBezierPath()
        fill75Path.move(to: CGPoint(x: 85.29, y: 152.83))
        fill75Path.addLine(to: CGPoint(x: 120.59, y: 152.83))
        fill75Path.addLine(to: CGPoint(x: 120.59, y: 141.08))
        fill75Path.addLine(to: CGPoint(x: 85.29, y: 141.08))
        fill75Path.addLine(to: CGPoint(x: 85.29, y: 152.83))
        fill75Path.close()
        fill75Path.move(to: CGPoint(x: 82.35, y: 158.71))
        fill75Path.addCurve(to: CGPoint(x: 79.41, y: 155.77), controlPoint1: CGPoint(x: 80.73, y: 158.71), controlPoint2: CGPoint(x: 79.41, y: 157.4))
        fill75Path.addLine(to: CGPoint(x: 79.41, y: 138.14))
        fill75Path.addCurve(to: CGPoint(x: 82.35, y: 135.2), controlPoint1: CGPoint(x: 79.41, y: 136.51), controlPoint2: CGPoint(x: 80.73, y: 135.2))
        fill75Path.addLine(to: CGPoint(x: 123.53, y: 135.2))
        fill75Path.addCurve(to: CGPoint(x: 126.47, y: 138.14), controlPoint1: CGPoint(x: 125.15, y: 135.2), controlPoint2: CGPoint(x: 126.47, y: 136.51))
        fill75Path.addLine(to: CGPoint(x: 126.47, y: 155.77))
        fill75Path.addCurve(to: CGPoint(x: 123.53, y: 158.71), controlPoint1: CGPoint(x: 126.47, y: 157.4), controlPoint2: CGPoint(x: 125.15, y: 158.71))
        fill75Path.addLine(to: CGPoint(x: 82.35, y: 158.71))
        fill75Path.close()
        fill75Path.usesEvenOddFillRule = true
        color.setFill()
        fill75Path.fill()

        //// Fill-76 Drawing
        let fill76Path = UIBezierPath(ovalIn: CGRect(x: 110, y: 144, width: 6, height: 6))
        color.setFill()
        fill76Path.fill()

        //// Fill-77 Drawing
        let fill77Path = UIBezierPath(ovalIn: CGRect(x: 187, y: 141, width: 6, height: 6))
        color.setFill()
        fill77Path.fill()

        //// Fill-78 Drawing
        let fill78Path = UIBezierPath(ovalIn: CGRect(x: 197, y: 141, width: 6, height: 6))
        color.setFill()
        fill78Path.fill()

        //// Fill-79 Drawing
        let fill79Path = UIBezierPath(ovalIn: CGRect(x: 208, y: 141, width: 6, height: 6))
        color.setFill()
        fill79Path.fill()

        //// Fill-80 Drawing
        let fill80Path = UIBezierPath()
        fill80Path.move(to: CGPoint(x: 219.12, y: 152.83))
        fill80Path.addCurve(to: CGPoint(x: 217.65, y: 154.3), controlPoint1: CGPoint(x: 219.12, y: 153.64), controlPoint2: CGPoint(x: 218.46, y: 154.3))
        fill80Path.addLine(to: CGPoint(x: 182.35, y: 154.3))
        fill80Path.addCurve(to: CGPoint(x: 180.88, y: 152.83), controlPoint1: CGPoint(x: 181.54, y: 154.3), controlPoint2: CGPoint(x: 180.88, y: 153.64))
        fill80Path.addLine(to: CGPoint(x: 180.88, y: 143.28))
        fill80Path.addCurve(to: CGPoint(x: 191.91, y: 132.26), controlPoint1: CGPoint(x: 180.88, y: 137.19), controlPoint2: CGPoint(x: 185.82, y: 132.26))
        fill80Path.addLine(to: CGPoint(x: 208.09, y: 132.26))
        fill80Path.addCurve(to: CGPoint(x: 219.12, y: 143.28), controlPoint1: CGPoint(x: 214.18, y: 132.26), controlPoint2: CGPoint(x: 219.12, y: 137.19))
        fill80Path.addLine(to: CGPoint(x: 219.12, y: 152.83))
        fill80Path.close()
        fill80Path.move(to: CGPoint(x: 224.18, y: 118.64))
        fill80Path.addCurve(to: CGPoint(x: 220.2, y: 119.85), controlPoint1: CGPoint(x: 222.75, y: 117.88), controlPoint2: CGPoint(x: 220.96, y: 118.42))
        fill80Path.addLine(to: CGPoint(x: 215.74, y: 128.21))
        fill80Path.addCurve(to: CGPoint(x: 208.09, y: 126.38), controlPoint1: CGPoint(x: 213.44, y: 127.04), controlPoint2: CGPoint(x: 210.84, y: 126.38))
        fill80Path.addLine(to: CGPoint(x: 191.91, y: 126.38))
        fill80Path.addCurve(to: CGPoint(x: 184.26, y: 128.21), controlPoint1: CGPoint(x: 189.16, y: 126.38), controlPoint2: CGPoint(x: 186.56, y: 127.04))
        fill80Path.addLine(to: CGPoint(x: 179.8, y: 119.85))
        fill80Path.addCurve(to: CGPoint(x: 175.82, y: 118.64), controlPoint1: CGPoint(x: 179.04, y: 118.42), controlPoint2: CGPoint(x: 177.26, y: 117.88))
        fill80Path.addCurve(to: CGPoint(x: 174.61, y: 122.62), controlPoint1: CGPoint(x: 174.39, y: 119.41), controlPoint2: CGPoint(x: 173.85, y: 121.19))
        fill80Path.addLine(to: CGPoint(x: 179.51, y: 131.8))
        fill80Path.addCurve(to: CGPoint(x: 175, y: 143.28), controlPoint1: CGPoint(x: 176.71, y: 134.81), controlPoint2: CGPoint(x: 175, y: 138.85))
        fill80Path.addLine(to: CGPoint(x: 175, y: 152.83))
        fill80Path.addCurve(to: CGPoint(x: 182.35, y: 160.18), controlPoint1: CGPoint(x: 175, y: 156.89), controlPoint2: CGPoint(x: 178.29, y: 160.18))
        fill80Path.addLine(to: CGPoint(x: 217.65, y: 160.18))
        fill80Path.addCurve(to: CGPoint(x: 225, y: 152.83), controlPoint1: CGPoint(x: 221.71, y: 160.18), controlPoint2: CGPoint(x: 225, y: 156.89))
        fill80Path.addLine(to: CGPoint(x: 225, y: 143.28))
        fill80Path.addCurve(to: CGPoint(x: 220.49, y: 131.8), controlPoint1: CGPoint(x: 225, y: 138.85), controlPoint2: CGPoint(x: 223.29, y: 134.81))
        fill80Path.addLine(to: CGPoint(x: 225.39, y: 122.62))
        fill80Path.addCurve(to: CGPoint(x: 224.18, y: 118.64), controlPoint1: CGPoint(x: 226.15, y: 121.19), controlPoint2: CGPoint(x: 225.61, y: 119.41))
        fill80Path.close()
        fill80Path.usesEvenOddFillRule = true
        color.setFill()
        fill80Path.fill()

        //// Fill-81 Drawing
        let fill81Path = UIBezierPath()
        fill81Path.move(to: CGPoint(x: 230.88, y: 304.21))
        fill81Path.addCurve(to: CGPoint(x: 227.94, y: 301.27), controlPoint1: CGPoint(x: 230.88, y: 302.59), controlPoint2: CGPoint(x: 229.57, y: 301.27))
        fill81Path.addCurve(to: CGPoint(x: 225, y: 304.21), controlPoint1: CGPoint(x: 226.32, y: 301.27), controlPoint2: CGPoint(x: 225, y: 302.59))
        fill81Path.addCurve(to: CGPoint(x: 222.06, y: 307.15), controlPoint1: CGPoint(x: 225, y: 305.84), controlPoint2: CGPoint(x: 223.68, y: 307.15))
        fill81Path.addCurve(to: CGPoint(x: 219.12, y: 310.09), controlPoint1: CGPoint(x: 220.43, y: 307.15), controlPoint2: CGPoint(x: 219.12, y: 308.47))
        fill81Path.addCurve(to: CGPoint(x: 222.06, y: 313.03), controlPoint1: CGPoint(x: 219.12, y: 311.71), controlPoint2: CGPoint(x: 220.43, y: 313.03))
        fill81Path.addCurve(to: CGPoint(x: 230.88, y: 304.21), controlPoint1: CGPoint(x: 226.93, y: 313.03), controlPoint2: CGPoint(x: 230.88, y: 309.08))
        fill81Path.close()
        fill81Path.usesEvenOddFillRule = true
        color.setFill()
        fill81Path.fill()

        //// Fill-82 Drawing
        let fill82Path = UIBezierPath()
        fill82Path.move(to: CGPoint(x: 242.65, y: 304.21))
        fill82Path.addCurve(to: CGPoint(x: 239.71, y: 301.27), controlPoint1: CGPoint(x: 242.65, y: 302.59), controlPoint2: CGPoint(x: 241.33, y: 301.27))
        fill82Path.addCurve(to: CGPoint(x: 236.76, y: 304.21), controlPoint1: CGPoint(x: 238.08, y: 301.27), controlPoint2: CGPoint(x: 236.76, y: 302.59))
        fill82Path.addCurve(to: CGPoint(x: 222.06, y: 318.91), controlPoint1: CGPoint(x: 236.76, y: 312.33), controlPoint2: CGPoint(x: 230.18, y: 318.91))
        fill82Path.addCurve(to: CGPoint(x: 219.12, y: 321.85), controlPoint1: CGPoint(x: 220.43, y: 318.91), controlPoint2: CGPoint(x: 219.12, y: 320.23))
        fill82Path.addCurve(to: CGPoint(x: 222.06, y: 324.79), controlPoint1: CGPoint(x: 219.12, y: 323.47), controlPoint2: CGPoint(x: 220.43, y: 324.79))
        fill82Path.addCurve(to: CGPoint(x: 242.65, y: 304.21), controlPoint1: CGPoint(x: 233.43, y: 324.79), controlPoint2: CGPoint(x: 242.65, y: 315.58))
        fill82Path.close()
        fill82Path.usesEvenOddFillRule = true
        color.setFill()
        fill82Path.fill()

        //// Fill-83 Drawing
        let fill83Path = UIBezierPath()
        fill83Path.move(to: CGPoint(x: 254.41, y: 304.21))
        fill83Path.addCurve(to: CGPoint(x: 251.47, y: 301.27), controlPoint1: CGPoint(x: 254.41, y: 302.59), controlPoint2: CGPoint(x: 253.09, y: 301.27))
        fill83Path.addCurve(to: CGPoint(x: 248.53, y: 304.21), controlPoint1: CGPoint(x: 249.85, y: 301.27), controlPoint2: CGPoint(x: 248.53, y: 302.59))
        fill83Path.addCurve(to: CGPoint(x: 222.06, y: 330.67), controlPoint1: CGPoint(x: 248.53, y: 318.82), controlPoint2: CGPoint(x: 236.68, y: 330.67))
        fill83Path.addCurve(to: CGPoint(x: 219.12, y: 333.61), controlPoint1: CGPoint(x: 220.43, y: 330.67), controlPoint2: CGPoint(x: 219.12, y: 331.98))
        fill83Path.addCurve(to: CGPoint(x: 222.06, y: 336.55), controlPoint1: CGPoint(x: 219.12, y: 335.23), controlPoint2: CGPoint(x: 220.43, y: 336.55))
        fill83Path.addCurve(to: CGPoint(x: 254.41, y: 304.21), controlPoint1: CGPoint(x: 239.93, y: 336.55), controlPoint2: CGPoint(x: 254.41, y: 322.07))
        fill83Path.close()
        fill83Path.usesEvenOddFillRule = true
        color.setFill()
        fill83Path.fill()

        //// Fill-84 Drawing
        let fill84Path = UIBezierPath()
        fill84Path.move(to: CGPoint(x: 235.29, y: 205.74))
        fill84Path.addLine(to: CGPoint(x: 239.71, y: 205.74))
        fill84Path.addLine(to: CGPoint(x: 239.71, y: 193.99))
        fill84Path.addLine(to: CGPoint(x: 235.29, y: 193.99))
        fill84Path.addLine(to: CGPoint(x: 235.29, y: 205.74))
        fill84Path.close()
        fill84Path.move(to: CGPoint(x: 232.35, y: 211.62))
        fill84Path.addLine(to: CGPoint(x: 242.65, y: 211.62))
        fill84Path.addCurve(to: CGPoint(x: 245.59, y: 208.68), controlPoint1: CGPoint(x: 244.27, y: 211.62), controlPoint2: CGPoint(x: 245.59, y: 210.31))
        fill84Path.addLine(to: CGPoint(x: 245.59, y: 191.05))
        fill84Path.addCurve(to: CGPoint(x: 242.65, y: 188.11), controlPoint1: CGPoint(x: 245.59, y: 189.42), controlPoint2: CGPoint(x: 244.27, y: 188.11))
        fill84Path.addLine(to: CGPoint(x: 232.35, y: 188.11))
        fill84Path.addCurve(to: CGPoint(x: 229.41, y: 191.05), controlPoint1: CGPoint(x: 230.73, y: 188.11), controlPoint2: CGPoint(x: 229.41, y: 189.42))
        fill84Path.addLine(to: CGPoint(x: 229.41, y: 208.68))
        fill84Path.addCurve(to: CGPoint(x: 232.35, y: 211.62), controlPoint1: CGPoint(x: 229.41, y: 210.31), controlPoint2: CGPoint(x: 230.73, y: 211.62))
        fill84Path.close()
        fill84Path.usesEvenOddFillRule = true
        color.setFill()
        fill84Path.fill()

        //// Fill-85 Drawing
        let fill85Path = UIBezierPath()
        fill85Path.move(to: CGPoint(x: 253.68, y: 205.74))
        fill85Path.addLine(to: CGPoint(x: 258.09, y: 205.74))
        fill85Path.addLine(to: CGPoint(x: 258.09, y: 176.35))
        fill85Path.addLine(to: CGPoint(x: 253.68, y: 176.35))
        fill85Path.addLine(to: CGPoint(x: 253.68, y: 205.74))
        fill85Path.close()
        fill85Path.move(to: CGPoint(x: 250.74, y: 211.62))
        fill85Path.addLine(to: CGPoint(x: 261.03, y: 211.62))
        fill85Path.addCurve(to: CGPoint(x: 263.97, y: 208.68), controlPoint1: CGPoint(x: 262.65, y: 211.62), controlPoint2: CGPoint(x: 263.97, y: 210.31))
        fill85Path.addLine(to: CGPoint(x: 263.97, y: 173.41))
        fill85Path.addCurve(to: CGPoint(x: 261.03, y: 170.47), controlPoint1: CGPoint(x: 263.97, y: 171.79), controlPoint2: CGPoint(x: 262.65, y: 170.47))
        fill85Path.addLine(to: CGPoint(x: 250.74, y: 170.47))
        fill85Path.addCurve(to: CGPoint(x: 247.79, y: 173.41), controlPoint1: CGPoint(x: 249.11, y: 170.47), controlPoint2: CGPoint(x: 247.79, y: 171.79))
        fill85Path.addLine(to: CGPoint(x: 247.79, y: 208.68))
        fill85Path.addCurve(to: CGPoint(x: 250.74, y: 211.62), controlPoint1: CGPoint(x: 247.79, y: 210.31), controlPoint2: CGPoint(x: 249.11, y: 211.62))
        fill85Path.close()
        fill85Path.usesEvenOddFillRule = true
        color.setFill()
        fill85Path.fill()

        //// Fill-86 Drawing
        let fill86Path = UIBezierPath()
        fill86Path.move(to: CGPoint(x: 272.06, y: 205.74))
        fill86Path.addLine(to: CGPoint(x: 276.47, y: 205.74))
        fill86Path.addLine(to: CGPoint(x: 276.47, y: 181.49))
        fill86Path.addLine(to: CGPoint(x: 272.06, y: 181.49))
        fill86Path.addLine(to: CGPoint(x: 272.06, y: 205.74))
        fill86Path.close()
        fill86Path.move(to: CGPoint(x: 279.41, y: 175.61))
        fill86Path.addLine(to: CGPoint(x: 269.12, y: 175.61))
        fill86Path.addCurve(to: CGPoint(x: 266.18, y: 178.55), controlPoint1: CGPoint(x: 267.49, y: 175.61), controlPoint2: CGPoint(x: 266.18, y: 176.93))
        fill86Path.addLine(to: CGPoint(x: 266.18, y: 208.68))
        fill86Path.addCurve(to: CGPoint(x: 269.12, y: 211.62), controlPoint1: CGPoint(x: 266.18, y: 210.31), controlPoint2: CGPoint(x: 267.49, y: 211.62))
        fill86Path.addLine(to: CGPoint(x: 279.41, y: 211.62))
        fill86Path.addCurve(to: CGPoint(x: 282.35, y: 208.68), controlPoint1: CGPoint(x: 281.04, y: 211.62), controlPoint2: CGPoint(x: 282.35, y: 210.31))
        fill86Path.addLine(to: CGPoint(x: 282.35, y: 178.55))
        fill86Path.addCurve(to: CGPoint(x: 279.41, y: 175.61), controlPoint1: CGPoint(x: 282.35, y: 176.93), controlPoint2: CGPoint(x: 281.04, y: 175.61))
        fill86Path.close()
        fill86Path.usesEvenOddFillRule = true
        color.setFill()
        fill86Path.fill()

        //// Fill-87 Drawing
        let fill87Path = UIBezierPath(roundedRect: CGRect(x: 229, y: 218, width: 53, height: 5), cornerRadius: 2.5)
        color.setFill()
        fill87Path.fill()

        //// Fill-88 Drawing
        let fill88Path = UIBezierPath()
        fill88Path.move(to: CGPoint(x: 129.41, y: 285.11))
        fill88Path.addLine(to: CGPoint(x: 170.59, y: 285.11))
        fill88Path.addLine(to: CGPoint(x: 170.59, y: 255.71))
        fill88Path.addLine(to: CGPoint(x: 129.41, y: 255.71))
        fill88Path.addLine(to: CGPoint(x: 129.41, y: 285.11))
        fill88Path.close()
        fill88Path.move(to: CGPoint(x: 173.53, y: 249.83))
        fill88Path.addLine(to: CGPoint(x: 126.47, y: 249.83))
        fill88Path.addCurve(to: CGPoint(x: 123.53, y: 252.77), controlPoint1: CGPoint(x: 124.85, y: 249.83), controlPoint2: CGPoint(x: 123.53, y: 251.15))
        fill88Path.addLine(to: CGPoint(x: 123.53, y: 288.05))
        fill88Path.addCurve(to: CGPoint(x: 126.47, y: 290.99), controlPoint1: CGPoint(x: 123.53, y: 289.67), controlPoint2: CGPoint(x: 124.85, y: 290.99))
        fill88Path.addLine(to: CGPoint(x: 173.53, y: 290.99))
        fill88Path.addCurve(to: CGPoint(x: 176.47, y: 288.05), controlPoint1: CGPoint(x: 175.15, y: 290.99), controlPoint2: CGPoint(x: 176.47, y: 289.67))
        fill88Path.addLine(to: CGPoint(x: 176.47, y: 252.77))
        fill88Path.addCurve(to: CGPoint(x: 173.53, y: 249.83), controlPoint1: CGPoint(x: 176.47, y: 251.15), controlPoint2: CGPoint(x: 175.15, y: 249.83))
        fill88Path.close()
        fill88Path.usesEvenOddFillRule = true
        color.setFill()
        fill88Path.fill()

        //// Fill-89 Drawing
        let fill89Path = UIBezierPath(roundedRect: CGRect(x: 135, y: 294, width: 30, height: 6), cornerRadius: 3)
        color.setFill()
        fill89Path.fill()

        //// Fill-90 Drawing
        let fill90Path = UIBezierPath()
        fill90Path.move(to: CGPoint(x: 73.53, y: 310.96))
        fill90Path.addLine(to: CGPoint(x: 67.65, y: 309.86))
        fill90Path.addLine(to: CGPoint(x: 67.65, y: 305.68))
        fill90Path.addLine(to: CGPoint(x: 73.53, y: 305.68))
        fill90Path.addLine(to: CGPoint(x: 73.53, y: 310.96))
        fill90Path.close()
        fill90Path.move(to: CGPoint(x: 77.36, y: 255.71))
        fill90Path.addLine(to: CGPoint(x: 79.25, y: 291.04))
        fill90Path.addCurve(to: CGPoint(x: 78.68, y: 290.98), controlPoint1: CGPoint(x: 79.07, y: 291.01), controlPoint2: CGPoint(x: 78.87, y: 290.98))
        fill90Path.addLine(to: CGPoint(x: 61.93, y: 290.98))
        fill90Path.addLine(to: CGPoint(x: 63.82, y: 255.71))
        fill90Path.addLine(to: CGPoint(x: 77.36, y: 255.71))
        fill90Path.close()
        fill90Path.move(to: CGPoint(x: 64.32, y: 296.86))
        fill90Path.addLine(to: CGPoint(x: 76.86, y: 296.86))
        fill90Path.addLine(to: CGPoint(x: 74.9, y: 299.8))
        fill90Path.addLine(to: CGPoint(x: 66.28, y: 299.8))
        fill90Path.addLine(to: CGPoint(x: 64.32, y: 296.86))
        fill90Path.close()
        fill90Path.move(to: CGPoint(x: 85.29, y: 293.77))
        fill90Path.addLine(to: CGPoint(x: 83.08, y: 252.62))
        fill90Path.addCurve(to: CGPoint(x: 80.15, y: 249.83), controlPoint1: CGPoint(x: 83, y: 251.06), controlPoint2: CGPoint(x: 81.71, y: 249.83))
        fill90Path.addLine(to: CGPoint(x: 61.03, y: 249.83))
        fill90Path.addCurve(to: CGPoint(x: 58.09, y: 252.62), controlPoint1: CGPoint(x: 59.47, y: 249.83), controlPoint2: CGPoint(x: 58.18, y: 251.06))
        fill90Path.addLine(to: CGPoint(x: 55.89, y: 293.77))
        fill90Path.addCurve(to: CGPoint(x: 56.38, y: 295.55), controlPoint1: CGPoint(x: 55.85, y: 294.4), controlPoint2: CGPoint(x: 56.02, y: 295.03))
        fill90Path.addLine(to: CGPoint(x: 61.76, y: 303.63))
        fill90Path.addLine(to: CGPoint(x: 61.76, y: 312.3))
        fill90Path.addCurve(to: CGPoint(x: 64.16, y: 315.18), controlPoint1: CGPoint(x: 61.76, y: 313.71), controlPoint2: CGPoint(x: 62.77, y: 314.92))
        fill90Path.addLine(to: CGPoint(x: 75.93, y: 317.39))
        fill90Path.addCurve(to: CGPoint(x: 79.41, y: 314.5), controlPoint1: CGPoint(x: 77.74, y: 317.73), controlPoint2: CGPoint(x: 79.41, y: 316.34))
        fill90Path.addLine(to: CGPoint(x: 79.41, y: 303.63))
        fill90Path.addLine(to: CGPoint(x: 84.8, y: 295.55))
        fill90Path.addCurve(to: CGPoint(x: 85.29, y: 293.77), controlPoint1: CGPoint(x: 85.15, y: 295.03), controlPoint2: CGPoint(x: 85.32, y: 294.4))
        fill90Path.close()
        fill90Path.usesEvenOddFillRule = true
        color.setFill()
        fill90Path.fill()

        //// Fill-91 Drawing
        let fill91Path = UIBezierPath()
        fill91Path.move(to: CGPoint(x: 67.65, y: 126.38))
        fill91Path.addLine(to: CGPoint(x: 20.59, y: 126.38))
        fill91Path.addCurve(to: CGPoint(x: 17.65, y: 129.32), controlPoint1: CGPoint(x: 18.96, y: 126.38), controlPoint2: CGPoint(x: 17.65, y: 127.7))
        fill91Path.addLine(to: CGPoint(x: 17.65, y: 141.08))
        fill91Path.addCurve(to: CGPoint(x: 20.59, y: 144.02), controlPoint1: CGPoint(x: 17.65, y: 142.7), controlPoint2: CGPoint(x: 18.96, y: 144.02))
        fill91Path.addCurve(to: CGPoint(x: 23.53, y: 141.08), controlPoint1: CGPoint(x: 22.21, y: 144.02), controlPoint2: CGPoint(x: 23.53, y: 142.7))
        fill91Path.addLine(to: CGPoint(x: 23.53, y: 132.26))
        fill91Path.addLine(to: CGPoint(x: 64.71, y: 132.26))
        fill91Path.addLine(to: CGPoint(x: 64.71, y: 161.65))
        fill91Path.addLine(to: CGPoint(x: 32.35, y: 161.65))
        fill91Path.addLine(to: CGPoint(x: 20.59, y: 161.65))
        fill91Path.addCurve(to: CGPoint(x: 17.65, y: 164.59), controlPoint1: CGPoint(x: 18.96, y: 161.65), controlPoint2: CGPoint(x: 17.65, y: 162.97))
        fill91Path.addCurve(to: CGPoint(x: 20.59, y: 167.53), controlPoint1: CGPoint(x: 17.65, y: 166.21), controlPoint2: CGPoint(x: 18.96, y: 167.53))
        fill91Path.addLine(to: CGPoint(x: 27.59, y: 167.53))
        fill91Path.addLine(to: CGPoint(x: 23.84, y: 175.03))
        fill91Path.addCurve(to: CGPoint(x: 25.16, y: 178.98), controlPoint1: CGPoint(x: 23.11, y: 176.49), controlPoint2: CGPoint(x: 23.7, y: 178.25))
        fill91Path.addCurve(to: CGPoint(x: 29.1, y: 177.66), controlPoint1: CGPoint(x: 26.61, y: 179.7), controlPoint2: CGPoint(x: 28.37, y: 179.12))
        fill91Path.addLine(to: CGPoint(x: 34.17, y: 167.53))
        fill91Path.addLine(to: CGPoint(x: 54.8, y: 167.53))
        fill91Path.addLine(to: CGPoint(x: 59.87, y: 177.66))
        fill91Path.addCurve(to: CGPoint(x: 63.82, y: 178.98), controlPoint1: CGPoint(x: 60.6, y: 179.12), controlPoint2: CGPoint(x: 62.36, y: 179.7))
        fill91Path.addCurve(to: CGPoint(x: 65.13, y: 175.03), controlPoint1: CGPoint(x: 65.27, y: 178.25), controlPoint2: CGPoint(x: 65.86, y: 176.49))
        fill91Path.addLine(to: CGPoint(x: 61.38, y: 167.53))
        fill91Path.addLine(to: CGPoint(x: 67.65, y: 167.53))
        fill91Path.addCurve(to: CGPoint(x: 70.59, y: 164.59), controlPoint1: CGPoint(x: 69.27, y: 167.53), controlPoint2: CGPoint(x: 70.59, y: 166.21))
        fill91Path.addLine(to: CGPoint(x: 70.59, y: 129.32))
        fill91Path.addCurve(to: CGPoint(x: 67.65, y: 126.38), controlPoint1: CGPoint(x: 70.59, y: 127.7), controlPoint2: CGPoint(x: 69.27, y: 126.38))
        fill91Path.close()
        fill91Path.usesEvenOddFillRule = true
        color.setFill()
        fill91Path.fill()
    }

    @objc dynamic public class func drawDegradation(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 260, height: 260), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 260, height: 260), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 260, y: resizedFrame.height / 260)

        //// Color Declarations
        let white80 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.800)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 130, y: 260))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 130), controlPoint1: CGPoint(x: 58.2, y: 260), controlPoint2: CGPoint(x: 0, y: 201.8))
        bezierPath.addCurve(to: CGPoint(x: 130, y: 0), controlPoint1: CGPoint(x: 0, y: 58.2), controlPoint2: CGPoint(x: 58.2, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 260, y: 130), controlPoint1: CGPoint(x: 201.8, y: 0), controlPoint2: CGPoint(x: 260, y: 58.2))
        bezierPath.addCurve(to: CGPoint(x: 130, y: 260), controlPoint1: CGPoint(x: 260, y: 201.8), controlPoint2: CGPoint(x: 201.8, y: 260))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 177.52, y: 87.96))
        bezierPath.addLine(to: CGPoint(x: 129.5, y: 75.12))
        bezierPath.addLine(to: CGPoint(x: 81.48, y: 88.84))
        bezierPath.addLine(to: CGPoint(x: 81.48, y: 130))
        bezierPath.addCurve(to: CGPoint(x: 129.5, y: 184.88), controlPoint1: CGPoint(x: 81.48, y: 157.44), controlPoint2: CGPoint(x: 102.11, y: 178.69))
        bezierPath.addCurve(to: CGPoint(x: 177.52, y: 130), controlPoint1: CGPoint(x: 157.17, y: 178.69), controlPoint2: CGPoint(x: 177.52, y: 157.44))
        bezierPath.addLine(to: CGPoint(x: 177.52, y: 87.96))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 91.77, y: 95.86))
        bezierPath.addLine(to: CGPoint(x: 129.5, y: 85.82))
        bezierPath.addLine(to: CGPoint(x: 129.49, y: 174.29))
        bezierPath.addCurve(to: CGPoint(x: 91.77, y: 130), controlPoint1: CGPoint(x: 106.77, y: 168.34), controlPoint2: CGPoint(x: 91.77, y: 150.97))
        bezierPath.addLine(to: CGPoint(x: 91.77, y: 95.86))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        white80.setFill()
        bezierPath.fill()

        context.restoreGState()
    }

    @objc dynamic public class func drawSpace(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit, color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 16.03, y: 0.55))
        bezierPath.addLine(to: CGPoint(x: 24.53, y: 5.53))
        bezierPath.addLine(to: CGPoint(x: 24.53, y: 5.53))
        bezierPath.addCurve(to: CGPoint(x: 26.5, y: 8.96), controlPoint1: CGPoint(x: 25.75, y: 6.24), controlPoint2: CGPoint(x: 26.5, y: 7.55))
        bezierPath.addLine(to: CGPoint(x: 26.5, y: 19.04))
        bezierPath.addLine(to: CGPoint(x: 26.5, y: 19.04))
        bezierPath.addCurve(to: CGPoint(x: 24.53, y: 22.47), controlPoint1: CGPoint(x: 26.5, y: 20.45), controlPoint2: CGPoint(x: 25.75, y: 21.76))
        bezierPath.addLine(to: CGPoint(x: 16.03, y: 27.45))
        bezierPath.addLine(to: CGPoint(x: 16.03, y: 27.45))
        bezierPath.addCurve(to: CGPoint(x: 11.97, y: 27.45), controlPoint1: CGPoint(x: 14.77, y: 28.18), controlPoint2: CGPoint(x: 13.23, y: 28.18))
        bezierPath.addLine(to: CGPoint(x: 3.47, y: 22.47))
        bezierPath.addLine(to: CGPoint(x: 3.47, y: 22.47))
        bezierPath.addCurve(to: CGPoint(x: 1.5, y: 19.04), controlPoint1: CGPoint(x: 2.25, y: 21.76), controlPoint2: CGPoint(x: 1.5, y: 20.45))
        bezierPath.addLine(to: CGPoint(x: 1.5, y: 8.96))
        bezierPath.addLine(to: CGPoint(x: 1.5, y: 8.96))
        bezierPath.addCurve(to: CGPoint(x: 3.47, y: 5.53), controlPoint1: CGPoint(x: 1.5, y: 7.55), controlPoint2: CGPoint(x: 2.25, y: 6.24))
        bezierPath.addLine(to: CGPoint(x: 11.97, y: 0.55))
        bezierPath.addLine(to: CGPoint(x: 11.97, y: 0.55))
        bezierPath.addCurve(to: CGPoint(x: 16.03, y: 0.55), controlPoint1: CGPoint(x: 13.23, y: -0.18), controlPoint2: CGPoint(x: 14.77, y: -0.18))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        color.setFill()
        bezierPath.fill()

        context.restoreGState()

    }

    @objc dynamic public class func drawSpaceFocus(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit, color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 21.5, y: 0.94))
        bezierPath.addLine(to: CGPoint(x: 31, y: 6.43))
        bezierPath.addCurve(to: CGPoint(x: 34.5, y: 12.5), controlPoint1: CGPoint(x: 33.17, y: 7.69), controlPoint2: CGPoint(x: 34.5, y: 10))
        bezierPath.addLine(to: CGPoint(x: 34.5, y: 23.5))
        bezierPath.addCurve(to: CGPoint(x: 31, y: 29.57), controlPoint1: CGPoint(x: 34.5, y: 26), controlPoint2: CGPoint(x: 33.17, y: 28.31))
        bezierPath.addLine(to: CGPoint(x: 21.5, y: 35.06))
        bezierPath.addCurve(to: CGPoint(x: 14.5, y: 35.06), controlPoint1: CGPoint(x: 19.34, y: 36.31), controlPoint2: CGPoint(x: 16.66, y: 36.31))
        bezierPath.addLine(to: CGPoint(x: 5, y: 29.57))
        bezierPath.addCurve(to: CGPoint(x: 1.5, y: 23.5), controlPoint1: CGPoint(x: 2.83, y: 28.31), controlPoint2: CGPoint(x: 1.5, y: 26))
        bezierPath.addLine(to: CGPoint(x: 1.5, y: 12.5))
        bezierPath.addCurve(to: CGPoint(x: 5, y: 6.43), controlPoint1: CGPoint(x: 1.5, y: 10), controlPoint2: CGPoint(x: 2.83, y: 7.69))
        bezierPath.addLine(to: CGPoint(x: 14.5, y: 0.94))
        bezierPath.addCurve(to: CGPoint(x: 21.5, y: 0.94), controlPoint1: CGPoint(x: 16.66, y: -0.31), controlPoint2: CGPoint(x: 19.34, y: -0.31))
        bezierPath.addLine(to: CGPoint(x: 21.5, y: 0.94))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 20.45, y: 2.65))
        bezierPath.addCurve(to: CGPoint(x: 15.55, y: 2.65), controlPoint1: CGPoint(x: 18.93, y: 1.79), controlPoint2: CGPoint(x: 17.07, y: 1.79))
        bezierPath.addLine(to: CGPoint(x: 6.05, y: 8))
        bezierPath.addCurve(to: CGPoint(x: 3.5, y: 12.36), controlPoint1: CGPoint(x: 4.47, y: 8.88), controlPoint2: CGPoint(x: 3.5, y: 10.55))
        bezierPath.addLine(to: CGPoint(x: 3.5, y: 23.64))
        bezierPath.addCurve(to: CGPoint(x: 6.04, y: 28), controlPoint1: CGPoint(x: 3.5, y: 25.45), controlPoint2: CGPoint(x: 4.47, y: 27.11))
        bezierPath.addLine(to: CGPoint(x: 15.54, y: 33.36))
        bezierPath.addCurve(to: CGPoint(x: 20.46, y: 33.36), controlPoint1: CGPoint(x: 17.07, y: 34.22), controlPoint2: CGPoint(x: 18.93, y: 34.22))
        bezierPath.addLine(to: CGPoint(x: 29.96, y: 28))
        bezierPath.addCurve(to: CGPoint(x: 32.5, y: 23.64), controlPoint1: CGPoint(x: 31.53, y: 27.11), controlPoint2: CGPoint(x: 32.5, y: 25.45))
        bezierPath.addLine(to: CGPoint(x: 32.5, y: 12.36))
        bezierPath.addCurve(to: CGPoint(x: 29.95, y: 8), controlPoint1: CGPoint(x: 32.5, y: 10.55), controlPoint2: CGPoint(x: 31.53, y: 8.88))
        bezierPath.addLine(to: CGPoint(x: 20.45, y: 2.65))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        color.setFill()
        bezierPath.fill()

        context.restoreGState()
    }

    @objc dynamic public class func drawIcon_restore_48pt(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0.08, y: 26))
        bezierPath.addLine(to: CGPoint(x: 4.1, y: 26))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 44), controlPoint1: CGPoint(x: 5.1, y: 36.11), controlPoint2: CGPoint(x: 13.63, y: 44))
        bezierPath.addCurve(to: CGPoint(x: 44, y: 24), controlPoint1: CGPoint(x: 35.05, y: 44), controlPoint2: CGPoint(x: 44, y: 35.05))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 4), controlPoint1: CGPoint(x: 44, y: 12.95), controlPoint2: CGPoint(x: 35.05, y: 4))
        bezierPath.addCurve(to: CGPoint(x: 7.18, y: 13.18), controlPoint1: CGPoint(x: 16.94, y: 4), controlPoint2: CGPoint(x: 10.74, y: 7.66))
        bezierPath.addLine(to: CGPoint(x: 12, y: 18))
        bezierPath.addLine(to: CGPoint(x: 0, y: 18))
        bezierPath.addLine(to: CGPoint(x: 0, y: 6))
        bezierPath.addLine(to: CGPoint(x: 4.3, y: 10.3))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 0), controlPoint1: CGPoint(x: 8.63, y: 4.07), controlPoint2: CGPoint(x: 15.84, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 48, y: 24), controlPoint1: CGPoint(x: 37.25, y: 0), controlPoint2: CGPoint(x: 48, y: 10.75))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 48), controlPoint1: CGPoint(x: 48, y: 37.25), controlPoint2: CGPoint(x: 37.25, y: 48))
        bezierPath.addCurve(to: CGPoint(x: 0.08, y: 26), controlPoint1: CGPoint(x: 11.42, y: 48), controlPoint2: CGPoint(x: 1.1, y: 38.32))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 26, y: 23.69))
        bezierPath.addLine(to: CGPoint(x: 34.39, y: 28.54))
        bezierPath.addLine(to: CGPoint(x: 32.39, y: 32))
        bezierPath.addLine(to: CGPoint(x: 22, y: 26))
        bezierPath.addLine(to: CGPoint(x: 22, y: 10))
        bezierPath.addLine(to: CGPoint(x: 26, y: 10))
        bezierPath.addLine(to: CGPoint(x: 26, y: 23.69))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        color.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawMentions(frame: CGRect = CGRect(x: 10, y: 10, width: 176, height: 57), backgroundColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }

        //// Color Declarations
        let black40 = backgroundColor.withAlpha(0.4)

        //// Subframes
        let frame2 = CGRect(x: frame.minX + fastFloor((frame.width - 16) * 0.50000 + 0.5), y: frame.minY + fastFloor((frame.height - 12) * 1.00000 + 0.5), width: 16, height: 12)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: frame.maxX - 25, y: frame.minY + 1))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 25, y: frame.minY + 1))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 1, y: frame.maxY - 32), controlPoint1: CGPoint(x: frame.minX + 11.7, y: frame.minY + 1), controlPoint2: CGPoint(x: frame.minX + 1, y: frame.maxY - 45.3))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 25, y: frame.maxY - 8), controlPoint1: CGPoint(x: frame.minX + 1, y: frame.maxY - 18.7), controlPoint2: CGPoint(x: frame.minX + 11.7, y: frame.maxY - 8))
        bezierPath.addLine(to: CGPoint(x: frame2.minX + 1, y: frame2.minY + 0.33333 * frame2.height))
        bezierPath.addLine(to: CGPoint(x: frame2.minX + 8, y: frame2.minY + 0.91667 * frame2.height))
        bezierPath.addLine(to: CGPoint(x: frame2.minX + 15, y: frame2.minY + 0.33333 * frame2.height))
        bezierPath.addLine(to: CGPoint(x: frame.maxX - 25, y: frame.maxY - 8))
        bezierPath.addCurve(to: CGPoint(x: frame.maxX - 1, y: frame.maxY - 32), controlPoint1: CGPoint(x: frame.maxX - 11.7, y: frame.maxY - 8), controlPoint2: CGPoint(x: frame.maxX - 1, y: frame.maxY - 18.7))
        bezierPath.addCurve(to: CGPoint(x: frame.maxX - 25, y: frame.minY + 1), controlPoint1: CGPoint(x: frame.maxX - 1, y: frame.maxY - 45.3), controlPoint2: CGPoint(x: frame.maxX - 11.7, y: frame.minY + 1))
        bezierPath.close()
        black40.setFill()
        bezierPath.fill()

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: frame.maxX - 24.28, y: frame.minY))
        bezier2Path.addLine(to: CGPoint(x: frame.minX + 24.28, y: frame.minY))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX, y: frame.maxY - 32.13), controlPoint1: CGPoint(x: frame.minX + 10.82, y: frame.minY), controlPoint2: CGPoint(x: frame.minX, y: frame.maxY - 45.91))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 24.28, y: frame.maxY - 7.25), controlPoint1: CGPoint(x: frame.minX, y: frame.maxY - 18.34), controlPoint2: CGPoint(x: frame.minX + 10.82, y: frame.maxY - 7.25))
        bezier2Path.addLine(to: CGPoint(x: frame2.minX + 0.92, y: frame2.minY + 0.39545 * frame2.height))
        bezier2Path.addLine(to: CGPoint(x: frame2.minX + 8, y: frame2.minY + 1.00000 * frame2.height))
        bezier2Path.addLine(to: CGPoint(x: frame2.minX + 15.08, y: frame2.minY + 0.39545 * frame2.height))
        bezier2Path.addLine(to: CGPoint(x: frame.maxX - 24.28, y: frame.maxY - 7.25))
        bezier2Path.addCurve(to: CGPoint(x: frame.maxX, y: frame.maxY - 32.13), controlPoint1: CGPoint(x: frame.maxX - 10.82, y: frame.maxY - 7.25), controlPoint2: CGPoint(x: frame.maxX, y: frame.maxY - 18.34))
        bezier2Path.addCurve(to: CGPoint(x: frame.maxX - 24.28, y: frame.minY), controlPoint1: CGPoint(x: frame.maxX, y: frame.maxY - 45.91), controlPoint2: CGPoint(x: frame.maxX - 10.82, y: frame.minY))
        bezier2Path.close()
        black40.setFill()
        bezier2Path.fill()
    }

    @objc dynamic public class func drawTab(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0, y: 8.5))
        bezierPath.addLine(to: CGPoint(x: 1, y: 8.5))
        bezierPath.addLine(to: CGPoint(x: 9, y: 0.5))
        bezierPath.addLine(to: CGPoint(x: 17, y: 8.5))
        bezierPath.addLine(to: CGPoint(x: 18, y: 8.5))
        color.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.lineJoinStyle = .round
        bezierPath.stroke()
    }

    //// Generated Images

    @objc dynamic public class func imageOfMissedcall(accent: UIColor = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 40), false, 0)
            WireStyleKit.drawMissedcall(accent: accent)

        let imageOfMissedcall = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfMissedcall
    }

    @objc dynamic public class func imageOfYoutube(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 72, height: 16), false, 0)
            WireStyleKit.drawYoutube(color: color)

        let imageOfYoutube = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfYoutube
    }

    @objc dynamic public class func imageOfMissedcalllast(accent: UIColor = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 40), false, 0)
            WireStyleKit.drawMissedcalllast(accent: accent)

        let imageOfMissedcalllast = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfMissedcalllast
    }

    @objc dynamic public class func imageOfVimeo(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 84, height: 24), false, 0)
            WireStyleKit.drawVimeo(color: color)

        let imageOfVimeo = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfVimeo
    }

    @objc dynamic public class var imageOfOngoingcall: UIImage {
        if Cache.imageOfOngoingcall != nil {
            return Cache.imageOfOngoingcall!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 18, height: 18), false, 0)
            WireStyleKit.drawOngoingcall()

        Cache.imageOfOngoingcall = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfOngoingcall!
    }

    @objc dynamic public class func imageOfJoinongoingcall(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 18, height: 18), false, 0)
            WireStyleKit.drawJoinongoingcall(color: color)

        let imageOfJoinongoingcall = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfJoinongoingcall
    }

    @objc dynamic public class func imageOfLogo(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 272, height: 224), false, 0)
            WireStyleKit.drawLogo(color: color)

        let imageOfLogo = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfLogo
    }

    @objc dynamic public class func imageOfWire(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 174, height: 50), false, 0)
            WireStyleKit.drawWire(color: color)

        let imageOfWire = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfWire
    }

    @objc dynamic public class var imageOfShieldverified: UIImage {
        if Cache.imageOfShieldverified != nil {
            return Cache.imageOfShieldverified!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 16, height: 16), false, 0)
            WireStyleKit.drawShieldverified()

        Cache.imageOfShieldverified = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfShieldverified!
    }

    @objc dynamic public class var imageOfShieldnotverified: UIImage {
        if Cache.imageOfShieldnotverified != nil {
            return Cache.imageOfShieldnotverified!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 16, height: 16), false, 0)
            WireStyleKit.drawShieldnotverified()

        Cache.imageOfShieldnotverified = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfShieldnotverified!
    }

    @objc dynamic public class func imageOfShield(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 300, height: 388), false, 0)
            WireStyleKit.drawShield(color: color)

        let imageOfShield = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfShield
    }

    @objc dynamic public class var imageOfDegradation: UIImage {
        if Cache.imageOfDegradation != nil {
            return Cache.imageOfDegradation!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 260, height: 260), false, 0)
            WireStyleKit.drawDegradation()

        Cache.imageOfDegradation = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfDegradation!
    }

    @objc dynamic public class func imageOfSpace(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
            WireStyleKit.drawSpace(color: color)

        let imageOfSpace = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfSpace
    }

    @objc dynamic public class func imageOfSpaceFocus(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
            WireStyleKit.drawSpaceFocus(color: color)

        let imageOfSpaceFocus = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfSpaceFocus
    }

    @objc dynamic public class func imageOfTab(color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 18, height: 9), false, 0)
            WireStyleKit.drawTab(color: color)

        let imageOfTab = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfTab
    }

    //// Customization Infrastructure

    @IBOutlet dynamic var ongoingcallTargets: [AnyObject]! {
        get { return Cache.ongoingcallTargets }
        set {
            Cache.ongoingcallTargets = newValue
            for target: AnyObject in newValue {
                _ = target.perform(NSSelectorFromString("setImage:"), with: WireStyleKit.imageOfOngoingcall)
            }
        }
    }

    @IBOutlet dynamic var shieldverifiedTargets: [AnyObject]! {
        get { return Cache.shieldverifiedTargets }
        set {
            Cache.shieldverifiedTargets = newValue
            for target: AnyObject in newValue {
                _ = target.perform(NSSelectorFromString("setImage:"), with: WireStyleKit.imageOfShieldverified)
            }
        }
    }

    @IBOutlet dynamic var shieldnotverifiedTargets: [AnyObject]! {
        get { return Cache.shieldnotverifiedTargets }
        set {
            Cache.shieldnotverifiedTargets = newValue
            for target: AnyObject in newValue {
                _ = target.perform(NSSelectorFromString("setImage:"), with: WireStyleKit.imageOfShieldnotverified)
            }
        }
    }

    @IBOutlet dynamic var degradationTargets: [AnyObject]! {
        get { return Cache.degradationTargets }
        set {
            Cache.degradationTargets = newValue
            for target: AnyObject in newValue {
                _ = target.perform(NSSelectorFromString("setImage:"), with: WireStyleKit.imageOfDegradation)
            }
        }
    }

    @objc(WireStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            switch self {
            case .aspectFit:
                scales.width = min(scales.width, scales.height)
                scales.height = scales.width
            case .aspectFill:
                scales.width = max(scales.width, scales.height)
                scales.height = scales.width
            case .stretch:
                break
            case .center:
                scales.width = 1
                scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}

private extension UIColor {
    func withHue(_ newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func withSaturation(_ newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func withBrightness(_ newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func withAlpha(_ newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, brightness: CGFloat = 1
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func highlight(withLevel highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func shadow(withLevel shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}
