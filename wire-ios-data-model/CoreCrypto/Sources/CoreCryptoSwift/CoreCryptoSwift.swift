// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(LibCoreCrypto)
import LibCoreCrypto
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_CoreCrypto_3b31_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_CoreCrypto_3b31_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a libray of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_PANIC: Int8 = 2

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: {
        $0.deallocate()
        return UniffiInternalError.unexpectedRustCallError
    })
}

private func rustCallWithError<T, F: FfiConverter>
    (_ errorFfiConverter: F.Type, _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T
    where F.SwiftType: Error, F.FfiType == RustBuffer
    {
    try makeRustCall(callback, errorHandler: { return try errorFfiConverter.lift($0) })
}

private func makeRustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T, errorHandler: (RustBuffer) throws -> Error) throws -> T {
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    switch callStatus.code {
        case CALL_SUCCESS:
            return returnedVal

        case CALL_ERROR:
            throw try errorHandler(callStatus.errorBuf)

        case CALL_PANIC:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.


fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt16 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

fileprivate struct FfiConverterDuration: FfiConverterRustBuffer {
    typealias SwiftType = TimeInterval

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TimeInterval {
        let seconds: UInt64 = try readInt(&buf)
        let nanoseconds: UInt32 = try readInt(&buf)
        return Double(seconds) + (Double(nanoseconds) / 1.0e9)
    }

    public static func write(_ value: TimeInterval, into buf: inout [UInt8]) {
        if value.rounded(.down) > Double(Int64.max) {
            fatalError("Duration overflow, exceeds max bounds supported by Uniffi")
        }

        if value < 0 {
            fatalError("Invalid duration, must be non-negative")
        }

        let seconds = UInt64(value)
        let nanoseconds = UInt32((value - Double(seconds)) * 1.0e9)
        writeInt(&buf, seconds)
        writeInt(&buf, nanoseconds)
    }
}


public protocol CoreCryptoProtocol {
    func `mlsInit`(`clientId`: ClientId) throws
    func `mlsGenerateKeypair`() throws -> [UInt8]
    func `mlsInitWithClientId`(`clientId`: ClientId, `signaturePublicKey`: [UInt8]) throws
    func `restoreFromDisk`() throws
    func `setCallbacks`(`callbacks`: CoreCryptoCallbacks) throws
    func `clientPublicKey`() throws -> [UInt8]
    func `clientKeypackages`(`amountRequested`: UInt32) throws -> [[UInt8]]
    func `clientValidKeypackagesCount`() throws -> UInt64
    func `createConversation`(`conversationId`: ConversationId, `config`: ConversationConfiguration) throws
    func `conversationEpoch`(`conversationId`: ConversationId) throws -> UInt64
    func `conversationExists`(`conversationId`: ConversationId)  -> Bool
    func `processWelcomeMessage`(`welcomeMessage`: [UInt8], `customConfiguration`: CustomConfiguration) throws -> ConversationId
    func `addClientsToConversation`(`conversationId`: ConversationId, `clients`: [Invitee]) throws -> MemberAddedMessages
    func `removeClientsFromConversation`(`conversationId`: ConversationId, `clients`: [ClientId]) throws -> CommitBundle
    func `markConversationAsChildOf`(`childId`: ConversationId, `parentId`: ConversationId) throws
    func `updateKeyingMaterial`(`conversationId`: ConversationId) throws -> CommitBundle
    func `commitPendingProposals`(`conversationId`: ConversationId) throws -> CommitBundle?
    func `wipeConversation`(`conversationId`: ConversationId) throws
    func `decryptMessage`(`conversationId`: ConversationId, `payload`: [UInt8]) throws -> DecryptedMessage
    func `encryptMessage`(`conversationId`: ConversationId, `message`: [UInt8]) throws -> [UInt8]
    func `newAddProposal`(`conversationId`: ConversationId, `keyPackage`: [UInt8]) throws -> ProposalBundle
    func `newUpdateProposal`(`conversationId`: ConversationId) throws -> ProposalBundle
    func `newRemoveProposal`(`conversationId`: ConversationId, `clientId`: ClientId) throws -> ProposalBundle
    func `newExternalAddProposal`(`conversationId`: ConversationId, `epoch`: UInt64) throws -> [UInt8]
    func `newExternalRemoveProposal`(`conversationId`: ConversationId, `epoch`: UInt64, `keyPackageRef`: [UInt8]) throws -> [UInt8]
    func `joinByExternalCommit`(`publicGroupState`: [UInt8], `customConfiguration`: CustomConfiguration) throws -> ConversationInitBundle
    func `mergePendingGroupFromExternalCommit`(`conversationId`: ConversationId) throws
    func `clearPendingGroupFromExternalCommit`(`conversationId`: ConversationId) throws
    func `exportGroupState`(`conversationId`: ConversationId) throws -> [UInt8]
    func `exportSecretKey`(`conversationId`: ConversationId, `keyLength`: UInt32) throws -> [UInt8]
    func `getClientIds`(`conversationId`: ConversationId) throws -> [ClientId]
    func `randomBytes`(`length`: UInt32) throws -> [UInt8]
    func `reseedRng`(`seed`: [UInt8]) throws
    func `commitAccepted`(`conversationId`: ConversationId) throws
    func `clearPendingProposal`(`conversationId`: ConversationId, `proposalRef`: [UInt8]) throws
    func `clearPendingCommit`(`conversationId`: ConversationId) throws
    func `proteusInit`() throws
    func `proteusSessionFromPrekey`(`sessionId`: String, `prekey`: [UInt8]) throws
    func `proteusSessionFromMessage`(`sessionId`: String, `envelope`: [UInt8]) throws -> [UInt8]
    func `proteusSessionSave`(`sessionId`: String) throws
    func `proteusSessionDelete`(`sessionId`: String) throws
    func `proteusSessionExists`(`sessionId`: String) throws -> Bool
    func `proteusDecrypt`(`sessionId`: String, `ciphertext`: [UInt8]) throws -> [UInt8]
    func `proteusEncrypt`(`sessionId`: String, `plaintext`: [UInt8]) throws -> [UInt8]
    func `proteusEncryptBatched`(`sessionId`: [String], `plaintext`: [UInt8]) throws -> [String: [UInt8]]
    func `proteusNewPrekey`(`prekeyId`: UInt16) throws -> [UInt8]
    func `proteusNewPrekeyAuto`() throws -> ProteusAutoPrekeyBundle
    func `proteusLastResortPrekey`() throws -> [UInt8]
    func `proteusLastResortPrekeyId`() throws -> UInt16
    func `proteusFingerprint`() throws -> String
    func `proteusFingerprintLocal`(`sessionId`: String) throws -> String
    func `proteusFingerprintRemote`(`sessionId`: String) throws -> String
    func `proteusFingerprintPrekeybundle`(`prekey`: [UInt8]) throws -> String
    func `proteusCryptoboxMigrate`(`path`: String) throws
    func `newAcmeEnrollment`(`ciphersuite`: CiphersuiteName) throws -> WireE2eIdentity
    func `proteusLastErrorCode`()  -> UInt32
    
}

public class CoreCrypto: CoreCryptoProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init(`path`: String, `key`: String, `clientId`: ClientId, `entropySeed`: [UInt8]?) throws {
        self.init(unsafeFromRawPointer: try
    
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    
    CoreCrypto_3b31_CoreCrypto_new(
        FfiConverterString.lower(`path`), 
        FfiConverterString.lower(`key`), 
        FfiConverterTypeClientId.lower(`clientId`), 
        FfiConverterOptionSequenceUInt8.lower(`entropySeed`), $0)
})
    }

    deinit {
        try! rustCall { ffi_CoreCrypto_3b31_CoreCrypto_object_free(pointer, $0) }
    }

    
    public static func `deferredInit`(`path`: String, `key`: String, `entropySeed`: [UInt8]?) throws -> CoreCrypto {
        return CoreCrypto(unsafeFromRawPointer: try
    
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    
    CoreCrypto_3b31_CoreCrypto_deferred_init(
        FfiConverterString.lower(`path`), 
        FfiConverterString.lower(`key`), 
        FfiConverterOptionSequenceUInt8.lower(`entropySeed`), $0)
})
    }
    

    
    public func `mlsInit`(`clientId`: ClientId) throws {
        try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_mls_init(self.pointer, 
        FfiConverterTypeClientId.lower(`clientId`), $0
    )
}
    }
    public func `mlsGenerateKeypair`() throws -> [UInt8] {
        return try FfiConverterSequenceUInt8.lift(
            try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_mls_generate_keypair(self.pointer, $0
    )
}
        )
    }
    public func `mlsInitWithClientId`(`clientId`: ClientId, `signaturePublicKey`: [UInt8]) throws {
        try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_mls_init_with_client_id(self.pointer, 
        FfiConverterTypeClientId.lower(`clientId`), 
        FfiConverterSequenceUInt8.lower(`signaturePublicKey`), $0
    )
}
    }
    public func `restoreFromDisk`() throws {
        try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_restore_from_disk(self.pointer, $0
    )
}
    }
    public func `setCallbacks`(`callbacks`: CoreCryptoCallbacks) throws {
        try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_set_callbacks(self.pointer, 
        FfiConverterCallbackInterfaceCoreCryptoCallbacks.lower(`callbacks`), $0
    )
}
    }
    public func `clientPublicKey`() throws -> [UInt8] {
        return try FfiConverterSequenceUInt8.lift(
            try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_client_public_key(self.pointer, $0
    )
}
        )
    }
    public func `clientKeypackages`(`amountRequested`: UInt32) throws -> [[UInt8]] {
        return try FfiConverterSequenceSequenceUInt8.lift(
            try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_client_keypackages(self.pointer, 
        FfiConverterUInt32.lower(`amountRequested`), $0
    )
}
        )
    }
    public func `clientValidKeypackagesCount`() throws -> UInt64 {
        return try FfiConverterUInt64.lift(
            try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_client_valid_keypackages_count(self.pointer, $0
    )
}
        )
    }
    public func `createConversation`(`conversationId`: ConversationId, `config`: ConversationConfiguration) throws {
        try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_create_conversation(self.pointer, 
        FfiConverterTypeConversationId.lower(`conversationId`), 
        FfiConverterTypeConversationConfiguration.lower(`config`), $0
    )
}
    }
    public func `conversationEpoch`(`conversationId`: ConversationId) throws -> UInt64 {
        return try FfiConverterUInt64.lift(
            try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_conversation_epoch(self.pointer, 
        FfiConverterTypeConversationId.lower(`conversationId`), $0
    )
}
        )
    }
    public func `conversationExists`(`conversationId`: ConversationId)  -> Bool {
        return try! FfiConverterBool.lift(
            try!
    rustCall() {
    
    CoreCrypto_3b31_CoreCrypto_conversation_exists(self.pointer, 
        FfiConverterTypeConversationId.lower(`conversationId`), $0
    )
}
        )
    }
    public func `processWelcomeMessage`(`welcomeMessage`: [UInt8], `customConfiguration`: CustomConfiguration) throws -> ConversationId {
        return try FfiConverterTypeConversationId.lift(
            try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_process_welcome_message(self.pointer, 
        FfiConverterSequenceUInt8.lower(`welcomeMessage`), 
        FfiConverterTypeCustomConfiguration.lower(`customConfiguration`), $0
    )
}
        )
    }
    public func `addClientsToConversation`(`conversationId`: ConversationId, `clients`: [Invitee]) throws -> MemberAddedMessages {
        return try FfiConverterTypeMemberAddedMessages.lift(
            try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_add_clients_to_conversation(self.pointer, 
        FfiConverterTypeConversationId.lower(`conversationId`), 
        FfiConverterSequenceTypeInvitee.lower(`clients`), $0
    )
}
        )
    }
    public func `removeClientsFromConversation`(`conversationId`: ConversationId, `clients`: [ClientId]) throws -> CommitBundle {
        return try FfiConverterTypeCommitBundle.lift(
            try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_remove_clients_from_conversation(self.pointer, 
        FfiConverterTypeConversationId.lower(`conversationId`), 
        FfiConverterSequenceTypeClientId.lower(`clients`), $0
    )
}
        )
    }
    public func `markConversationAsChildOf`(`childId`: ConversationId, `parentId`: ConversationId) throws {
        try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_mark_conversation_as_child_of(self.pointer, 
        FfiConverterTypeConversationId.lower(`childId`), 
        FfiConverterTypeConversationId.lower(`parentId`), $0
    )
}
    }
    public func `updateKeyingMaterial`(`conversationId`: ConversationId) throws -> CommitBundle {
        return try FfiConverterTypeCommitBundle.lift(
            try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_update_keying_material(self.pointer, 
        FfiConverterTypeConversationId.lower(`conversationId`), $0
    )
}
        )
    }
    public func `commitPendingProposals`(`conversationId`: ConversationId) throws -> CommitBundle? {
        return try FfiConverterOptionTypeCommitBundle.lift(
            try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_commit_pending_proposals(self.pointer, 
        FfiConverterTypeConversationId.lower(`conversationId`), $0
    )
}
        )
    }
    public func `wipeConversation`(`conversationId`: ConversationId) throws {
        try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_wipe_conversation(self.pointer, 
        FfiConverterTypeConversationId.lower(`conversationId`), $0
    )
}
    }
    public func `decryptMessage`(`conversationId`: ConversationId, `payload`: [UInt8]) throws -> DecryptedMessage {
        return try FfiConverterTypeDecryptedMessage.lift(
            try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_decrypt_message(self.pointer, 
        FfiConverterTypeConversationId.lower(`conversationId`), 
        FfiConverterSequenceUInt8.lower(`payload`), $0
    )
}
        )
    }
    public func `encryptMessage`(`conversationId`: ConversationId, `message`: [UInt8]) throws -> [UInt8] {
        return try FfiConverterSequenceUInt8.lift(
            try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_encrypt_message(self.pointer, 
        FfiConverterTypeConversationId.lower(`conversationId`), 
        FfiConverterSequenceUInt8.lower(`message`), $0
    )
}
        )
    }
    public func `newAddProposal`(`conversationId`: ConversationId, `keyPackage`: [UInt8]) throws -> ProposalBundle {
        return try FfiConverterTypeProposalBundle.lift(
            try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_new_add_proposal(self.pointer, 
        FfiConverterTypeConversationId.lower(`conversationId`), 
        FfiConverterSequenceUInt8.lower(`keyPackage`), $0
    )
}
        )
    }
    public func `newUpdateProposal`(`conversationId`: ConversationId) throws -> ProposalBundle {
        return try FfiConverterTypeProposalBundle.lift(
            try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_new_update_proposal(self.pointer, 
        FfiConverterTypeConversationId.lower(`conversationId`), $0
    )
}
        )
    }
    public func `newRemoveProposal`(`conversationId`: ConversationId, `clientId`: ClientId) throws -> ProposalBundle {
        return try FfiConverterTypeProposalBundle.lift(
            try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_new_remove_proposal(self.pointer, 
        FfiConverterTypeConversationId.lower(`conversationId`), 
        FfiConverterTypeClientId.lower(`clientId`), $0
    )
}
        )
    }
    public func `newExternalAddProposal`(`conversationId`: ConversationId, `epoch`: UInt64) throws -> [UInt8] {
        return try FfiConverterSequenceUInt8.lift(
            try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_new_external_add_proposal(self.pointer, 
        FfiConverterTypeConversationId.lower(`conversationId`), 
        FfiConverterUInt64.lower(`epoch`), $0
    )
}
        )
    }
    public func `newExternalRemoveProposal`(`conversationId`: ConversationId, `epoch`: UInt64, `keyPackageRef`: [UInt8]) throws -> [UInt8] {
        return try FfiConverterSequenceUInt8.lift(
            try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_new_external_remove_proposal(self.pointer, 
        FfiConverterTypeConversationId.lower(`conversationId`), 
        FfiConverterUInt64.lower(`epoch`), 
        FfiConverterSequenceUInt8.lower(`keyPackageRef`), $0
    )
}
        )
    }
    public func `joinByExternalCommit`(`publicGroupState`: [UInt8], `customConfiguration`: CustomConfiguration) throws -> ConversationInitBundle {
        return try FfiConverterTypeConversationInitBundle.lift(
            try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_join_by_external_commit(self.pointer, 
        FfiConverterSequenceUInt8.lower(`publicGroupState`), 
        FfiConverterTypeCustomConfiguration.lower(`customConfiguration`), $0
    )
}
        )
    }
    public func `mergePendingGroupFromExternalCommit`(`conversationId`: ConversationId) throws {
        try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_merge_pending_group_from_external_commit(self.pointer, 
        FfiConverterTypeConversationId.lower(`conversationId`), $0
    )
}
    }
    public func `clearPendingGroupFromExternalCommit`(`conversationId`: ConversationId) throws {
        try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_clear_pending_group_from_external_commit(self.pointer, 
        FfiConverterTypeConversationId.lower(`conversationId`), $0
    )
}
    }
    public func `exportGroupState`(`conversationId`: ConversationId) throws -> [UInt8] {
        return try FfiConverterSequenceUInt8.lift(
            try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_export_group_state(self.pointer, 
        FfiConverterTypeConversationId.lower(`conversationId`), $0
    )
}
        )
    }
    public func `exportSecretKey`(`conversationId`: ConversationId, `keyLength`: UInt32) throws -> [UInt8] {
        return try FfiConverterSequenceUInt8.lift(
            try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_export_secret_key(self.pointer, 
        FfiConverterTypeConversationId.lower(`conversationId`), 
        FfiConverterUInt32.lower(`keyLength`), $0
    )
}
        )
    }
    public func `getClientIds`(`conversationId`: ConversationId) throws -> [ClientId] {
        return try FfiConverterSequenceTypeClientId.lift(
            try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_get_client_ids(self.pointer, 
        FfiConverterTypeConversationId.lower(`conversationId`), $0
    )
}
        )
    }
    public func `randomBytes`(`length`: UInt32) throws -> [UInt8] {
        return try FfiConverterSequenceUInt8.lift(
            try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_random_bytes(self.pointer, 
        FfiConverterUInt32.lower(`length`), $0
    )
}
        )
    }
    public func `reseedRng`(`seed`: [UInt8]) throws {
        try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_reseed_rng(self.pointer, 
        FfiConverterSequenceUInt8.lower(`seed`), $0
    )
}
    }
    public func `commitAccepted`(`conversationId`: ConversationId) throws {
        try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_commit_accepted(self.pointer, 
        FfiConverterTypeConversationId.lower(`conversationId`), $0
    )
}
    }
    public func `clearPendingProposal`(`conversationId`: ConversationId, `proposalRef`: [UInt8]) throws {
        try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_clear_pending_proposal(self.pointer, 
        FfiConverterTypeConversationId.lower(`conversationId`), 
        FfiConverterSequenceUInt8.lower(`proposalRef`), $0
    )
}
    }
    public func `clearPendingCommit`(`conversationId`: ConversationId) throws {
        try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_clear_pending_commit(self.pointer, 
        FfiConverterTypeConversationId.lower(`conversationId`), $0
    )
}
    }
    public func `proteusInit`() throws {
        try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_proteus_init(self.pointer, $0
    )
}
    }
    public func `proteusSessionFromPrekey`(`sessionId`: String, `prekey`: [UInt8]) throws {
        try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_proteus_session_from_prekey(self.pointer, 
        FfiConverterString.lower(`sessionId`), 
        FfiConverterSequenceUInt8.lower(`prekey`), $0
    )
}
    }
    public func `proteusSessionFromMessage`(`sessionId`: String, `envelope`: [UInt8]) throws -> [UInt8] {
        return try FfiConverterSequenceUInt8.lift(
            try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_proteus_session_from_message(self.pointer, 
        FfiConverterString.lower(`sessionId`), 
        FfiConverterSequenceUInt8.lower(`envelope`), $0
    )
}
        )
    }
    public func `proteusSessionSave`(`sessionId`: String) throws {
        try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_proteus_session_save(self.pointer, 
        FfiConverterString.lower(`sessionId`), $0
    )
}
    }
    public func `proteusSessionDelete`(`sessionId`: String) throws {
        try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_proteus_session_delete(self.pointer, 
        FfiConverterString.lower(`sessionId`), $0
    )
}
    }
    public func `proteusSessionExists`(`sessionId`: String) throws -> Bool {
        return try FfiConverterBool.lift(
            try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_proteus_session_exists(self.pointer, 
        FfiConverterString.lower(`sessionId`), $0
    )
}
        )
    }
    public func `proteusDecrypt`(`sessionId`: String, `ciphertext`: [UInt8]) throws -> [UInt8] {
        return try FfiConverterSequenceUInt8.lift(
            try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_proteus_decrypt(self.pointer, 
        FfiConverterString.lower(`sessionId`), 
        FfiConverterSequenceUInt8.lower(`ciphertext`), $0
    )
}
        )
    }
    public func `proteusEncrypt`(`sessionId`: String, `plaintext`: [UInt8]) throws -> [UInt8] {
        return try FfiConverterSequenceUInt8.lift(
            try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_proteus_encrypt(self.pointer, 
        FfiConverterString.lower(`sessionId`), 
        FfiConverterSequenceUInt8.lower(`plaintext`), $0
    )
}
        )
    }
    public func `proteusEncryptBatched`(`sessionId`: [String], `plaintext`: [UInt8]) throws -> [String: [UInt8]] {
        return try FfiConverterDictionaryStringSequenceUInt8.lift(
            try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_proteus_encrypt_batched(self.pointer, 
        FfiConverterSequenceString.lower(`sessionId`), 
        FfiConverterSequenceUInt8.lower(`plaintext`), $0
    )
}
        )
    }
    public func `proteusNewPrekey`(`prekeyId`: UInt16) throws -> [UInt8] {
        return try FfiConverterSequenceUInt8.lift(
            try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_proteus_new_prekey(self.pointer, 
        FfiConverterUInt16.lower(`prekeyId`), $0
    )
}
        )
    }
    public func `proteusNewPrekeyAuto`() throws -> ProteusAutoPrekeyBundle {
        return try FfiConverterTypeProteusAutoPrekeyBundle.lift(
            try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_proteus_new_prekey_auto(self.pointer, $0
    )
}
        )
    }
    public func `proteusLastResortPrekey`() throws -> [UInt8] {
        return try FfiConverterSequenceUInt8.lift(
            try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_proteus_last_resort_prekey(self.pointer, $0
    )
}
        )
    }
    public func `proteusLastResortPrekeyId`() throws -> UInt16 {
        return try FfiConverterUInt16.lift(
            try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_proteus_last_resort_prekey_id(self.pointer, $0
    )
}
        )
    }
    public func `proteusFingerprint`() throws -> String {
        return try FfiConverterString.lift(
            try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_proteus_fingerprint(self.pointer, $0
    )
}
        )
    }
    public func `proteusFingerprintLocal`(`sessionId`: String) throws -> String {
        return try FfiConverterString.lift(
            try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_proteus_fingerprint_local(self.pointer, 
        FfiConverterString.lower(`sessionId`), $0
    )
}
        )
    }
    public func `proteusFingerprintRemote`(`sessionId`: String) throws -> String {
        return try FfiConverterString.lift(
            try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_proteus_fingerprint_remote(self.pointer, 
        FfiConverterString.lower(`sessionId`), $0
    )
}
        )
    }
    public func `proteusFingerprintPrekeybundle`(`prekey`: [UInt8]) throws -> String {
        return try FfiConverterString.lift(
            try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_proteus_fingerprint_prekeybundle(self.pointer, 
        FfiConverterSequenceUInt8.lower(`prekey`), $0
    )
}
        )
    }
    public func `proteusCryptoboxMigrate`(`path`: String) throws {
        try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_proteus_cryptobox_migrate(self.pointer, 
        FfiConverterString.lower(`path`), $0
    )
}
    }
    public func `newAcmeEnrollment`(`ciphersuite`: CiphersuiteName) throws -> WireE2eIdentity {
        return try FfiConverterTypeWireE2eIdentity.lift(
            try
    rustCallWithError(FfiConverterTypeCryptoError.self) {
    CoreCrypto_3b31_CoreCrypto_new_acme_enrollment(self.pointer, 
        FfiConverterTypeCiphersuiteName.lower(`ciphersuite`), $0
    )
}
        )
    }
    public func `proteusLastErrorCode`()  -> UInt32 {
        return try! FfiConverterUInt32.lift(
            try!
    rustCall() {
    
    CoreCrypto_3b31_CoreCrypto_proteus_last_error_code(self.pointer, $0
    )
}
        )
    }
    
}


public struct FfiConverterTypeCoreCrypto: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = CoreCrypto

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CoreCrypto {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: CoreCrypto, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> CoreCrypto {
        return CoreCrypto(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: CoreCrypto) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public protocol WireE2eIdentityProtocol {
    func `directoryResponse`(`directory`: JsonRawData) throws -> AcmeDirectory
    func `newAccountRequest`(`directory`: AcmeDirectory, `previousNonce`: String) throws -> JsonRawData
    func `newAccountResponse`(`account`: JsonRawData) throws -> JsonRawData
    func `newOrderRequest`(`displayName`: String, `clientId`: String, `handle`: String, `expiryDays`: UInt32, `directory`: AcmeDirectory, `account`: AcmeAccount, `previousNonce`: String) throws -> JsonRawData
    func `newOrderResponse`(`order`: JsonRawData) throws -> NewAcmeOrder
    func `newAuthzRequest`(`url`: String, `account`: AcmeAccount, `previousNonce`: String) throws -> JsonRawData
    func `newAuthzResponse`(`authz`: JsonRawData) throws -> NewAcmeAuthz
    func `createDpopToken`(`accessTokenUrl`: String, `clientId`: String, `dpopChallenge`: AcmeChallenge, `backendNonce`: String, `expiryDays`: UInt32) throws -> String
    func `newDpopChallengeRequest`(`accessToken`: String, `dpopChallenge`: AcmeChallenge, `account`: AcmeAccount, `previousNonce`: String) throws -> JsonRawData
    func `newOidcChallengeRequest`(`idToken`: String, `oidcChallenge`: AcmeChallenge, `account`: AcmeAccount, `previousNonce`: String) throws -> JsonRawData
    func `newChallengeResponse`(`challenge`: JsonRawData) throws
    func `checkOrderRequest`(`orderUrl`: String, `account`: AcmeAccount, `previousNonce`: String) throws -> JsonRawData
    func `checkOrderResponse`(`order`: JsonRawData) throws -> AcmeOrder
    func `finalizeRequest`(`order`: AcmeOrder, `account`: AcmeAccount, `previousNonce`: String) throws -> JsonRawData
    func `finalizeResponse`(`finalize`: JsonRawData) throws -> AcmeFinalize
    func `certificateRequest`(`finalize`: AcmeFinalize, `account`: AcmeAccount, `previousNonce`: String) throws -> JsonRawData
    func `certificateResponse`(`certificateChain`: String) throws -> [String]
    
}

public class WireE2eIdentity: WireE2eIdentityProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_CoreCrypto_3b31_WireE2eIdentity_object_free(pointer, $0) }
    }

    

    
    public func `directoryResponse`(`directory`: JsonRawData) throws -> AcmeDirectory {
        return try FfiConverterTypeAcmeDirectory.lift(
            try
    rustCallWithError(FfiConverterTypeE2eIdentityError.self) {
    CoreCrypto_3b31_WireE2eIdentity_directory_response(self.pointer, 
        FfiConverterTypeJsonRawData.lower(`directory`), $0
    )
}
        )
    }
    public func `newAccountRequest`(`directory`: AcmeDirectory, `previousNonce`: String) throws -> JsonRawData {
        return try FfiConverterTypeJsonRawData.lift(
            try
    rustCallWithError(FfiConverterTypeE2eIdentityError.self) {
    CoreCrypto_3b31_WireE2eIdentity_new_account_request(self.pointer, 
        FfiConverterTypeAcmeDirectory.lower(`directory`), 
        FfiConverterString.lower(`previousNonce`), $0
    )
}
        )
    }
    public func `newAccountResponse`(`account`: JsonRawData) throws -> JsonRawData {
        return try FfiConverterTypeJsonRawData.lift(
            try
    rustCallWithError(FfiConverterTypeE2eIdentityError.self) {
    CoreCrypto_3b31_WireE2eIdentity_new_account_response(self.pointer, 
        FfiConverterTypeJsonRawData.lower(`account`), $0
    )
}
        )
    }
    public func `newOrderRequest`(`displayName`: String, `clientId`: String, `handle`: String, `expiryDays`: UInt32, `directory`: AcmeDirectory, `account`: AcmeAccount, `previousNonce`: String) throws -> JsonRawData {
        return try FfiConverterTypeJsonRawData.lift(
            try
    rustCallWithError(FfiConverterTypeE2eIdentityError.self) {
    CoreCrypto_3b31_WireE2eIdentity_new_order_request(self.pointer, 
        FfiConverterString.lower(`displayName`), 
        FfiConverterString.lower(`clientId`), 
        FfiConverterString.lower(`handle`), 
        FfiConverterUInt32.lower(`expiryDays`), 
        FfiConverterTypeAcmeDirectory.lower(`directory`), 
        FfiConverterTypeAcmeAccount.lower(`account`), 
        FfiConverterString.lower(`previousNonce`), $0
    )
}
        )
    }
    public func `newOrderResponse`(`order`: JsonRawData) throws -> NewAcmeOrder {
        return try FfiConverterTypeNewAcmeOrder.lift(
            try
    rustCallWithError(FfiConverterTypeE2eIdentityError.self) {
    CoreCrypto_3b31_WireE2eIdentity_new_order_response(self.pointer, 
        FfiConverterTypeJsonRawData.lower(`order`), $0
    )
}
        )
    }
    public func `newAuthzRequest`(`url`: String, `account`: AcmeAccount, `previousNonce`: String) throws -> JsonRawData {
        return try FfiConverterTypeJsonRawData.lift(
            try
    rustCallWithError(FfiConverterTypeE2eIdentityError.self) {
    CoreCrypto_3b31_WireE2eIdentity_new_authz_request(self.pointer, 
        FfiConverterString.lower(`url`), 
        FfiConverterTypeAcmeAccount.lower(`account`), 
        FfiConverterString.lower(`previousNonce`), $0
    )
}
        )
    }
    public func `newAuthzResponse`(`authz`: JsonRawData) throws -> NewAcmeAuthz {
        return try FfiConverterTypeNewAcmeAuthz.lift(
            try
    rustCallWithError(FfiConverterTypeE2eIdentityError.self) {
    CoreCrypto_3b31_WireE2eIdentity_new_authz_response(self.pointer, 
        FfiConverterTypeJsonRawData.lower(`authz`), $0
    )
}
        )
    }
    public func `createDpopToken`(`accessTokenUrl`: String, `clientId`: String, `dpopChallenge`: AcmeChallenge, `backendNonce`: String, `expiryDays`: UInt32) throws -> String {
        return try FfiConverterString.lift(
            try
    rustCallWithError(FfiConverterTypeE2eIdentityError.self) {
    CoreCrypto_3b31_WireE2eIdentity_create_dpop_token(self.pointer, 
        FfiConverterString.lower(`accessTokenUrl`), 
        FfiConverterString.lower(`clientId`), 
        FfiConverterTypeAcmeChallenge.lower(`dpopChallenge`), 
        FfiConverterString.lower(`backendNonce`), 
        FfiConverterUInt32.lower(`expiryDays`), $0
    )
}
        )
    }
    public func `newDpopChallengeRequest`(`accessToken`: String, `dpopChallenge`: AcmeChallenge, `account`: AcmeAccount, `previousNonce`: String) throws -> JsonRawData {
        return try FfiConverterTypeJsonRawData.lift(
            try
    rustCallWithError(FfiConverterTypeE2eIdentityError.self) {
    CoreCrypto_3b31_WireE2eIdentity_new_dpop_challenge_request(self.pointer, 
        FfiConverterString.lower(`accessToken`), 
        FfiConverterTypeAcmeChallenge.lower(`dpopChallenge`), 
        FfiConverterTypeAcmeAccount.lower(`account`), 
        FfiConverterString.lower(`previousNonce`), $0
    )
}
        )
    }
    public func `newOidcChallengeRequest`(`idToken`: String, `oidcChallenge`: AcmeChallenge, `account`: AcmeAccount, `previousNonce`: String) throws -> JsonRawData {
        return try FfiConverterTypeJsonRawData.lift(
            try
    rustCallWithError(FfiConverterTypeE2eIdentityError.self) {
    CoreCrypto_3b31_WireE2eIdentity_new_oidc_challenge_request(self.pointer, 
        FfiConverterString.lower(`idToken`), 
        FfiConverterTypeAcmeChallenge.lower(`oidcChallenge`), 
        FfiConverterTypeAcmeAccount.lower(`account`), 
        FfiConverterString.lower(`previousNonce`), $0
    )
}
        )
    }
    public func `newChallengeResponse`(`challenge`: JsonRawData) throws {
        try
    rustCallWithError(FfiConverterTypeE2eIdentityError.self) {
    CoreCrypto_3b31_WireE2eIdentity_new_challenge_response(self.pointer, 
        FfiConverterTypeJsonRawData.lower(`challenge`), $0
    )
}
    }
    public func `checkOrderRequest`(`orderUrl`: String, `account`: AcmeAccount, `previousNonce`: String) throws -> JsonRawData {
        return try FfiConverterTypeJsonRawData.lift(
            try
    rustCallWithError(FfiConverterTypeE2eIdentityError.self) {
    CoreCrypto_3b31_WireE2eIdentity_check_order_request(self.pointer, 
        FfiConverterString.lower(`orderUrl`), 
        FfiConverterTypeAcmeAccount.lower(`account`), 
        FfiConverterString.lower(`previousNonce`), $0
    )
}
        )
    }
    public func `checkOrderResponse`(`order`: JsonRawData) throws -> AcmeOrder {
        return try FfiConverterTypeAcmeOrder.lift(
            try
    rustCallWithError(FfiConverterTypeE2eIdentityError.self) {
    CoreCrypto_3b31_WireE2eIdentity_check_order_response(self.pointer, 
        FfiConverterTypeJsonRawData.lower(`order`), $0
    )
}
        )
    }
    public func `finalizeRequest`(`order`: AcmeOrder, `account`: AcmeAccount, `previousNonce`: String) throws -> JsonRawData {
        return try FfiConverterTypeJsonRawData.lift(
            try
    rustCallWithError(FfiConverterTypeE2eIdentityError.self) {
    CoreCrypto_3b31_WireE2eIdentity_finalize_request(self.pointer, 
        FfiConverterTypeAcmeOrder.lower(`order`), 
        FfiConverterTypeAcmeAccount.lower(`account`), 
        FfiConverterString.lower(`previousNonce`), $0
    )
}
        )
    }
    public func `finalizeResponse`(`finalize`: JsonRawData) throws -> AcmeFinalize {
        return try FfiConverterTypeAcmeFinalize.lift(
            try
    rustCallWithError(FfiConverterTypeE2eIdentityError.self) {
    CoreCrypto_3b31_WireE2eIdentity_finalize_response(self.pointer, 
        FfiConverterTypeJsonRawData.lower(`finalize`), $0
    )
}
        )
    }
    public func `certificateRequest`(`finalize`: AcmeFinalize, `account`: AcmeAccount, `previousNonce`: String) throws -> JsonRawData {
        return try FfiConverterTypeJsonRawData.lift(
            try
    rustCallWithError(FfiConverterTypeE2eIdentityError.self) {
    CoreCrypto_3b31_WireE2eIdentity_certificate_request(self.pointer, 
        FfiConverterTypeAcmeFinalize.lower(`finalize`), 
        FfiConverterTypeAcmeAccount.lower(`account`), 
        FfiConverterString.lower(`previousNonce`), $0
    )
}
        )
    }
    public func `certificateResponse`(`certificateChain`: String) throws -> [String] {
        return try FfiConverterSequenceString.lift(
            try
    rustCallWithError(FfiConverterTypeE2eIdentityError.self) {
    CoreCrypto_3b31_WireE2eIdentity_certificate_response(self.pointer, 
        FfiConverterString.lower(`certificateChain`), $0
    )
}
        )
    }
    
}


public struct FfiConverterTypeWireE2eIdentity: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = WireE2eIdentity

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WireE2eIdentity {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: WireE2eIdentity, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> WireE2eIdentity {
        return WireE2eIdentity(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: WireE2eIdentity) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public struct AcmeChallenge {
    public var `delegate`: JsonRawData
    public var `url`: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`delegate`: JsonRawData, `url`: String) {
        self.`delegate` = `delegate`
        self.`url` = `url`
    }
}


extension AcmeChallenge: Equatable, Hashable {
    public static func ==(lhs: AcmeChallenge, rhs: AcmeChallenge) -> Bool {
        if lhs.`delegate` != rhs.`delegate` {
            return false
        }
        if lhs.`url` != rhs.`url` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`delegate`)
        hasher.combine(`url`)
    }
}


public struct FfiConverterTypeAcmeChallenge: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AcmeChallenge {
        return try AcmeChallenge(
            `delegate`: FfiConverterTypeJsonRawData.read(from: &buf), 
            `url`: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: AcmeChallenge, into buf: inout [UInt8]) {
        FfiConverterTypeJsonRawData.write(value.`delegate`, into: &buf)
        FfiConverterString.write(value.`url`, into: &buf)
    }
}


public struct AcmeDirectory {
    public var `newNonce`: String
    public var `newAccount`: String
    public var `newOrder`: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`newNonce`: String, `newAccount`: String, `newOrder`: String) {
        self.`newNonce` = `newNonce`
        self.`newAccount` = `newAccount`
        self.`newOrder` = `newOrder`
    }
}


extension AcmeDirectory: Equatable, Hashable {
    public static func ==(lhs: AcmeDirectory, rhs: AcmeDirectory) -> Bool {
        if lhs.`newNonce` != rhs.`newNonce` {
            return false
        }
        if lhs.`newAccount` != rhs.`newAccount` {
            return false
        }
        if lhs.`newOrder` != rhs.`newOrder` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`newNonce`)
        hasher.combine(`newAccount`)
        hasher.combine(`newOrder`)
    }
}


public struct FfiConverterTypeAcmeDirectory: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AcmeDirectory {
        return try AcmeDirectory(
            `newNonce`: FfiConverterString.read(from: &buf), 
            `newAccount`: FfiConverterString.read(from: &buf), 
            `newOrder`: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: AcmeDirectory, into buf: inout [UInt8]) {
        FfiConverterString.write(value.`newNonce`, into: &buf)
        FfiConverterString.write(value.`newAccount`, into: &buf)
        FfiConverterString.write(value.`newOrder`, into: &buf)
    }
}


public struct AcmeFinalize {
    public var `delegate`: JsonRawData
    public var `certificateUrl`: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`delegate`: JsonRawData, `certificateUrl`: String) {
        self.`delegate` = `delegate`
        self.`certificateUrl` = `certificateUrl`
    }
}


extension AcmeFinalize: Equatable, Hashable {
    public static func ==(lhs: AcmeFinalize, rhs: AcmeFinalize) -> Bool {
        if lhs.`delegate` != rhs.`delegate` {
            return false
        }
        if lhs.`certificateUrl` != rhs.`certificateUrl` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`delegate`)
        hasher.combine(`certificateUrl`)
    }
}


public struct FfiConverterTypeAcmeFinalize: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AcmeFinalize {
        return try AcmeFinalize(
            `delegate`: FfiConverterTypeJsonRawData.read(from: &buf), 
            `certificateUrl`: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: AcmeFinalize, into buf: inout [UInt8]) {
        FfiConverterTypeJsonRawData.write(value.`delegate`, into: &buf)
        FfiConverterString.write(value.`certificateUrl`, into: &buf)
    }
}


public struct CommitBundle {
    public var `welcome`: [UInt8]?
    public var `commit`: [UInt8]
    public var `publicGroupState`: PublicGroupStateBundle

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`welcome`: [UInt8]?, `commit`: [UInt8], `publicGroupState`: PublicGroupStateBundle) {
        self.`welcome` = `welcome`
        self.`commit` = `commit`
        self.`publicGroupState` = `publicGroupState`
    }
}


extension CommitBundle: Equatable, Hashable {
    public static func ==(lhs: CommitBundle, rhs: CommitBundle) -> Bool {
        if lhs.`welcome` != rhs.`welcome` {
            return false
        }
        if lhs.`commit` != rhs.`commit` {
            return false
        }
        if lhs.`publicGroupState` != rhs.`publicGroupState` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`welcome`)
        hasher.combine(`commit`)
        hasher.combine(`publicGroupState`)
    }
}


public struct FfiConverterTypeCommitBundle: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CommitBundle {
        return try CommitBundle(
            `welcome`: FfiConverterOptionSequenceUInt8.read(from: &buf), 
            `commit`: FfiConverterSequenceUInt8.read(from: &buf), 
            `publicGroupState`: FfiConverterTypePublicGroupStateBundle.read(from: &buf)
        )
    }

    public static func write(_ value: CommitBundle, into buf: inout [UInt8]) {
        FfiConverterOptionSequenceUInt8.write(value.`welcome`, into: &buf)
        FfiConverterSequenceUInt8.write(value.`commit`, into: &buf)
        FfiConverterTypePublicGroupStateBundle.write(value.`publicGroupState`, into: &buf)
    }
}


public struct ConversationConfiguration {
    public var `ciphersuite`: CiphersuiteName?
    public var `externalSenders`: [[UInt8]]
    public var `custom`: CustomConfiguration

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`ciphersuite`: CiphersuiteName?, `externalSenders`: [[UInt8]], `custom`: CustomConfiguration) {
        self.`ciphersuite` = `ciphersuite`
        self.`externalSenders` = `externalSenders`
        self.`custom` = `custom`
    }
}


extension ConversationConfiguration: Equatable, Hashable {
    public static func ==(lhs: ConversationConfiguration, rhs: ConversationConfiguration) -> Bool {
        if lhs.`ciphersuite` != rhs.`ciphersuite` {
            return false
        }
        if lhs.`externalSenders` != rhs.`externalSenders` {
            return false
        }
        if lhs.`custom` != rhs.`custom` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`ciphersuite`)
        hasher.combine(`externalSenders`)
        hasher.combine(`custom`)
    }
}


public struct FfiConverterTypeConversationConfiguration: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConversationConfiguration {
        return try ConversationConfiguration(
            `ciphersuite`: FfiConverterOptionTypeCiphersuiteName.read(from: &buf), 
            `externalSenders`: FfiConverterSequenceSequenceUInt8.read(from: &buf), 
            `custom`: FfiConverterTypeCustomConfiguration.read(from: &buf)
        )
    }

    public static func write(_ value: ConversationConfiguration, into buf: inout [UInt8]) {
        FfiConverterOptionTypeCiphersuiteName.write(value.`ciphersuite`, into: &buf)
        FfiConverterSequenceSequenceUInt8.write(value.`externalSenders`, into: &buf)
        FfiConverterTypeCustomConfiguration.write(value.`custom`, into: &buf)
    }
}


public struct ConversationInitBundle {
    public var `conversationId`: [UInt8]
    public var `commit`: [UInt8]
    public var `publicGroupState`: PublicGroupStateBundle

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`conversationId`: [UInt8], `commit`: [UInt8], `publicGroupState`: PublicGroupStateBundle) {
        self.`conversationId` = `conversationId`
        self.`commit` = `commit`
        self.`publicGroupState` = `publicGroupState`
    }
}


extension ConversationInitBundle: Equatable, Hashable {
    public static func ==(lhs: ConversationInitBundle, rhs: ConversationInitBundle) -> Bool {
        if lhs.`conversationId` != rhs.`conversationId` {
            return false
        }
        if lhs.`commit` != rhs.`commit` {
            return false
        }
        if lhs.`publicGroupState` != rhs.`publicGroupState` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`conversationId`)
        hasher.combine(`commit`)
        hasher.combine(`publicGroupState`)
    }
}


public struct FfiConverterTypeConversationInitBundle: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConversationInitBundle {
        return try ConversationInitBundle(
            `conversationId`: FfiConverterSequenceUInt8.read(from: &buf), 
            `commit`: FfiConverterSequenceUInt8.read(from: &buf), 
            `publicGroupState`: FfiConverterTypePublicGroupStateBundle.read(from: &buf)
        )
    }

    public static func write(_ value: ConversationInitBundle, into buf: inout [UInt8]) {
        FfiConverterSequenceUInt8.write(value.`conversationId`, into: &buf)
        FfiConverterSequenceUInt8.write(value.`commit`, into: &buf)
        FfiConverterTypePublicGroupStateBundle.write(value.`publicGroupState`, into: &buf)
    }
}


public struct CustomConfiguration {
    public var `keyRotationSpan`: TimeInterval?
    public var `wirePolicy`: MlsWirePolicy?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`keyRotationSpan`: TimeInterval?, `wirePolicy`: MlsWirePolicy?) {
        self.`keyRotationSpan` = `keyRotationSpan`
        self.`wirePolicy` = `wirePolicy`
    }
}


extension CustomConfiguration: Equatable, Hashable {
    public static func ==(lhs: CustomConfiguration, rhs: CustomConfiguration) -> Bool {
        if lhs.`keyRotationSpan` != rhs.`keyRotationSpan` {
            return false
        }
        if lhs.`wirePolicy` != rhs.`wirePolicy` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`keyRotationSpan`)
        hasher.combine(`wirePolicy`)
    }
}


public struct FfiConverterTypeCustomConfiguration: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CustomConfiguration {
        return try CustomConfiguration(
            `keyRotationSpan`: FfiConverterOptionDuration.read(from: &buf), 
            `wirePolicy`: FfiConverterOptionTypeMlsWirePolicy.read(from: &buf)
        )
    }

    public static func write(_ value: CustomConfiguration, into buf: inout [UInt8]) {
        FfiConverterOptionDuration.write(value.`keyRotationSpan`, into: &buf)
        FfiConverterOptionTypeMlsWirePolicy.write(value.`wirePolicy`, into: &buf)
    }
}


public struct DecryptedMessage {
    public var `message`: [UInt8]?
    public var `proposals`: [ProposalBundle]
    public var `isActive`: Bool
    public var `commitDelay`: UInt64?
    public var `senderClientId`: ClientId?
    public var `hasEpochChanged`: Bool

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`message`: [UInt8]?, `proposals`: [ProposalBundle], `isActive`: Bool, `commitDelay`: UInt64?, `senderClientId`: ClientId?, `hasEpochChanged`: Bool) {
        self.`message` = `message`
        self.`proposals` = `proposals`
        self.`isActive` = `isActive`
        self.`commitDelay` = `commitDelay`
        self.`senderClientId` = `senderClientId`
        self.`hasEpochChanged` = `hasEpochChanged`
    }
}


extension DecryptedMessage: Equatable, Hashable {
    public static func ==(lhs: DecryptedMessage, rhs: DecryptedMessage) -> Bool {
        if lhs.`message` != rhs.`message` {
            return false
        }
        if lhs.`proposals` != rhs.`proposals` {
            return false
        }
        if lhs.`isActive` != rhs.`isActive` {
            return false
        }
        if lhs.`commitDelay` != rhs.`commitDelay` {
            return false
        }
        if lhs.`senderClientId` != rhs.`senderClientId` {
            return false
        }
        if lhs.`hasEpochChanged` != rhs.`hasEpochChanged` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`message`)
        hasher.combine(`proposals`)
        hasher.combine(`isActive`)
        hasher.combine(`commitDelay`)
        hasher.combine(`senderClientId`)
        hasher.combine(`hasEpochChanged`)
    }
}


public struct FfiConverterTypeDecryptedMessage: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DecryptedMessage {
        return try DecryptedMessage(
            `message`: FfiConverterOptionSequenceUInt8.read(from: &buf), 
            `proposals`: FfiConverterSequenceTypeProposalBundle.read(from: &buf), 
            `isActive`: FfiConverterBool.read(from: &buf), 
            `commitDelay`: FfiConverterOptionUInt64.read(from: &buf), 
            `senderClientId`: FfiConverterOptionTypeClientId.read(from: &buf), 
            `hasEpochChanged`: FfiConverterBool.read(from: &buf)
        )
    }

    public static func write(_ value: DecryptedMessage, into buf: inout [UInt8]) {
        FfiConverterOptionSequenceUInt8.write(value.`message`, into: &buf)
        FfiConverterSequenceTypeProposalBundle.write(value.`proposals`, into: &buf)
        FfiConverterBool.write(value.`isActive`, into: &buf)
        FfiConverterOptionUInt64.write(value.`commitDelay`, into: &buf)
        FfiConverterOptionTypeClientId.write(value.`senderClientId`, into: &buf)
        FfiConverterBool.write(value.`hasEpochChanged`, into: &buf)
    }
}


public struct Invitee {
    public var `id`: ClientId
    public var `kp`: [UInt8]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`id`: ClientId, `kp`: [UInt8]) {
        self.`id` = `id`
        self.`kp` = `kp`
    }
}


extension Invitee: Equatable, Hashable {
    public static func ==(lhs: Invitee, rhs: Invitee) -> Bool {
        if lhs.`id` != rhs.`id` {
            return false
        }
        if lhs.`kp` != rhs.`kp` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`id`)
        hasher.combine(`kp`)
    }
}


public struct FfiConverterTypeInvitee: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Invitee {
        return try Invitee(
            `id`: FfiConverterTypeClientId.read(from: &buf), 
            `kp`: FfiConverterSequenceUInt8.read(from: &buf)
        )
    }

    public static func write(_ value: Invitee, into buf: inout [UInt8]) {
        FfiConverterTypeClientId.write(value.`id`, into: &buf)
        FfiConverterSequenceUInt8.write(value.`kp`, into: &buf)
    }
}


public struct MemberAddedMessages {
    public var `commit`: [UInt8]
    public var `welcome`: [UInt8]
    public var `publicGroupState`: PublicGroupStateBundle

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`commit`: [UInt8], `welcome`: [UInt8], `publicGroupState`: PublicGroupStateBundle) {
        self.`commit` = `commit`
        self.`welcome` = `welcome`
        self.`publicGroupState` = `publicGroupState`
    }
}


extension MemberAddedMessages: Equatable, Hashable {
    public static func ==(lhs: MemberAddedMessages, rhs: MemberAddedMessages) -> Bool {
        if lhs.`commit` != rhs.`commit` {
            return false
        }
        if lhs.`welcome` != rhs.`welcome` {
            return false
        }
        if lhs.`publicGroupState` != rhs.`publicGroupState` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`commit`)
        hasher.combine(`welcome`)
        hasher.combine(`publicGroupState`)
    }
}


public struct FfiConverterTypeMemberAddedMessages: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MemberAddedMessages {
        return try MemberAddedMessages(
            `commit`: FfiConverterSequenceUInt8.read(from: &buf), 
            `welcome`: FfiConverterSequenceUInt8.read(from: &buf), 
            `publicGroupState`: FfiConverterTypePublicGroupStateBundle.read(from: &buf)
        )
    }

    public static func write(_ value: MemberAddedMessages, into buf: inout [UInt8]) {
        FfiConverterSequenceUInt8.write(value.`commit`, into: &buf)
        FfiConverterSequenceUInt8.write(value.`welcome`, into: &buf)
        FfiConverterTypePublicGroupStateBundle.write(value.`publicGroupState`, into: &buf)
    }
}


public struct NewAcmeAuthz {
    public var `identifier`: String
    public var `wireDpopChallenge`: AcmeChallenge?
    public var `wireOidcChallenge`: AcmeChallenge?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`identifier`: String, `wireDpopChallenge`: AcmeChallenge?, `wireOidcChallenge`: AcmeChallenge?) {
        self.`identifier` = `identifier`
        self.`wireDpopChallenge` = `wireDpopChallenge`
        self.`wireOidcChallenge` = `wireOidcChallenge`
    }
}


extension NewAcmeAuthz: Equatable, Hashable {
    public static func ==(lhs: NewAcmeAuthz, rhs: NewAcmeAuthz) -> Bool {
        if lhs.`identifier` != rhs.`identifier` {
            return false
        }
        if lhs.`wireDpopChallenge` != rhs.`wireDpopChallenge` {
            return false
        }
        if lhs.`wireOidcChallenge` != rhs.`wireOidcChallenge` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`identifier`)
        hasher.combine(`wireDpopChallenge`)
        hasher.combine(`wireOidcChallenge`)
    }
}


public struct FfiConverterTypeNewAcmeAuthz: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NewAcmeAuthz {
        return try NewAcmeAuthz(
            `identifier`: FfiConverterString.read(from: &buf), 
            `wireDpopChallenge`: FfiConverterOptionTypeAcmeChallenge.read(from: &buf), 
            `wireOidcChallenge`: FfiConverterOptionTypeAcmeChallenge.read(from: &buf)
        )
    }

    public static func write(_ value: NewAcmeAuthz, into buf: inout [UInt8]) {
        FfiConverterString.write(value.`identifier`, into: &buf)
        FfiConverterOptionTypeAcmeChallenge.write(value.`wireDpopChallenge`, into: &buf)
        FfiConverterOptionTypeAcmeChallenge.write(value.`wireOidcChallenge`, into: &buf)
    }
}


public struct NewAcmeOrder {
    public var `delegate`: JsonRawData
    public var `authorizations`: [String]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`delegate`: JsonRawData, `authorizations`: [String]) {
        self.`delegate` = `delegate`
        self.`authorizations` = `authorizations`
    }
}


extension NewAcmeOrder: Equatable, Hashable {
    public static func ==(lhs: NewAcmeOrder, rhs: NewAcmeOrder) -> Bool {
        if lhs.`delegate` != rhs.`delegate` {
            return false
        }
        if lhs.`authorizations` != rhs.`authorizations` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`delegate`)
        hasher.combine(`authorizations`)
    }
}


public struct FfiConverterTypeNewAcmeOrder: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NewAcmeOrder {
        return try NewAcmeOrder(
            `delegate`: FfiConverterTypeJsonRawData.read(from: &buf), 
            `authorizations`: FfiConverterSequenceString.read(from: &buf)
        )
    }

    public static func write(_ value: NewAcmeOrder, into buf: inout [UInt8]) {
        FfiConverterTypeJsonRawData.write(value.`delegate`, into: &buf)
        FfiConverterSequenceString.write(value.`authorizations`, into: &buf)
    }
}


public struct ProposalBundle {
    public var `proposal`: [UInt8]
    public var `proposalRef`: [UInt8]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`proposal`: [UInt8], `proposalRef`: [UInt8]) {
        self.`proposal` = `proposal`
        self.`proposalRef` = `proposalRef`
    }
}


extension ProposalBundle: Equatable, Hashable {
    public static func ==(lhs: ProposalBundle, rhs: ProposalBundle) -> Bool {
        if lhs.`proposal` != rhs.`proposal` {
            return false
        }
        if lhs.`proposalRef` != rhs.`proposalRef` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`proposal`)
        hasher.combine(`proposalRef`)
    }
}


public struct FfiConverterTypeProposalBundle: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ProposalBundle {
        return try ProposalBundle(
            `proposal`: FfiConverterSequenceUInt8.read(from: &buf), 
            `proposalRef`: FfiConverterSequenceUInt8.read(from: &buf)
        )
    }

    public static func write(_ value: ProposalBundle, into buf: inout [UInt8]) {
        FfiConverterSequenceUInt8.write(value.`proposal`, into: &buf)
        FfiConverterSequenceUInt8.write(value.`proposalRef`, into: &buf)
    }
}


public struct ProteusAutoPrekeyBundle {
    public var `id`: UInt16
    public var `pkb`: [UInt8]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`id`: UInt16, `pkb`: [UInt8]) {
        self.`id` = `id`
        self.`pkb` = `pkb`
    }
}


extension ProteusAutoPrekeyBundle: Equatable, Hashable {
    public static func ==(lhs: ProteusAutoPrekeyBundle, rhs: ProteusAutoPrekeyBundle) -> Bool {
        if lhs.`id` != rhs.`id` {
            return false
        }
        if lhs.`pkb` != rhs.`pkb` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`id`)
        hasher.combine(`pkb`)
    }
}


public struct FfiConverterTypeProteusAutoPrekeyBundle: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ProteusAutoPrekeyBundle {
        return try ProteusAutoPrekeyBundle(
            `id`: FfiConverterUInt16.read(from: &buf), 
            `pkb`: FfiConverterSequenceUInt8.read(from: &buf)
        )
    }

    public static func write(_ value: ProteusAutoPrekeyBundle, into buf: inout [UInt8]) {
        FfiConverterUInt16.write(value.`id`, into: &buf)
        FfiConverterSequenceUInt8.write(value.`pkb`, into: &buf)
    }
}


public struct PublicGroupStateBundle {
    public var `encryptionType`: MlsPublicGroupStateEncryptionType
    public var `ratchetTreeType`: MlsRatchetTreeType
    public var `payload`: [UInt8]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`encryptionType`: MlsPublicGroupStateEncryptionType, `ratchetTreeType`: MlsRatchetTreeType, `payload`: [UInt8]) {
        self.`encryptionType` = `encryptionType`
        self.`ratchetTreeType` = `ratchetTreeType`
        self.`payload` = `payload`
    }
}


extension PublicGroupStateBundle: Equatable, Hashable {
    public static func ==(lhs: PublicGroupStateBundle, rhs: PublicGroupStateBundle) -> Bool {
        if lhs.`encryptionType` != rhs.`encryptionType` {
            return false
        }
        if lhs.`ratchetTreeType` != rhs.`ratchetTreeType` {
            return false
        }
        if lhs.`payload` != rhs.`payload` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`encryptionType`)
        hasher.combine(`ratchetTreeType`)
        hasher.combine(`payload`)
    }
}


public struct FfiConverterTypePublicGroupStateBundle: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PublicGroupStateBundle {
        return try PublicGroupStateBundle(
            `encryptionType`: FfiConverterTypeMlsPublicGroupStateEncryptionType.read(from: &buf), 
            `ratchetTreeType`: FfiConverterTypeMlsRatchetTreeType.read(from: &buf), 
            `payload`: FfiConverterSequenceUInt8.read(from: &buf)
        )
    }

    public static func write(_ value: PublicGroupStateBundle, into buf: inout [UInt8]) {
        FfiConverterTypeMlsPublicGroupStateEncryptionType.write(value.`encryptionType`, into: &buf)
        FfiConverterTypeMlsRatchetTreeType.write(value.`ratchetTreeType`, into: &buf)
        FfiConverterSequenceUInt8.write(value.`payload`, into: &buf)
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum CiphersuiteName {
    
    case `mls128Dhkemx25519Aes128gcmSha256Ed25519`
    case `mls128Dhkemp256Aes128gcmSha256P256`
    case `mls128Dhkemx25519Chacha20poly1305Sha256Ed25519`
    case `mls256Dhkemx448Aes256gcmSha512Ed448`
    case `mls256Dhkemp521Aes256gcmSha512P521`
    case `mls256Dhkemx448Chacha20poly1305Sha512Ed448`
    case `mls256Dhkemp384Aes256gcmSha384P384`
}

public struct FfiConverterTypeCiphersuiteName: FfiConverterRustBuffer {
    typealias SwiftType = CiphersuiteName

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CiphersuiteName {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`mls128Dhkemx25519Aes128gcmSha256Ed25519`
        
        case 2: return .`mls128Dhkemp256Aes128gcmSha256P256`
        
        case 3: return .`mls128Dhkemx25519Chacha20poly1305Sha256Ed25519`
        
        case 4: return .`mls256Dhkemx448Aes256gcmSha512Ed448`
        
        case 5: return .`mls256Dhkemp521Aes256gcmSha512P521`
        
        case 6: return .`mls256Dhkemx448Chacha20poly1305Sha512Ed448`
        
        case 7: return .`mls256Dhkemp384Aes256gcmSha384P384`
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: CiphersuiteName, into buf: inout [UInt8]) {
        switch value {
        
        
        case .`mls128Dhkemx25519Aes128gcmSha256Ed25519`:
            writeInt(&buf, Int32(1))
        
        
        case .`mls128Dhkemp256Aes128gcmSha256P256`:
            writeInt(&buf, Int32(2))
        
        
        case .`mls128Dhkemx25519Chacha20poly1305Sha256Ed25519`:
            writeInt(&buf, Int32(3))
        
        
        case .`mls256Dhkemx448Aes256gcmSha512Ed448`:
            writeInt(&buf, Int32(4))
        
        
        case .`mls256Dhkemp521Aes256gcmSha512P521`:
            writeInt(&buf, Int32(5))
        
        
        case .`mls256Dhkemx448Chacha20poly1305Sha512Ed448`:
            writeInt(&buf, Int32(6))
        
        
        case .`mls256Dhkemp384Aes256gcmSha384P384`:
            writeInt(&buf, Int32(7))
        
        }
    }
}


extension CiphersuiteName: Equatable, Hashable {}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum MlsPublicGroupStateEncryptionType {
    
    case `plaintext`
    case `jweEncrypted`
}

public struct FfiConverterTypeMlsPublicGroupStateEncryptionType: FfiConverterRustBuffer {
    typealias SwiftType = MlsPublicGroupStateEncryptionType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MlsPublicGroupStateEncryptionType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`plaintext`
        
        case 2: return .`jweEncrypted`
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: MlsPublicGroupStateEncryptionType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .`plaintext`:
            writeInt(&buf, Int32(1))
        
        
        case .`jweEncrypted`:
            writeInt(&buf, Int32(2))
        
        }
    }
}


extension MlsPublicGroupStateEncryptionType: Equatable, Hashable {}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum MlsRatchetTreeType {
    
    case `full`
    case `delta`
    case `byRef`
}

public struct FfiConverterTypeMlsRatchetTreeType: FfiConverterRustBuffer {
    typealias SwiftType = MlsRatchetTreeType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MlsRatchetTreeType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`full`
        
        case 2: return .`delta`
        
        case 3: return .`byRef`
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: MlsRatchetTreeType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .`full`:
            writeInt(&buf, Int32(1))
        
        
        case .`delta`:
            writeInt(&buf, Int32(2))
        
        
        case .`byRef`:
            writeInt(&buf, Int32(3))
        
        }
    }
}


extension MlsRatchetTreeType: Equatable, Hashable {}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum MlsWirePolicy {
    
    case `plaintext`
    case `ciphertext`
}

public struct FfiConverterTypeMlsWirePolicy: FfiConverterRustBuffer {
    typealias SwiftType = MlsWirePolicy

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MlsWirePolicy {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`plaintext`
        
        case 2: return .`ciphertext`
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: MlsWirePolicy, into buf: inout [UInt8]) {
        switch value {
        
        
        case .`plaintext`:
            writeInt(&buf, Int32(1))
        
        
        case .`ciphertext`:
            writeInt(&buf, Int32(2))
        
        }
    }
}


extension MlsWirePolicy: Equatable, Hashable {}



public enum CryptoError {

    
    
    // Simple error enums only carry a message
    case ConversationNotFound(message: String)
    
    // Simple error enums only carry a message
    case ClientNotFound(message: String)
    
    // Simple error enums only carry a message
    case PendingProposalNotFound(message: String)
    
    // Simple error enums only carry a message
    case PendingCommitNotFound(message: String)
    
    // Simple error enums only carry a message
    case MalformedIdentifier(message: String)
    
    // Simple error enums only carry a message
    case ClientSignatureNotFound(message: String)
    
    // Simple error enums only carry a message
    case ClientSignatureMismatch(message: String)
    
    // Simple error enums only carry a message
    case LockPoisonError(message: String)
    
    // Simple error enums only carry a message
    case ImplementationError(message: String)
    
    // Simple error enums only carry a message
    case OutOfKeyPackage(message: String)
    
    // Simple error enums only carry a message
    case MlsProviderError(message: String)
    
    // Simple error enums only carry a message
    case KeyStoreError(message: String)
    
    // Simple error enums only carry a message
    case MlsError(message: String)
    
    // Simple error enums only carry a message
    case Utf8Error(message: String)
    
    // Simple error enums only carry a message
    case StringUtf8Error(message: String)
    
    // Simple error enums only carry a message
    case ParseIntError(message: String)
    
    // Simple error enums only carry a message
    case ConvertIntError(message: String)
    
    // Simple error enums only carry a message
    case InvalidByteArrayError(message: String)
    
    // Simple error enums only carry a message
    case IoError(message: String)
    
    // Simple error enums only carry a message
    case Unauthorized(message: String)
    
    // Simple error enums only carry a message
    case CallbacksNotSet(message: String)
    
    // Simple error enums only carry a message
    case UnauthorizedExternalAddProposal(message: String)
    
    // Simple error enums only carry a message
    case UnauthorizedExternalCommit(message: String)
    
    // Simple error enums only carry a message
    case InvalidHashReference(message: String)
    
    // Simple error enums only carry a message
    case GenerationOutOfBound(message: String)
    
    // Simple error enums only carry a message
    case WrongEpoch(message: String)
    
    // Simple error enums only carry a message
    case DecryptionError(message: String)
    
    // Simple error enums only carry a message
    case HexDecodeError(message: String)
    
    // Simple error enums only carry a message
    case ProteusError(message: String)
    
    // Simple error enums only carry a message
    case CryptoboxMigrationError(message: String)
    
    // Simple error enums only carry a message
    case ProteusNotInitialized(message: String)
    
    // Simple error enums only carry a message
    case ProteusSupportNotEnabled(message: String)
    
    // Simple error enums only carry a message
    case MlsNotInitialized(message: String)
    
    // Simple error enums only carry a message
    case InvalidKeyPackage(message: String)
    
    // Simple error enums only carry a message
    case IdentityAlreadyPresent(message: String)
    
    // Simple error enums only carry a message
    case NoProvisionalIdentityFound(message: String)
    
    // Simple error enums only carry a message
    case TooManyIdentitiesPresent(message: String)
    
    // Simple error enums only carry a message
    case ParentGroupNotFound(message: String)
    
}

public struct FfiConverterTypeCryptoError: FfiConverterRustBuffer {
    typealias SwiftType = CryptoError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CryptoError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .ConversationNotFound(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .ClientNotFound(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .PendingProposalNotFound(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .PendingCommitNotFound(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .MalformedIdentifier(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 6: return .ClientSignatureNotFound(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 7: return .ClientSignatureMismatch(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 8: return .LockPoisonError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 9: return .ImplementationError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 10: return .OutOfKeyPackage(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 11: return .MlsProviderError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 12: return .KeyStoreError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 13: return .MlsError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 14: return .Utf8Error(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 15: return .StringUtf8Error(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 16: return .ParseIntError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 17: return .ConvertIntError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 18: return .InvalidByteArrayError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 19: return .IoError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 20: return .Unauthorized(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 21: return .CallbacksNotSet(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 22: return .UnauthorizedExternalAddProposal(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 23: return .UnauthorizedExternalCommit(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 24: return .InvalidHashReference(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 25: return .GenerationOutOfBound(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 26: return .WrongEpoch(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 27: return .DecryptionError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 28: return .HexDecodeError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 29: return .ProteusError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 30: return .CryptoboxMigrationError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 31: return .ProteusNotInitialized(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 32: return .ProteusSupportNotEnabled(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 33: return .MlsNotInitialized(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 34: return .InvalidKeyPackage(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 35: return .IdentityAlreadyPresent(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 36: return .NoProvisionalIdentityFound(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 37: return .TooManyIdentitiesPresent(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 38: return .ParentGroupNotFound(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: CryptoError, into buf: inout [UInt8]) {
        switch value {

        

        
        case let .ConversationNotFound(message):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(message, into: &buf)
        case let .ClientNotFound(message):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(message, into: &buf)
        case let .PendingProposalNotFound(message):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(message, into: &buf)
        case let .PendingCommitNotFound(message):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(message, into: &buf)
        case let .MalformedIdentifier(message):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(message, into: &buf)
        case let .ClientSignatureNotFound(message):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(message, into: &buf)
        case let .ClientSignatureMismatch(message):
            writeInt(&buf, Int32(7))
            FfiConverterString.write(message, into: &buf)
        case let .LockPoisonError(message):
            writeInt(&buf, Int32(8))
            FfiConverterString.write(message, into: &buf)
        case let .ImplementationError(message):
            writeInt(&buf, Int32(9))
            FfiConverterString.write(message, into: &buf)
        case let .OutOfKeyPackage(message):
            writeInt(&buf, Int32(10))
            FfiConverterString.write(message, into: &buf)
        case let .MlsProviderError(message):
            writeInt(&buf, Int32(11))
            FfiConverterString.write(message, into: &buf)
        case let .KeyStoreError(message):
            writeInt(&buf, Int32(12))
            FfiConverterString.write(message, into: &buf)
        case let .MlsError(message):
            writeInt(&buf, Int32(13))
            FfiConverterString.write(message, into: &buf)
        case let .Utf8Error(message):
            writeInt(&buf, Int32(14))
            FfiConverterString.write(message, into: &buf)
        case let .StringUtf8Error(message):
            writeInt(&buf, Int32(15))
            FfiConverterString.write(message, into: &buf)
        case let .ParseIntError(message):
            writeInt(&buf, Int32(16))
            FfiConverterString.write(message, into: &buf)
        case let .ConvertIntError(message):
            writeInt(&buf, Int32(17))
            FfiConverterString.write(message, into: &buf)
        case let .InvalidByteArrayError(message):
            writeInt(&buf, Int32(18))
            FfiConverterString.write(message, into: &buf)
        case let .IoError(message):
            writeInt(&buf, Int32(19))
            FfiConverterString.write(message, into: &buf)
        case let .Unauthorized(message):
            writeInt(&buf, Int32(20))
            FfiConverterString.write(message, into: &buf)
        case let .CallbacksNotSet(message):
            writeInt(&buf, Int32(21))
            FfiConverterString.write(message, into: &buf)
        case let .UnauthorizedExternalAddProposal(message):
            writeInt(&buf, Int32(22))
            FfiConverterString.write(message, into: &buf)
        case let .UnauthorizedExternalCommit(message):
            writeInt(&buf, Int32(23))
            FfiConverterString.write(message, into: &buf)
        case let .InvalidHashReference(message):
            writeInt(&buf, Int32(24))
            FfiConverterString.write(message, into: &buf)
        case let .GenerationOutOfBound(message):
            writeInt(&buf, Int32(25))
            FfiConverterString.write(message, into: &buf)
        case let .WrongEpoch(message):
            writeInt(&buf, Int32(26))
            FfiConverterString.write(message, into: &buf)
        case let .DecryptionError(message):
            writeInt(&buf, Int32(27))
            FfiConverterString.write(message, into: &buf)
        case let .HexDecodeError(message):
            writeInt(&buf, Int32(28))
            FfiConverterString.write(message, into: &buf)
        case let .ProteusError(message):
            writeInt(&buf, Int32(29))
            FfiConverterString.write(message, into: &buf)
        case let .CryptoboxMigrationError(message):
            writeInt(&buf, Int32(30))
            FfiConverterString.write(message, into: &buf)
        case let .ProteusNotInitialized(message):
            writeInt(&buf, Int32(31))
            FfiConverterString.write(message, into: &buf)
        case let .ProteusSupportNotEnabled(message):
            writeInt(&buf, Int32(32))
            FfiConverterString.write(message, into: &buf)
        case let .MlsNotInitialized(message):
            writeInt(&buf, Int32(33))
            FfiConverterString.write(message, into: &buf)
        case let .InvalidKeyPackage(message):
            writeInt(&buf, Int32(34))
            FfiConverterString.write(message, into: &buf)
        case let .IdentityAlreadyPresent(message):
            writeInt(&buf, Int32(35))
            FfiConverterString.write(message, into: &buf)
        case let .NoProvisionalIdentityFound(message):
            writeInt(&buf, Int32(36))
            FfiConverterString.write(message, into: &buf)
        case let .TooManyIdentitiesPresent(message):
            writeInt(&buf, Int32(37))
            FfiConverterString.write(message, into: &buf)
        case let .ParentGroupNotFound(message):
            writeInt(&buf, Int32(38))
            FfiConverterString.write(message, into: &buf)

        
        }
    }
}


extension CryptoError: Equatable, Hashable {}

extension CryptoError: Error { }


public enum E2eIdentityError {

    
    
    // Simple error enums only carry a message
    case NotYetSupported(message: String)
    
    // Simple error enums only carry a message
    case CryptoError(message: String)
    
    // Simple error enums only carry a message
    case IdentityError(message: String)
    
    // Simple error enums only carry a message
    case UrlError(message: String)
    
    // Simple error enums only carry a message
    case JsonError(message: String)
    
    // Simple error enums only carry a message
    case E2eiInvalidDomain(message: String)
    
    // Simple error enums only carry a message
    case Utf8Error(message: String)
    
}

public struct FfiConverterTypeE2eIdentityError: FfiConverterRustBuffer {
    typealias SwiftType = E2eIdentityError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> E2eIdentityError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .NotYetSupported(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .CryptoError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .IdentityError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .UrlError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .JsonError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 6: return .E2eiInvalidDomain(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 7: return .Utf8Error(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: E2eIdentityError, into buf: inout [UInt8]) {
        switch value {

        

        
        case let .NotYetSupported(message):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(message, into: &buf)
        case let .CryptoError(message):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(message, into: &buf)
        case let .IdentityError(message):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(message, into: &buf)
        case let .UrlError(message):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(message, into: &buf)
        case let .JsonError(message):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(message, into: &buf)
        case let .E2eiInvalidDomain(message):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(message, into: &buf)
        case let .Utf8Error(message):
            writeInt(&buf, Int32(7))
            FfiConverterString.write(message, into: &buf)

        
        }
    }
}


extension E2eIdentityError: Equatable, Hashable {}

extension E2eIdentityError: Error { }

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate typealias UniFFICallbackHandle = UInt64
fileprivate class UniFFICallbackHandleMap<T> {
    private var leftMap: [UniFFICallbackHandle: T] = [:]
    private var counter: [UniFFICallbackHandle: UInt64] = [:]
    private var rightMap: [ObjectIdentifier: UniFFICallbackHandle] = [:]

    private let lock = NSLock()
    private var currentHandle: UniFFICallbackHandle = 0
    private let stride: UniFFICallbackHandle = 1

    func insert(obj: T) -> UniFFICallbackHandle {
        lock.withLock {
            let id = ObjectIdentifier(obj as AnyObject)
            let handle = rightMap[id] ?? {
                currentHandle += stride
                let handle = currentHandle
                leftMap[handle] = obj
                rightMap[id] = handle
                return handle
            }()
            counter[handle] = (counter[handle] ?? 0) + 1
            return handle
        }
    }

    func get(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            leftMap[handle]
        }
    }

    func delete(handle: UniFFICallbackHandle) {
        remove(handle: handle)
    }

    @discardableResult
    func remove(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            defer { counter[handle] = (counter[handle] ?? 1) - 1 }
            guard counter[handle] == 1 else { return leftMap[handle] }
            let obj = leftMap.removeValue(forKey: handle)
            if let obj = obj {
                rightMap.removeValue(forKey: ObjectIdentifier(obj as AnyObject))
            }
            return obj
        }
    }
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0

// Declaration and FfiConverters for CoreCryptoCallbacks Callback Interface

public protocol CoreCryptoCallbacks : AnyObject {
    func `authorize`(`conversationId`: ConversationId, `clientId`: ClientId)  -> Bool
    func `userAuthorize`(`conversationId`: ConversationId, `externalClientId`: ClientId, `existingClients`: [ClientId])  -> Bool
    func `clientIsExistingGroupUser`(`conversationId`: ConversationId, `clientId`: ClientId, `existingClients`: [ClientId], `parentConversationClients`: [ClientId]?)  -> Bool
    
}

// The ForeignCallback that is passed to Rust.
fileprivate let foreignCallbackCallbackInterfaceCoreCryptoCallbacks : ForeignCallback =
    { (handle: UniFFICallbackHandle, method: Int32, args: RustBuffer, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in
        func `invokeAuthorize`(_ swiftCallbackInterface: CoreCryptoCallbacks, _ args: RustBuffer) throws -> RustBuffer {
        defer { args.deallocate() }

            var reader = createReader(data: Data(rustBuffer: args))
            let result = swiftCallbackInterface.`authorize`(
                    `conversationId`:  try FfiConverterTypeConversationId.read(from: &reader), 
                    `clientId`:  try FfiConverterTypeClientId.read(from: &reader)
                    )
            var writer = [UInt8]()
                FfiConverterBool.write(result, into: &writer)
                return RustBuffer(bytes: writer)// TODO catch errors and report them back to Rust.
                // https://github.com/mozilla/uniffi-rs/issues/351

        }
        func `invokeUserAuthorize`(_ swiftCallbackInterface: CoreCryptoCallbacks, _ args: RustBuffer) throws -> RustBuffer {
        defer { args.deallocate() }

            var reader = createReader(data: Data(rustBuffer: args))
            let result = swiftCallbackInterface.`userAuthorize`(
                    `conversationId`:  try FfiConverterTypeConversationId.read(from: &reader), 
                    `externalClientId`:  try FfiConverterTypeClientId.read(from: &reader), 
                    `existingClients`:  try FfiConverterSequenceTypeClientId.read(from: &reader)
                    )
            var writer = [UInt8]()
                FfiConverterBool.write(result, into: &writer)
                return RustBuffer(bytes: writer)// TODO catch errors and report them back to Rust.
                // https://github.com/mozilla/uniffi-rs/issues/351

        }
        func `invokeClientIsExistingGroupUser`(_ swiftCallbackInterface: CoreCryptoCallbacks, _ args: RustBuffer) throws -> RustBuffer {
        defer { args.deallocate() }

            var reader = createReader(data: Data(rustBuffer: args))
            let result = swiftCallbackInterface.`clientIsExistingGroupUser`(
                    `conversationId`:  try FfiConverterTypeConversationId.read(from: &reader), 
                    `clientId`:  try FfiConverterTypeClientId.read(from: &reader), 
                    `existingClients`:  try FfiConverterSequenceTypeClientId.read(from: &reader), 
                    `parentConversationClients`:  try FfiConverterOptionSequenceTypeClientId.read(from: &reader)
                    )
            var writer = [UInt8]()
                FfiConverterBool.write(result, into: &writer)
                return RustBuffer(bytes: writer)// TODO catch errors and report them back to Rust.
                // https://github.com/mozilla/uniffi-rs/issues/351

        }
        

        let cb: CoreCryptoCallbacks
        do {
            cb = try FfiConverterCallbackInterfaceCoreCryptoCallbacks.lift(handle)
        } catch {
            out_buf.pointee = FfiConverterString.lower("CoreCryptoCallbacks: Invalid handle")
            return -1
        }

        switch method {
            case IDX_CALLBACK_FREE:
                FfiConverterCallbackInterfaceCoreCryptoCallbacks.drop(handle: handle)
                // No return value.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                return 0
            case 1:
                do {
                    out_buf.pointee = try `invokeAuthorize`(cb, args)
                    // Value written to out buffer.
                    // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                    return 1
                } catch let error {
                    out_buf.pointee = FfiConverterString.lower(String(describing: error))
                    return -1
                }
            case 2:
                do {
                    out_buf.pointee = try `invokeUserAuthorize`(cb, args)
                    // Value written to out buffer.
                    // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                    return 1
                } catch let error {
                    out_buf.pointee = FfiConverterString.lower(String(describing: error))
                    return -1
                }
            case 3:
                do {
                    out_buf.pointee = try `invokeClientIsExistingGroupUser`(cb, args)
                    // Value written to out buffer.
                    // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                    return 1
                } catch let error {
                    out_buf.pointee = FfiConverterString.lower(String(describing: error))
                    return -1
                }
            
            // This should never happen, because an out of bounds method index won't
            // ever be used. Once we can catch errors, we should return an InternalError.
            // https://github.com/mozilla/uniffi-rs/issues/351
            default:
                // An unexpected error happened.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                return -1
        }
    }

// FfiConverter protocol for callback interfaces
fileprivate struct FfiConverterCallbackInterfaceCoreCryptoCallbacks {
    // Initialize our callback method with the scaffolding code
    private static var callbackInitialized = false
    private static func initCallback() {
        try! rustCall { (err: UnsafeMutablePointer<RustCallStatus>) in
                ffi_CoreCrypto_3b31_CoreCryptoCallbacks_init_callback(foreignCallbackCallbackInterfaceCoreCryptoCallbacks, err)
        }
    }
    private static func ensureCallbackinitialized() {
        if !callbackInitialized {
            initCallback()
            callbackInitialized = true
        }
    }

    static func drop(handle: UniFFICallbackHandle) {
        handleMap.remove(handle: handle)
    }

    private static var handleMap = UniFFICallbackHandleMap<CoreCryptoCallbacks>()
}

extension FfiConverterCallbackInterfaceCoreCryptoCallbacks : FfiConverter {
    typealias SwiftType = CoreCryptoCallbacks
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        ensureCallbackinitialized();
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        ensureCallbackinitialized();
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        ensureCallbackinitialized();
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        ensureCallbackinitialized();
        writeInt(&buf, lower(v))
    }
}

fileprivate struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionDuration: FfiConverterRustBuffer {
    typealias SwiftType = TimeInterval?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDuration.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDuration.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeAcmeChallenge: FfiConverterRustBuffer {
    typealias SwiftType = AcmeChallenge?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeAcmeChallenge.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeAcmeChallenge.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeCommitBundle: FfiConverterRustBuffer {
    typealias SwiftType = CommitBundle?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeCommitBundle.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeCommitBundle.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeCiphersuiteName: FfiConverterRustBuffer {
    typealias SwiftType = CiphersuiteName?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeCiphersuiteName.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeCiphersuiteName.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeMlsWirePolicy: FfiConverterRustBuffer {
    typealias SwiftType = MlsWirePolicy?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeMlsWirePolicy.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeMlsWirePolicy.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionSequenceUInt8: FfiConverterRustBuffer {
    typealias SwiftType = [UInt8]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceUInt8.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceUInt8.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionSequenceTypeClientId: FfiConverterRustBuffer {
    typealias SwiftType = [ClientId]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypeClientId.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeClientId.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeClientId: FfiConverterRustBuffer {
    typealias SwiftType = ClientId?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeClientId.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeClientId.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterSequenceUInt8: FfiConverterRustBuffer {
    typealias SwiftType = [UInt8]

    public static func write(_ value: [UInt8], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt8.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt8] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt8]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterUInt8.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeInvitee: FfiConverterRustBuffer {
    typealias SwiftType = [Invitee]

    public static func write(_ value: [Invitee], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeInvitee.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Invitee] {
        let len: Int32 = try readInt(&buf)
        var seq = [Invitee]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeInvitee.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeProposalBundle: FfiConverterRustBuffer {
    typealias SwiftType = [ProposalBundle]

    public static func write(_ value: [ProposalBundle], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeProposalBundle.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ProposalBundle] {
        let len: Int32 = try readInt(&buf)
        var seq = [ProposalBundle]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeProposalBundle.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceSequenceUInt8: FfiConverterRustBuffer {
    typealias SwiftType = [[UInt8]]

    public static func write(_ value: [[UInt8]], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterSequenceUInt8.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [[UInt8]] {
        let len: Int32 = try readInt(&buf)
        var seq = [[UInt8]]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterSequenceUInt8.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeClientId: FfiConverterRustBuffer {
    typealias SwiftType = [ClientId]

    public static func write(_ value: [ClientId], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeClientId.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ClientId] {
        let len: Int32 = try readInt(&buf)
        var seq = [ClientId]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeClientId.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterDictionaryStringSequenceUInt8: FfiConverterRustBuffer {
    public static func write(_ value: [String: [UInt8]], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterSequenceUInt8.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: [UInt8]] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: [UInt8]]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterSequenceUInt8.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}


/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias AcmeAccount = [UInt8]
public struct FfiConverterTypeAcmeAccount: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AcmeAccount {
        return try FfiConverterSequenceUInt8.read(from: &buf)
    }

    public static func write(_ value: AcmeAccount, into buf: inout [UInt8]) {
        return FfiConverterSequenceUInt8.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> AcmeAccount {
        return try FfiConverterSequenceUInt8.lift(value)
    }

    public static func lower(_ value: AcmeAccount) -> RustBuffer {
        return FfiConverterSequenceUInt8.lower(value)
    }
}


/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias AcmeOrder = [UInt8]
public struct FfiConverterTypeAcmeOrder: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AcmeOrder {
        return try FfiConverterSequenceUInt8.read(from: &buf)
    }

    public static func write(_ value: AcmeOrder, into buf: inout [UInt8]) {
        return FfiConverterSequenceUInt8.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> AcmeOrder {
        return try FfiConverterSequenceUInt8.lift(value)
    }

    public static func lower(_ value: AcmeOrder) -> RustBuffer {
        return FfiConverterSequenceUInt8.lower(value)
    }
}


/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias ClientId = [UInt8]
public struct FfiConverterTypeClientId: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ClientId {
        return try FfiConverterSequenceUInt8.read(from: &buf)
    }

    public static func write(_ value: ClientId, into buf: inout [UInt8]) {
        return FfiConverterSequenceUInt8.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> ClientId {
        return try FfiConverterSequenceUInt8.lift(value)
    }

    public static func lower(_ value: ClientId) -> RustBuffer {
        return FfiConverterSequenceUInt8.lower(value)
    }
}


/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias ConversationId = [UInt8]
public struct FfiConverterTypeConversationId: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConversationId {
        return try FfiConverterSequenceUInt8.read(from: &buf)
    }

    public static func write(_ value: ConversationId, into buf: inout [UInt8]) {
        return FfiConverterSequenceUInt8.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> ConversationId {
        return try FfiConverterSequenceUInt8.lift(value)
    }

    public static func lower(_ value: ConversationId) -> RustBuffer {
        return FfiConverterSequenceUInt8.lower(value)
    }
}


/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias JsonRawData = [UInt8]
public struct FfiConverterTypeJsonRawData: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> JsonRawData {
        return try FfiConverterSequenceUInt8.read(from: &buf)
    }

    public static func write(_ value: JsonRawData, into buf: inout [UInt8]) {
        return FfiConverterSequenceUInt8.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> JsonRawData {
        return try FfiConverterSequenceUInt8.lift(value)
    }

    public static func lower(_ value: JsonRawData) -> RustBuffer {
        return FfiConverterSequenceUInt8.lower(value)
    }
}


/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias MemberId = [UInt8]
public struct FfiConverterTypeMemberId: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MemberId {
        return try FfiConverterSequenceUInt8.read(from: &buf)
    }

    public static func write(_ value: MemberId, into buf: inout [UInt8]) {
        return FfiConverterSequenceUInt8.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> MemberId {
        return try FfiConverterSequenceUInt8.lift(value)
    }

    public static func lower(_ value: MemberId) -> RustBuffer {
        return FfiConverterSequenceUInt8.lower(value)
    }
}

public func `version`()  -> String {
    return try! FfiConverterString.lift(
        try!
    
    rustCall() {
    
    CoreCrypto_3b31_version($0)
}
    )
}



/**
 * Top level initializers and tear down methods.
 *
 * This is generated by uniffi.
 */
public enum CoreCryptoLifecycle {
    /**
     * Initialize the FFI and Rust library. This should be only called once per application.
     */
    func initialize() {
    }
}