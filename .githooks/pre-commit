#!/usr/bin/env ruby

#
# Wire
# Copyright (C) 2018 Wire Swiss GmbH
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see http://www.gnu.org/licenses/.
#

require 'shellwords'
require 'set'

def get_paths_to_staged_files
    `git diff --cached --diff-filter=d --name-only`.split("\n")
end

def map_to_relative_paths(files)
    relative_path = Dir.pwd
    files.map { |file_path| 
        temporary_path = file_path
        temporary_path.slice(relative_path)
        temporary_path
    }
end

def get_swift_files(files)
    files.select { |file| file[/\.swift$/] }
end

def compose_swiftlint_command(changed_files, autoformat)
  command = "./scripts/run-swiftlint.sh"
  command << " lint"
  command << " --fix" if autoformat
  command << " --strict"
  command << " --reporter emoji"
  command << " --config .swiftlint.yml"
  files = changed_files.map.with_index(0) { |f, i| "SCRIPT_INPUT_FILE_#{i}=#{f.shellescape}" }.join(" ")
  command = command.prepend("SCRIPT_INPUT_FILE_COUNT=#{changed_files.count} #{files} ")
  command << " --use-script-input-files"  
end

def running_on_ci 
	!ENV['CI'].nil?
end

# Checking if current commit is not a merge commit. For merge commits we don't want to perform linting
# since we would be linting changes not related to our work.
commit_hash = `git rev-parse -q --verify MERGE_HEAD`

puts("Running pre-commit hook")

unless commit_hash.empty?
    exit 0
end

staged_swift_files = get_swift_files(get_paths_to_staged_files)

if running_on_ci || staged_swift_files.empty?
    exit 0
end

relative_staged_swift_files = map_to_relative_paths(staged_swift_files)
print "Formatting your changed Swift files (if any)...\n"
`#{compose_swiftlint_command(relative_staged_swift_files, true)}`
staged_swift_files.each { |filename|
    `git add "#{filename}"`
}
print "Linting Swift in your changed Swift files (if any)...\n"
result = `#{compose_swiftlint_command(relative_staged_swift_files, false)}`
unless result.empty? 
    abort(result)
end

staged_swift_files = get_swift_files(get_paths_to_staged_files)
if staged_swift_files.empty?
    puts("All changes have been reverted by formatters. No code left to commit.")
    exit 1
end
