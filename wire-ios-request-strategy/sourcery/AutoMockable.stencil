// swiftlint:disable line_length
// swiftlint:disable variable_name

import Foundation
#if os(iOS) || os(tvOS) || os(watchOS)
import UIKit
#elseif os(OSX)
import AppKit
#endif

{% for import in argument.autoMockableImports %}
import {{ import }}
{% endfor %}

{% for import in argument.autoMockableTestableImports %}
@testable import {{ import }}
{% endfor %}

{# A macro is like a function, it can be passed input and be reused #}

{# Formats a name #}
{% macro swiftifyMethodName name %}{{ name | replace:"(","_" | replace:")","" | replace:":","_" | replace:"`","" | snakeToCamelCase | lowerFirstWord }}{% endmacro %}

{# Prints the access level #}
{% macro accessLevel level %}{% if level != 'internal' %}{{ level }} {% endif %}{% endmacro %}

{# Mock error for a throwing method #}
{% macro methodThrowableErrorDeclaration method %}
    {% call accessLevel method.accessLevel %}var {% call swiftifyMethodName method.selectorName %}_MockError: Error?
{% endmacro %}

{# Throw mock error #}
{% macro methodThrowableErrorUsage method %}
        if let error = {% call swiftifyMethodName method.selectorName %}_MockError {
            throw error
        }
{% endmacro %}

{# Argument captures for a method  #}
{% macro methodReceivedParameters method %}
    {%if method.parameters.count == 0 %}
        {% call swiftifyMethodName method.selectorName %}_Invocations.append(())
    {% elif method.parameters.count == 1 %}
        {% call swiftifyMethodName method.selectorName %}_Invocations.append({% for param in method.parameters %}{{ param.name }}{% if not forloop.last%}, {% endif %}{% endfor %})
    {% else %}
        {% call swiftifyMethodName method.selectorName %}_Invocations.append(({% for param in method.parameters %}{{ param.name }}: {{ param.name }}{% if not forloop.last%}, {% endif %}{% endfor %}))
    {% endif %}
{% endmacro %}

{# This macro writes the mock closure's name for a method #}
{% macro methodClosureName method %}{% call swiftifyMethodName method.selectorName %}_MockMethod{% endmacro %}

{# This macro writes the return type of the closure #}
{% macro closureReturnTypeName method %}{% if method.isOptionalReturnType %}{{ method.unwrappedReturnTypeName }}?{% else %}{{ method.returnTypeName }}{% endif %}{% endmacro %}

{# This macro declares the mock closure #}
{% macro methodClosureDeclaration method %}
    {% call accessLevel method.accessLevel %}var {% call methodClosureName method %}: (({% for param in method.parameters %}{{ param.typeName }}{% if not forloop.last %}, {% endif %}{% endfor %}) {% if method.isAsync %}async {% endif %}{% if method.throws %}throws {% endif %}-> {% if method.isInitializer %}Void{% else %}{% call closureReturnTypeName method %}{% endif %})?
{% endmacro %}

{# This macro passes in the paramenters when calling the mock closure #}
{% macro methodClosureCallParameters method %}{% for param in method.parameters %}{{ param.name }}{% if not forloop.last %}, {% endif %}{% endfor %}{% endmacro %}

{# This macro mocks a single method #}
{% macro mockMethod method %}
    // MARK: - {{ method.shortName }}

    {% if method.parameters.count == 0 %}
    {% call accessLevel method.accessLevel %}var {% call swiftifyMethodName method.selectorName %}_Invocations: [Void] = []
    {% elif method.parameters.count == 1 %}
    {% call accessLevel method.accessLevel %}var {% call swiftifyMethodName method.selectorName %}_Invocations: [{% for param in method.parameters %}{{ param.unwrappedTypeName if param.typeAttributes.escaping else param.typeName }}{{ ', ' if not forloop.last }}{% endfor %}] = []
    {% else %}
    {% call accessLevel method.accessLevel %}var {% call swiftifyMethodName method.selectorName %}_Invocations: [({% for param in method.parameters %}{{ param.name }}: {{ param.unwrappedTypeName if param.typeAttributes.escaping else param.typeName }}{{ ', ' if not forloop.last }}{% endfor %})] = []
    {% endif %}
    {% if method.throws %}
        {% call methodThrowableErrorDeclaration method %}
    {% endif %}
    {% call methodClosureDeclaration method %}
    {% if not method.returnTypeName.isVoid and not method.isInitializer %}
    {% call accessLevel method.accessLevel %}var {% call swiftifyMethodName method.selectorName %}_MockValue: {{ '(' if method.returnTypeName.isClosure and not method.isOptionalReturnType }}{{ method.returnTypeName }}{{ ')' if method.returnTypeName.isClosure and not method.isOptionalReturnType }}?
    {% endif %}

{% if method.isInitializer %}
    {% call accessLevel method.accessLevel %}required {{ method.name }} {
        {% call methodReceivedParameters method %}

        guard let mock = {% call methodClosureName method %} else {
            fatalError("no mock for `{% call swiftifyMethodName method.selectorName %}`")
        }

        mock({% call methodClosureCallParameters method %})
    }
{% else %}
    {% for name, attribute in method.attributes %}
    {% for value in attribute %}
    {{ value }}
    {% endfor %}
    {% endfor %}
    {% call accessLevel method.accessLevel %}func {{ method.name }}{{ ' async' if method.isAsync }}{{ ' throws' if method.throws }}{% if not method.returnTypeName.isVoid %} -> {{ method.returnTypeName }}{% endif %} {
        {% call methodReceivedParameters method %}

        {% if method.throws %}
            {% call methodThrowableErrorUsage method %}

        {% endif %}
        {% if method.returnTypeName.isVoid %}
        guard let mock = {% call methodClosureName method %} else {
            fatalError("no mock for `{% call swiftifyMethodName method.selectorName %}`")
        }
    

        {% if method.throws %}try {% endif %}{% if method.isAsync %}await {% endif %}mock({% call methodClosureCallParameters method %})            
        
        {% else %}
        if let mock = {% call methodClosureName method %} {
            return {{ 'try ' if method.throws }}{{ 'await ' if method.isAsync }}mock({% call methodClosureCallParameters method %})
        } else if let mock = {% call swiftifyMethodName method.selectorName %}_MockValue {
            return mock
        } else {
            fatalError("no mock for `{% call swiftifyMethodName method.selectorName %}`")
        }
        {% endif %}
    }
{% endif %}
{% endmacro %}

{% macro mockOptionalVariable variable %}
    {% call accessLevel variable.readAccess %}var {% call mockedVariableName variable %}: {{ variable.typeName }}
{% endmacro %}

{% macro mockNonOptionalArrayOrDictionaryVariable variable %}
    {% call accessLevel variable.readAccess %}var {% call mockedVariableName variable %}: {{ variable.typeName }} = {% if variable.isArray %}[]{% elif variable.isDictionary %}[:]{% endif %}
{% endmacro %}

{% macro mockNonOptionalVariable variable %}
    {% call accessLevel variable.readAccess %}var {% call mockedVariableName variable %}: {{ variable.typeName }} {
        get { return {% call underlyingMockedVariableName variable %} }
        set(value) { {% call underlyingMockedVariableName variable %} = value }
    }

    {% call accessLevel variable.readAccess %}var {% call underlyingMockedVariableName variable %}: {{ variable.typeName }}!
{% endmacro %}

{% macro variableThrowableErrorDeclaration variable %}
    {% call accessLevel variable.readAccess %}var {% call mockedVariableName variable %}ThrowableError: Error?
{% endmacro %}

{% macro variableThrowableErrorUsage variable %}
            if let error = {% call mockedVariableName variable %}ThrowableError {
                throw error
            }
{% endmacro %}

{% macro variableClosureDeclaration variable %}
    {% call accessLevel variable.readAccess %}var {% call variableClosureName variable %}: (() {% if variable.isAsync %}async {% endif %}{% if variable.throws %}throws {% endif %}-> {{ variable.typeName }})?
{% endmacro %}

{% macro variableClosureName variable %}{% call mockedVariableName variable %}Closure{% endmacro %}

{% macro mockAsyncOrThrowingVariable variable %}
    {% call accessLevel variable.readAccess %}var {% call mockedVariableName variable %}CallsCount = 0
    {% call accessLevel variable.readAccess %}var {% call mockedVariableName variable %}Called: Bool {
        return {% call mockedVariableName variable %}CallsCount > 0
    }

    {% call accessLevel variable.readAccess %}var {% call mockedVariableName variable %}: {{ variable.typeName }} {
        get {% if variable.isAsync %}async {% endif %}{% if variable.throws %}throws {% endif %}{
            {% if variable.throws %}
            {% call variableThrowableErrorUsage variable %}
            {% endif %}
            {% call mockedVariableName variable %}CallsCount += 1
            if let {% call variableClosureName variable %} = {% call variableClosureName variable %} {
                return {{ 'try ' if variable.throws }}{{ 'await ' if variable.isAsync }}{% call variableClosureName variable %}()
            } else {
                return {% call underlyingMockedVariableName variable %}
            }
        }
    }
    {% call accessLevel variable.readAccess %}var {% call underlyingMockedVariableName variable %}: {{ variable.typeName }}{{ '!' if not variable.isOptional }}
    {% if variable.throws %}
        {% call variableThrowableErrorDeclaration variable %}
    {% endif %}
    {% call variableClosureDeclaration method %}
{% endmacro %}

{% macro underlyingMockedVariableName variable %}underlying{{ variable.name|upperFirstLetter }}{% endmacro %}
{% macro mockedVariableName variable %}{{ variable.name }}{% endmacro %}

{% for type in types.protocols where type.based.AutoMockable or type|annotated:"AutoMockable" %}{% if type.name != "AutoMockable" %}
{% call accessLevel type.accessLevel %}class Mock{{ type.name }}: {{ type.name }} {
    

    // MARK: - Life cycle

    {% if type.accessLevel == "public" %}public init() {}{% endif %}

{% for variable in type.allVariables|!definedInExtension %}
    // MARK: - {{ variable.name }}

    {% if variable.isAsync or variable.throws %}{% call mockAsyncOrThrowingVariable variable %}{% elif variable.isOptional %}{% call mockOptionalVariable variable %}{% elif variable.isArray or variable.isDictionary %}{% call mockNonOptionalArrayOrDictionaryVariable variable %}{% else %}{% call mockNonOptionalVariable variable %}{% endif %}

{% endfor %}

{% for method in type.allMethods|!definedInExtension %}
    {% call mockMethod method %}

{% endfor %}
}
{% endif %}{% endfor %}