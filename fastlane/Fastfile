require 'git'
require 'base64'
require 'httparty'
require 'json'
require 'fastlane/action'

opt_out_usage
default_platform(:ios)

platform :ios do
    def iPhoneNameForTesting
        ENV['IPHONE_MODEL']
    end
  
    def ios_version
        ENV['IOS_VERSION']
    end

    def appstoreconnect_api_key_file_path 
        './fastlane/appstoreconnect_api_key.json'
    end

    def is_running_on_ci 
        !ENV['CI'].nil?
    end

    def create_keychain_if_needed
        create_keychain(
            default_keychain: false,
            unlock: true,
            timeout: 3600,
            lock_when_sleeps: true
        ) if is_running_on_ci
    end

    before_all do |lane|
        ensure_xcode_version
        create_keychain_if_needed unless [:prepare_for_tests].include?(lane)
        `mkdir -p ./.post_build`
        Dir.chdir("..") do
            encoded_key = ENV['APPSTORE_API_KEY_BASE64']
            if !File.exist?(appstoreconnect_api_key_file_path) && !encoded_key.nil?
                puts "Setting AppStoreConnect API Key"
                File.open(appstoreconnect_api_key_file_path, 'w+') {|f| f.write(Base64.decode64(encoded_key)) }
            end
        end
    end

    after_all do |lane|
        begin
            delete_keychain if is_running_on_ci
        rescue
            puts "No keychain found, skipping deletion..."
        end
    end

    desc "Prepare for tests"
    lane :prepare_for_tests do
        create_simulator_if_needed
    end
    
    desc "Build & Upload Development build"
    lane :development do |options|
        options[:build_type] = "Development"
        options[:upload_app_center] = true
        options[:upload_dsyms_to_datadog] = true
        options[:produce_debug_builds] = true
        save_app_name('Development')
        build_and_upload_app(options)
    end

    desc "Build & Upload Playground build"
    lane :playground do |options|
        options[:build_type] = "Playground"
        options[:upload_testflight] = true
        options[:upload_dsyms_to_datadog] = true
        options[:extra_distribution_groups] = ["Wire Employees", "Externals - Non Wire Employees"]
        options[:produce_debug_builds] = true
        save_app_name('Playground')
        build_and_upload_app(options)
        `export TEMP='APPCENTER_INSTALL_LINK=For \'Playground\' build there is no AppCenter link, please visit Testflight to install the app' && echo $TEMP >> ./.post_build/.env`
    end

    desc "Build & Upload Testflight Beta build"
    lane :testflight_beta do |options|
        options[:build_type] = "Beta"
        options[:upload_testflight] = true
        options[:upload_dsyms_to_datadog] = true
        options[:produce_debug_builds] = true
        options[:extra_distribution_groups] = ["Wire Employees", "Externals - Non Wire Employees"]
        save_app_name('Testflight Beta')
        build_and_upload_app(options)
        `export TEMP='APPCENTER_INSTALL_LINK=For \'Beta\' build there is no AppCenter link, please visit Testflight to install the app' && echo $TEMP >> ./.post_build/.env`
    end

    desc "Build & Upload Public AppStore build"
    lane :appstore_public do |options|
        options[:build_type] = "AppStore"
        options[:upload_dsyms_to_app_center] = true
        options[:upload_app_store] = true
        options[:upload_app_center] = true
        save_app_name('Public AppStore Production')
        build_and_upload_app(options)
    end
    
    desc "Build & Upload Col 1 Restricted AppStore build"
    lane :appstore_col_1_restricted do |options|
        options[:build_type] = "RC"
        options[:override_folder] = "BK-COLUMN1"
        options[:s3_subfolder] = ENV['C1_S3_SUBFOLDER_RESTRICTED']
        options[:app_center_app_name] = ENV['C1_APP_CENTER_APP_NAME_RESTRICTED']
        options[:upload_app_store] = true
        options[:upload_app_center] = true
        options[:produce_debug_builds] = true
        save_app_name('Column 1 Restricted')
        build_and_upload_app(options)
    end

    desc "Build & Upload Col 2 Restricted AppStore build"
    lane :appstore_col_2_restricted do |options|
        options[:build_type] = "RC"
        options[:override_folder] = "BK-COLUMN2"
        options[:s3_subfolder] = ENV['C2_S3_SUBFOLDER_RESTRICTED']
        options[:app_center_app_name] = ENV['C2_APP_CENTER_APP_NAME_RESTRICTED']
        options[:upload_app_store] = true
        options[:upload_app_center] = true
        options[:produce_debug_builds] = true
        save_app_name('Column 2 Restricted')
        build_and_upload_app(options)
    end
    
    desc "Build & Upload Col 3 Restricted AppStore build"
    lane :appstore_col_3_restricted do |options|
        options[:build_type] = "RC"
        options[:override_folder] = "BK-COLUMN3"
        options[:s3_subfolder] = ENV['C3_S3_SUBFOLDER_RESTRICTED']
        options[:app_center_app_name] = ENV['C3_APP_CENTER_APP_NAME_RESTRICTED']
        options[:upload_app_store] = true
        options[:upload_app_center] = true
        options[:produce_debug_builds] = true
        save_app_name('Column 3 Restricted')
        build_and_upload_app(options)
    end

    desc "Build & Upload Col 1 Production AppStore build"
    lane :appstore_col_1_prod do |options|
        options[:build_type] = "AppStore"
        options[:override_folder] = "BK-COLUMN1"
        options[:s3_subfolder] = ENV['C1_S3_SUBFOLDER_PRODUCTION']
        options[:app_center_app_name] = ENV['C1_APP_CENTER_APP_NAME_PRODUCTION']
        options[:upload_app_store] = true
        options[:upload_app_center] = true
        save_app_name('Column 1 Production')
        build_and_upload_app(options)
    end

    desc "Build & Upload Col 2 Production AppStore build"
    lane :appstore_col_2_prod do |options|
        options[:build_type] = "AppStore"
        options[:override_folder] = "BK-COLUMN2"
        options[:s3_subfolder] = ENV['C2_S3_SUBFOLDER_PRODUCTION']
        options[:app_center_app_name] = ENV['C2_APP_CENTER_APP_NAME_PRODUCTION']
        options[:upload_app_store] = true
        options[:upload_app_center] = true
        save_app_name('Column 2 Production')
        build_and_upload_app(options)
    end

    desc "Build & Upload Col 3 Production AppStore build"
    lane :appstore_col_3_prod do |options|
        options[:build_type] = "AppStore"
        options[:override_folder] = "BK-COLUMN3"
        options[:s3_subfolder] = ENV['C3_S3_SUBFOLDER_PRODUCTION']
        options[:app_center_app_name] = ENV['C3_APP_CENTER_APP_NAME_PRODUCTION']
        options[:upload_app_store] = true
        options[:upload_app_center] = true
        save_app_name('Column 3 Production')
        build_and_upload_app(options)
    end

    def build_and_upload_app(options)
        options[:build_number] = generate_build_number
        prepare_for_release(options)
        build = Build.new(options: options)
        if !build.skip_security_tests
            UI.message "🤖 Run security tests"
            create_simulator_if_needed
            security_plans(options)
        end

        if options[:produce_debug_builds] || false
            UI.message "🤖 Build for simulator"
            build_for_release(options.merge({:configuration => "Debug", :for_simulator => true}))
        end

        UI.message "🤖 Build for release"
        build_for_release(options)

        UI.message "🤖 Upload"
        if options[:upload_app_store] || false
            upload_app_store(options)
        end
        if options[:upload_testflight] || false
            upload_testflight(options)
        end
        if options[:upload_app_center] || false
            upload_app_center(options)
        end
        upload_s3(options)
        save_changelog_to_env(options)
        if options[:upload_dsyms_to_app_center] || false
            upload_dsyms_to_app_center_for_appstore_build(options)
        end
        if options[:upload_dsyms_to_datadog] || false
            upload_dsyms_to_datadog(options)
        end
    end

    def save_app_name(name)
        `echo APP_NAME=#{name} >> ./.post_build/.env`
    end

    def download_distribution_certificate_and_profiles(build, options)
        if is_running_on_ci 
            match(
                git_url: "https://#{ENV['WIRE_INTERNAL_GITHUB_USER']}:#{ENV['WIRE_INTERNAL_GITHUB_TOKEN']}@github.com/wireapp/wire-ios-certificates.git",
                readonly: true,
                type: "appstore",
                skip_provisioning_profiles: true,
                app_identifier: []
            )
        else
            match(
                readonly: true,
                type: "appstore",
                skip_provisioning_profiles: true,
                app_identifier: []
            )
        end

        app_bundle_id = get_xcconfig_value(
            path: './wire-ios/Configuration/Release.xcconfig',
            name: 'WIRE_BUNDLE_ID'
        )
        puts "downloading provisioning profiles for bundle id: #{app_bundle_id}"
        sigh(
            adhoc: build.should_sigh_adhoc,
            readonly: true,
            api_key_path: appstoreconnect_api_key_file_path,
            app_identifier: app_bundle_id
        )
        sigh(
            adhoc: build.should_sigh_adhoc,
            readonly: true,
            api_key_path: appstoreconnect_api_key_file_path,
            app_identifier: "#{app_bundle_id}.extension-share"
        )
        sigh(
            adhoc: build.should_sigh_adhoc,
            readonly: true,
            api_key_path: appstoreconnect_api_key_file_path,
            app_identifier: "#{app_bundle_id}.extension-notification"
        )
    end

    def generate_build_number
        build_number = `curl -H "Accept: text/plain" -X POST -d '' "https://incrementator.appspot.com/api/v1/code/ORUHILeMbXB4D5Z5conFzYoYpQPjVnyUA4pu56X2MHVJSFxM/increment"`
        `echo BUILD_NUMBER=#{build_number} >> ./.post_build/.env`
        build_number
    end

    # Fetch dependencies and prepare for building a release
    def prepare_for_release(options)
        xcode_version = options[:xcode_version]

        build_type = options[:build_type]
        # Delete configurations in case we switch to different branch or repo
        sh "rm -rf ../Configuration"
        if build_type.nil? 
            sh "cd .. && ./setup.sh"
        else
            override_folder = options[:override_folder]
            if override_folder.nil? 
                override_folder = "Cloud"
            end

            build = Build.new(options: options)

            `echo BUILD_VERSION=#{build.version_from_xcconfig} >> ./.post_build/.env`

            sh "cd .. && ./setup.sh -o \'./wire-ios-build-assets/#{override_folder}/#{build_type}\'"
            # Adding extra information to the icon must be done after we check them out in setup script
            build.process_icon()

            download_distribution_certificate_and_profiles(build, options)
        end
    end

    # Build for release to AppStore or App Center/S3
    def build_for_release(options)
        build = Build.new(options: options)
        export_method = options[:export_method] || build.export_method

        if build.for_simulator
            Dir.chdir("..") do
                # Build the app for simulator
                sh "xcodebuild -scheme 'Wire-iOS' -configuration 'Debug' -sdk 'iphonesimulator' -derivedDataPath DerivedData -quiet build BUILD_NUMBER=#{build.build_number}"

                # make a "fake" .ipa package that QA will use for installing to simulator
                sh "mkdir -p debug/Payload"
                sh "mkdir -p #{build.artifact_path(with_filename: false)}"
                sh "cp -r DerivedData/Build/Products/Debug-iphonesimulator/*.app debug/Payload/"
                sh "cd debug && zip -r ../#{build.artifact_path(with_filename: true)}.ipa Payload/"
            end
        else
            # DataDog values needs to go through WireCommonComponents
            enable_datadog_args = [
            "DATADOG_IMPORT=1",
            "DATADOG_APP_ID=#{ENV['DATADOG_APP_ID']}",
            "DATADOG_CLIENT_TOKEN=#{ENV['DATADOG_CLIENT_TOKEN']}",
            "OTHER_PREPROCESSOR_FLAGS='DATADOG_IMPORT'"
            ]

            xcargs = ["BUILD_NUMBER=#{build.build_number}"]
            xcargs += enable_datadog_args if build.enable_datadog

            build_app(
                scheme: "Wire-iOS",
                configuration: build.configuration,
                export_method: export_method,
                export_options: {"iCloudContainerEnvironment": "Production"},
                derived_data_path: "DerivedData",
                archive_path: build.archive_path(with_filename: true),
                buildlog_path: build.build_path,
                output_directory: build.artifact_path(with_filename: false),
                output_name: build.filename,
                include_bitcode: false,
                include_symbols: true,
                xcargs: xcargs.join(' ')
            )
        end
    end

    # Run security plans
    def security_plans(options)
        build = Build.new(options: options)
      
        for scheme in ["Wire-iOS", "WireDataModel", "WireSyncEngine"] do
            run_tests(
                testplan: "SecurityTests",
                scheme: scheme,
                skip_detect_devices: true,
                configuration: "Debug",
                # test_without_building: true,
                sdk:"iphonesimulator",
                destination: "platform=iOS Simulator,name=#{iPhoneNameForTesting},OS=#{ios_version}",
                # code_coverage: true,
                derived_data_path: "DerivedData",
                buildlog_path: build.build_path,
                output_directory: "#{build.artifact_path(with_filename: false)}/tests/#{scheme}",
                output_types: "junit"
            )    
        end
    end
        
    def create_simulator_if_needed
        # Check if the simulator already exists
        existing_simulator = `xcrun simctl list devices | grep "#{iPhoneNameForTesting}" | grep "iOS#{ios_version}" | awk -F '[()]' '{print $2}'`.chomp

        if existing_simulator.empty?
            UI.message "create simulator #{iPhoneNameForTesting} - iOS#{ios_version}"
            `xcrun simctl create "#{iPhoneNameForTesting} - iOS#{ios_version}" "#{iPhoneNameForTesting}" "iOS#{ios_version}"`
        else
            UI.message "clear simulator content for #{existing_simulator}"
            `xcrun simctl erase #{existing_simulator}`
        end
    end

    # Upload to AppStore
    def upload_app_store(options)
        build = Build.new(options: options)
        sh "cp ../wire-ios/Configuration/Appfile ."

        deliver(
            api_key_path: appstoreconnect_api_key_file_path,
            ipa: "#{build.artifact_path(with_filename: true)}.ipa",
            submit_for_review: false,
            automatic_release: false,
            force: true, # Skip HTML report verification
            skip_binary_upload: false,
            run_precheck_before_submit: false,
            precheck_include_in_app_purchases: false,
            skip_app_version_update: true,
            skip_metadata: true,
            skip_screenshots: true
        )
    end

    # Upload to TestFlight
    def upload_testflight(options)
        build = Build.new(options: options)
        sh "cp ../wire-ios/Configuration/Appfile ."
        
        # we add this group to get a review from Apple when we upload new build version
        # in order to speed up distribution to real external groups
        groups = ["Default External Testers"]
        if build.send_to_externals
            groups += options[:extra_distribution_groups]
        end

        upload_to_testflight(
            api_key_path: appstoreconnect_api_key_file_path,
            ipa: "#{build.artifact_path(with_filename: true)}.ipa",
            skip_waiting_for_build_processing: false,
            distribute_external: true,
            groups: groups,
            submit_beta_review: true,
            changelog: changelog(build)
        )
    end

    # Changelog for current build
    def changelog(build)
        changelog = ""
        changelog_path = './../CHANGELOG.md'

        if build.playground_build
            changelog += "Playground build for #{build.git_branch}\n\n"
        end
        
        if File.exist?(changelog_path)
            changelog += File.read(changelog_path)
        else 
            changelog += "**Last commits:**\n" + changelog_from_git_commits(
                    commits_count: 5,
                    pretty: "- %s by %ae",
            )
        end
        changelog
    end

    # "Upload for internal use"
    def upload_app_center(options)
        build = Build.new(options: options)
       
        changelog = changelog(build)

        app_name = options[:app_center_app_name]
        if app_name.nil? 
            app_name = build.app_center_app_name
        end

        
        sh "echo SHA of IPA is:"
        sh "shasum -a 256 ../#{build.artifact_path(with_filename: true)}.ipa || true"

        appcenter_upload(
          api_token: ENV["APPCENTER_API_TOKEN"],
          owner_name: ENV["APPCENTER_OWNER_NAME"],
          app_name: app_name,
          file: "#{build.artifact_path(with_filename: true)}.ipa",
          release_notes: changelog,
          notify_testers: true,
          mandatory_update: false,
          dsym: "#{build.artifact_path(with_filename: true)}.app.dSYM.zip"
        )

        appcenter_build_info = Fastlane::Actions.lane_context[:APPCENTER_BUILD_INFORMATION]
        `export TEMP='APPCENTER_INSTALL_LINK=#{appcenter_build_info['install_url']}' && echo $TEMP >> ./.post_build/.env`
    end

    # Upload to S3 (Automation builds)
    def upload_s3(options)
        build = Build.new(options: options)
        s3_subfolder = options[:s3_subfolder]

        if s3_subfolder.nil? 
            s3_path = "s3://#{ENV['S3_BUCKET']}/ios/"
            sh "echo upload to s3 default folder "
        else 
            s3_path = "s3://#{ENV['S3_BUCKET']}/ios/#{s3_subfolder}/"
            sh "echo upload to s3 subfolder: #{s3_subfolder}"
        end


        output = ""
        if build.appstore_build
            output += `cd ../#{build.archive_path(with_filename: false)} && tar -czf #{build.filename}.xcarchive.tgz #{build.filename}.xcarchive`
        end
        
        output += `cd .. && aws s3 cp --recursive --exclude '*'  --include '*.ipa'  --include '*.app.dSYM.zip' --include '*.xcarchive.tgz' --include '*.junit' artifacts/ #{s3_path}`
        paths = output.split(/[\r,\n]/).map { |line| line.gsub(/\n/, '').gsub(/\*/, '').match(/s3:\/\/.*ipa$/)}.compact!.map{ |match| match[0] }.uniq.join(' ')
        `export TEMP='S3_PATHS=#{Base64.strict_encode64(paths)}' && echo $TEMP >> ./.post_build/.env`
    end

    def save_changelog_to_env(options)
        build = Build.new(options: options)
        changelog = changelog(build)
        `export TEMP='RELEASE_NOTES=#{Base64.strict_encode64(changelog)}' && echo $TEMP >> ./.post_build/.env`
    end

    # Upload dSYMs for AppStore crash tracking
    def upload_dsyms_to_app_center_for_appstore_build(options)
        build = Build.new(options: options)

        if !build.appstore_build
            UI.user_error! "This step is only relevant for AppStore builds"
        end

        appcenter_upload(
          api_token: ENV["APPCENTER_API_TOKEN"],
          owner_name: ENV["APPCENTER_OWNER_NAME"],
          app_name: build.app_center_app_name,
          dsym: "#{build.artifact_path(with_filename: true)}.app.dSYM.zip",
          upload_dsym_only: true,
          notify_testers: true
        )
    end

    # Upload dsyms to Datadog
    def upload_dsyms_to_datadog(options)
        build = Build.new(options: options)
        
        upload_symbols_to_datadog(
            api_key: ENV["DATADOG_API_KEY"],
            dsym_paths: [
                "#{build.artifact_path(with_filename: true)}.app.dSYM.zip"
            ],
            site: "datadoghq.eu"
        )
    end
end

class Build
    attr_reader :build_type
    attr_reader :git_branch
    attr_reader :build_number
    attr_reader :for_simulator
    attr_reader :configuration
    attr_reader :enable_datadog
    attr_reader :skip_security_tests
    # send to non-default external distribution list
    attr_reader :send_to_externals

    def initialize(options:)
        build_number = options[:build_number]
        if build_number.nil?
            UI.user_error! "Pass build_number parameter to fastlane e.g. fastlane build build_number:1234"
        end
        build_type = options[:build_type]
        if build_type.nil? 
            UI.user_error! "Pass build_type parameter, e.g. fastlane build build_type:Development"
        end


        @build_type = build_type
        if ENV['GITHUB_REF_NAME'].nil? 
            @git_branch = %x(git rev-parse --abbrev-ref HEAD).chomp
        else
            @git_branch = ENV['GITHUB_REF_NAME']
        end

        @send_to_externals = ENV['SEND_TO_EXTERNALS'] == "true" || ENV['SEND_TO_EXTERNALS'] == "1"
        @enable_datadog = ENV['ENABLE_DATADOG'] == "true" || ENV['ENABLE_DATADOG'] == "1"
        @skip_security_tests = ENV['SKIP_SECURITY_TESTS'] == "true" || ENV['SKIP_SECURITY_TESTS'] == "1"
        @build_number = build_number
        
        for_simulator = options[:for_simulator]
        if for_simulator.nil? 
            @for_simulator = false
        else
            @for_simulator = for_simulator.to_s == 'true'
        end

        configuration = options[:configuration]
        if configuration.nil? 
            @configuration = "Release"
        else
            @configuration = configuration
        end
    end

    # Helpers

    def playground_build
        @build_type == "Playground"
    end

    def appstore_build
        @build_type == "AppStore"
    end

    def development_build
        @build_type == "Development"
    end

    def internal_build
        @build_type == "Internal"
    end


    def rc_build
        @build_type == "RC"
    end

    def beta_build
        @build_type == "Beta"
    end

    def debug_build
        @configuration == "Debug"
    end

    def normalized_branch_name
        @git_branch.gsub("/", "_")
    end

    def export_method
        if debug_build
            "development"
        elsif appstore_build || beta_build || rc_build || playground_build
            "app-store"
        else 
            "ad-hoc"
        end
    end

    def should_sigh_adhoc
        !appstore_build && !rc_build && !beta_build && !playground_build
    end

    # Paths

    def artifact_path(with_filename: true)
        "artifacts/#{artifact_directory}" + (with_filename ? "/#{filename}" : "")
    end

    def build_path
        "build"
    end

    def archive_path(with_filename: true)
        # Put AppStore archive next to .ipa for futher processing
        if appstore_build
            "artifacts/#{artifact_directory}" + (with_filename ? "/#{filename}" : "")
        else 
            "#{build_path}" + (with_filename ? "/#{filename}" : "")
        end
    end

    def filename
        simulator = @for_simulator ? "-simulator" : ""
        "Wire-#{@build_type.downcase}-#{normalized_branch_name}#{simulator}-#{@build_number}"
    end

    def artifact_directory
        result = ""
        suffix = "" 
        if for_simulator 
            suffix = "simulator" 
        else 
            suffix = "device/" + (debug_build ? "debug" : "release")
        end

        case @build_type
        when "Playground"
            result = "playground-#{normalized_branch_name}/#{suffix}"
        when "Development"
            result = "development/#{suffix}"
        when "Internal"
            result = "internal/#{suffix}"
        when "AppStore"
            result = "release/appstore"
        when "RC"
            result = "release/#{suffix}"
        when "Beta"
            result = "release/testflight"
        else
            UI.user_error! "Unknown build type: #{@build_type}"
        end

        # We want to group related artifacts by the filename.
        result + "/" + filename
    end

    # Adding build number to icon

    def process_icon
        # No preprocessing needed for AppStore icons
        if appstore_build
            return
        end
        # Loop over all icons in the iconset
        processed = 0
        Dir.glob("../wire-ios/#{iconset_location}/*.png") do |image|
            width = %x( identify -format %w #{image} )
            image_height = %x( identify -format %h #{image} )
            height = Integer(image_height) / 4.0

            # Add build number to the icon
            %x( convert -background '#0008' -fill white -gravity center -size #{width}x#{height} caption:"#{extra_info}" "#{image}" +swap -gravity south -composite "#{image}" )
            processed += 1
        end
        UI.important("Processed #{processed} icons in #{iconset_location} by adding '#{extra_info}'")
    end

    def extra_info
        prefix = ""
        if rc_build
            prefix = "#{version_from_xcconfig}-"
        end

        prefix + @build_number
    end

    def version_from_xcconfig
        IO.foreach('../wire-ios/Wire-iOS/Resources/Configuration/Version.xcconfig').grep(/WIRE_SHORT_VERSION/).first.split(" = ")[1].chomp
    end

    def iconset_location
        "Configuration/Images.xcassets/AppIcon-#{iconset_name}.appiconset"
    end

    def iconset_name
        if playground_build
            "Development"
        elsif rc_build
            "Release"
        else
            @build_type
        end
    end

    def app_center_app_name
        if playground_build
            "Wire-iOS-Playground"
        elsif development_build
            "Wire-iOS-Development"
        elsif internal_build
            "Wire-iOS-Internal"
        elsif appstore_build
            "Wire-iOS-App-Store"
        elsif rc_build
            "Wire-iOS-Release-Candidate"
        elsif beta_build
            "Wire-iOS-Beta"
        end
    end
end
