require 'git'
require 'base64'

opt_out_usage
default_platform(:ios)

ensure_xcode_version

platform :ios do
    def iPhoneNameForTesting
        ENV['IPHONE_MODEL']
    end
  
    def ios_version
        ENV['IOS_VERSION']
    end

    def appstoreconnect_api_key_file_path 
        './fastlane/appstoreconnect_api_key.json'
    end

    def is_running_on_ci 
        !ENV['CIRRUS_BUILD_ID'].nil?
    end

    def create_keychain_if_needed
        create_keychain(
            default_keychain: false,
            unlock: true,
            timeout: 3600,
            lock_when_sleeps: true
        )
    end

    before_all do |lane|
        create_keychain_if_needed
        Dir.chdir("..") do
            encoded_key = ENV['APPSTORE_API_KEY_BASE64']
            if !File.exist?(appstoreconnect_api_key_file_path) && !encoded_key.nil?
                File.open(appstoreconnect_api_key_file_path, 'w+') {|f| f.write(Base64.decode64(encoded_key)) }
            end
        end
    end

    after_all do |lane|
        begin
            delete_keychain if is_running_on_ci
        rescue
            puts "No keychain found, skipping deletion..."
        end
    end

    desc "Prepare for development"
    lane :prepare_for_development do |options|
        sh "cd .. && ./setup.sh"
        sh "cd .. && ./download-assets.sh --configuration_repo https://github.com/wireapp/wire-ios-build-configuration.git"
    end

    desc "Build & Upload Playground build"
    lane :playground do |options|
        options[:build_type] = "Playground"
        options[:upload_app_center] = true
        options[:upload_dsyms_to_datadog] = true
        options[:produce_debug_builds] = true
        build_and_upload_app(options)
    end

    desc "Build & Upload Testflight Beta build"
    lane :testflight_beta do |options|
        options[:build_type] = "Beta"
        options[:upload_testflight] = true
        options[:upload_dsyms_to_datadog] = true
        options[:produce_debug_builds] = true
        build_and_upload_app(options)
    end

    desc "Build & Upload Public AppStore build"
    lane :appstore_public do |options|
        options[:build_type] = "AppStore"
        options[:upload_dsyms_to_app_center] = true
        options[:upload_app_store] = true
        options[:upload_app_center] = true
        build_and_upload_app(options)
    end
    
    desc "Build & Upload Col 1 Restricted AppStore build"
    lane :appstore_col_1_restricted do |options|
        options[:build_type] = "RC"
        options[:override_folder] = "BK-CI-configuration"
        options[:s3_subfolder] = "custom/bund/column1"
        options[:app_center_app_name] = "Wire-by-Bund-ReleaseCandidate"
        options[:run_security_tests] = !ENV['SKIP_SECURITY_TESTS'] || true
        options[:upload_app_store] = true
        options[:upload_app_center] = true
        options[:produce_debug_builds] = true
        build_and_upload_app(options)
    end

    desc "Build & Upload Col 3 Restricted AppStore build"
    lane :appstore_col_3_restricted do |options|
        options[:build_type] = "RC"
        options[:override_folder] = "COLUMN3-CI-configuration"
        options[:s3_subfolder] = "custom/bund/column3"
        options[:app_center_app_name] = "Wire-by-Bund-Column3"
        options[:run_security_tests] = !ENV['SKIP_SECURITY_TESTS'] || true
        options[:upload_app_store] = true
        options[:upload_app_center] = true
        options[:produce_debug_builds] = true
        build_and_upload_app(options)
    end

    desc "Build & Upload Col 1 Production AppStore build"
    lane :appstore_col_1_prod do |options|
        options[:build_type] = "AppStore"
        options[:override_folder] = "BK-CI-configuration"
        options[:s3_subfolder] = "custom/bund/c1-appstore"
        options[:app_center_app_name] = "Wire-by-Bund-C1-App-Store"
        options[:run_security_tests] = !ENV['SKIP_SECURITY_TESTS'] || true
        options[:upload_app_store] = true
        options[:upload_app_center] = true
        build_and_upload_app(options)
    end

    desc "Build & Upload Col 3 Production AppStore build"
    lane :appstore_col_3_prod do |options|
        options[:build_type] = "AppStore"
        options[:override_folder] = "COLUMN3-CI-configuration"
        options[:s3_subfolder] = "custom/bund/c3-appstore"
        options[:app_center_app_name] = "Wire-by-Bund-C3-App-Store"
        options[:run_security_tests] = !ENV['SKIP_SECURITY_TESTS'] || true
        options[:upload_app_store] = true
        options[:upload_app_center] = true
        build_and_upload_app(options)
    end

    def build_and_upload_app(options)
        options[:build_number] = generate_build_number
        prepare_for_release(options)
        if options[:run_security_tests] || false
            security_plans(options)
        end
        if options[:produce_debug_builds] || false
            build_for_release(options.merge({:configuration => "Debug", :for_simulator => true}))
        end
        build_for_release(options)
        if options[:upload_app_store] || false
            upload_app_store(options)
        end
        if options[:upload_testflight] || false
            upload_testflight(options)
        end
        if options[:upload_app_center] || false
            upload_app_center(options)
        end
        upload_s3(options)
        if options[:upload_dsyms_to_app_center] || false
            upload_dsyms_to_app_center_for_appstore_build(options)
        end
        if options[:upload_dsyms_to_datadog] || false
            upload_dsyms_to_datadog(options)
        end
    end

    def fetch_latest_configuration_repo 
        path = '../wire-ios-build-assets'
        `rm -rf #{path}`
        if is_running_on_ci 
            Git.clone(
                "https://#{ENV['WIRE_INTERNAL_GITHUB_USER']}:#{ENV['WIRE_INTERNAL_GITHUB_TOKEN']}@github.com/wireapp/wire-ios-build-assets.git",
                path
            )
        else
            Git.clone(
                "git@github.com:wireapp/wire-ios-build-assets.git",
                path
            )
        end
    end

    def download_distribution_certificate_and_profiles(build, options)
        if is_running_on_ci 
            match(
                git_url: "https://#{ENV['WIRE_INTERNAL_GITHUB_USER']}:#{ENV['WIRE_INTERNAL_GITHUB_TOKEN']}@github.com/wireapp/wire-ios-certificates.git",
                readonly: true,
                type: "appstore",
                skip_provisioning_profiles: true,
                app_identifier: []
            )
        else
            match(
                readonly: true,
                type: "appstore",
                skip_provisioning_profiles: true,
                app_identifier: []
            )
        end

        app_bundle_id = get_xcconfig_value(
            path: './wire-ios/Configuration/Release.xcconfig',
            name: 'WIRE_BUNDLE_ID'
        )
        puts "downloading provisioning profiles for bundle id: #{app_bundle_id}"
        sigh(
            adhoc: build.should_sigh_adhoc,
            readonly: true,
            api_key_path: appstoreconnect_api_key_file_path,
            app_identifier: app_bundle_id
        )
        sigh(
            adhoc: build.should_sigh_adhoc,
            readonly: true,
            api_key_path: appstoreconnect_api_key_file_path,
            app_identifier: "#{app_bundle_id}.extension-share"
        )
        sigh(
            adhoc: build.should_sigh_adhoc,
            readonly: true,
            api_key_path: appstoreconnect_api_key_file_path,
            app_identifier: "#{app_bundle_id}.extension-notification"
        )
    end

    def generate_build_number
        build_number = `curl -H "Accept: text/plain" -X POST -d '' "https://incrementator.appspot.com/api/v1/code/ORUHILeMbXB4D5Z5conFzYoYpQPjVnyUA4pu56X2MHVJSFxM/increment"`
        build_number
    end

    # "Fetch dependencies and prepare for building a release"
    def prepare_for_release(options)
        fetch_latest_configuration_repo

        build_type = options[:build_type]
        # Delete configurations in case we switch to different branch or repo
        sh "rm -rf ../Configuration"
        if build_type.nil? 
            sh "cd .. && ./setup.sh"
        else
            override_folder = options[:override_folder]
            if override_folder.nil? 
                override_folder = "CI configuration"
            end

            config_repo = options[:config_repo]
            if config_repo.nil? 
                config_repo = "https://github.com/wireapp/wire-ios-build-configuration.git"
            end

            config_branch = options[:config_branch]
            if config_branch.nil? 
                config_branch = "master"
            end

            build = Build.new(options: options)

            sh "cd .. && ./setup.sh -c #{config_repo} -b #{config_branch} -o \'./wire-ios-build-assets/#{override_folder}/#{build_type}\'"
            # Adding extra information to the icon must be done after we check them out in setup script
            build.process_icon()

            download_distribution_certificate_and_profiles(build, options)
        end
    end

    # "Build for release to AppStore or App Center/S3"
    def build_for_release(options)
        build = Build.new(options: options)
        export_method = options[:export_method] || build.export_method

        if build.for_simulator
            Dir.chdir("..") do
                # Build the app for simulator
                sh "xcodebuild -scheme 'Wire-iOS' -configuration 'Debug' -sdk 'iphonesimulator' -derivedDataPath DerivedData -quiet build BUILD_NUMBER=#{build.build_number}"

                # make a "fake" .ipa package that QA will use for installing to simulator
                sh "mkdir -p debug/Payload"
                sh "mkdir -p #{build.artifact_path(with_filename: false)}"
                sh "cp -r DerivedData/Build/Products/Debug-iphonesimulator/*.app debug/Payload/"
                sh "cd debug && zip -r ../#{build.artifact_path(with_filename: true)}.ipa Payload/"
            end
        else
            build_app(
                scheme: "Wire-iOS",
                configuration: build.configuration,
                export_method: export_method,
                export_options: {"iCloudContainerEnvironment": "Production"},
                derived_data_path: "DerivedData",
                archive_path: build.archive_path(with_filename: true),
                buildlog_path: build.build_path,
                output_directory: build.artifact_path(with_filename: false),
                output_name: build.filename,
                include_bitcode: false,
                include_symbols: true,
                xcargs: "BUILD_NUMBER=#{build.build_number}"
            )
        end
    end

    # "Run security plans"
    def security_plans(options)
        build = Build.new(options: options)
      
        for scheme in ["Wire-iOS", "WireDataModel", "WireSyncEngine"] do
            run_tests(
                testplan: "SecurityTests",
                scheme: scheme,
                skip_detect_devices: true,
                configuration: "Debug",
                # test_without_building: true,
                sdk:"iphonesimulator",
                destination: "platform=iOS Simulator,name=#{iPhoneNameForTesting},OS=#{ios_version}",
                # code_coverage: true,
                derived_data_path: "DerivedData",
                buildlog_path: build.build_path,
                output_directory: "#{build.artifact_path(with_filename: false)}/tests/#{scheme}",
                output_types: "junit"
            )    
        end
    end

    # "Upload to AppStore"
    def upload_app_store(options)
        build = Build.new(options: options)
        sh "cp ../wire-ios/Configuration/Appfile ."

        deliver(
            api_key_path: appstoreconnect_api_key_file_path,
            ipa: "#{build.artifact_path(with_filename: true)}.ipa",
            submit_for_review: false,
            automatic_release: false,
            force: true, # Skip HTML report verification
            skip_binary_upload: false,
            run_precheck_before_submit: false,
            precheck_include_in_app_purchases: false,
            skip_app_version_update: true,
            skip_metadata: true,
            skip_screenshots: true
        )
    end

    # "Upload to TestFlight"
    def upload_testflight(options)
        build = Build.new(options: options)
        sh "cp ../wire-ios/Configuration/Appfile ."


        upload_to_testflight(
            api_key_path: appstoreconnect_api_key_file_path,
            ipa: "#{build.artifact_path(with_filename: true)}.ipa",
            skip_waiting_for_build_processing: true
        )
    end

    # "Upload for internal use"
    def upload_app_center (options)
        build = Build.new(options: options)
        changelog = ""

        if build.playground_build
            changelog = "Playground build for #{build.git_branch}"
        elsif build.last_commit.nil? || build.last_commit.empty?
            changelog = "No changelog available"
        else
            changelog = "Changes Since Last Build:\n" + changelog_from_git_commits(
                between: [build.last_commit, "HEAD"],
                pretty: "* [%an] %s",
            )
        end

        app_name = options[:app_center_app_name]
        if app_name.nil? 
            app_name = build.app_center_app_name
        end

        
        sh "echo SHA of IPA is:"
        sh "shasum -a 256 ../#{build.artifact_path(with_filename: true)}.ipa || true"

        appcenter_upload(
          api_token: ENV["APPCENTER_API_TOKEN"],
          owner_name: ENV["APPCENTER_OWNER_NAME"],
          app_name: app_name,
          file: "#{build.artifact_path(with_filename: true)}.ipa",
          release_notes: changelog,
          notify_testers: true,
          mandatory_update: false,
          dsym: "#{build.artifact_path(with_filename: true)}.app.dSYM.zip"
        )
    end

    # "Upload to S3 (Automation builds)"
    def upload_s3(options)
        build = Build.new(options: options)
        s3_subfolder = options[:s3_subfolder]

        if s3_subfolder.nil? 
            s3_path = "s3://#{ENV['S3_BUCKET']}/ios/"
            sh "echo upload to s3 default folder "
        else 
            s3_path = "s3://#{ENV['S3_BUCKET']}/ios/#{s3_subfolder}/"
            sh "echo upload to s3 subfolder: #{s3_subfolder}"
        end



        if build.appstore_build
            sh "cd ../#{build.archive_path(with_filename: false)} && tar -czf #{build.filename}.xcarchive.tgz #{build.filename}.xcarchive"
        end
        
        sh "cd .. && aws s3 cp --recursive --exclude '*'  --include '*.ipa'  --include '*.app.dSYM.zip' --include '*.xcarchive.tgz' --include '*.junit' artifacts/ #{s3_path}"
    end

    # "Upload dSYMs for AppStore crash tracking"
    def upload_dsyms_to_app_center_for_appstore_build(options)
        build = Build.new(options: options)

        if !build.appstore_build
            UI.user_error! "This step is only relevant for AppStore builds"
        end

        appcenter_upload(
          api_token: ENV["APPCENTER_API_TOKEN"],
          owner_name: ENV["APPCENTER_OWNER_NAME"],
          app_name: build.app_center_app_name,
          dsym: "#{build.artifact_path(with_filename: true)}.app.dSYM.zip",
          upload_dsym_only: true,
          notify_testers: true
        )
    end

    # "Upload dsyms to Datadog"
    def upload_dsyms_to_datadog(options)
        build = Build.new(options: options)
        
        upload_symbols_to_datadog(
            api_key: ENV["DATADOG_API_KEY"],
            dsym_paths: [
                "#{build.artifact_path(with_filename: true)}.app.dSYM.zip"
            ],
            site: "datadoghq.eu"
        )
    end
end

class Build
    attr_reader :build_type
    attr_reader :git_branch
    attr_reader :build_number
    attr_reader :last_commit
    attr_reader :for_simulator
    attr_reader :configuration

    def initialize(options:)
        build_number = options[:build_number]
        if build_number.nil?
            UI.user_error! "Pass build_number parameter to fastlane e.g. fastlane build build_number:1234"
        end
        build_type = options[:build_type]
        if build_type.nil? 
            UI.user_error! "Pass build_type parameter, e.g. fastlane build build_type:Development"
        end

        @last_commit = options[:last_commit]
        @build_type = build_type
        if ENV['CIRRUS_BRANCH'].nil? 
            @git_branch = %x(git rev-parse --abbrev-ref HEAD).chomp
        else
            @git_branch = ENV['CIRRUS_BRANCH']
        end

        @build_number = build_number

        for_simulator = options[:for_simulator]
        if for_simulator.nil? 
            @for_simulator = false
        else
            @for_simulator = for_simulator.to_s == 'true'
        end

        configuration = options[:configuration]
        if configuration.nil? 
            @configuration = "Release"
        else
            @configuration = configuration
        end
    end

    # Helpers

    def playground_build
        @build_type == "Playground"
    end

    def appstore_build
        @build_type == "AppStore"
    end

    def development_build
        @build_type == "Development"
    end

    def internal_build
        @build_type == "Internal"
    end


    def rc_build
        @build_type == "RC"
    end

    def beta_build
        @build_type == "Beta"
    end

    def debug_build
        @configuration == "Debug"
    end

    def normalized_branch_name
        @git_branch.gsub("/", "_")
    end

    def export_method
        if debug_build
            "development"
        elsif appstore_build || beta_build || rc_build
            "app-store"
        else 
            "ad-hoc"
        end
    end

    def should_sigh_adhoc
        !appstore_build && !rc_build && !beta_build
    end

    # Paths

    def artifact_path(with_filename: true)
        "artifacts/#{artifact_directory}" + (with_filename ? "/#{filename}" : "")
    end

    def build_path
        "build"
    end

    def archive_path(with_filename: true)
        # Put AppStore archive next to .ipa for futher processing
        if appstore_build
            "artifacts/#{artifact_directory}" + (with_filename ? "/#{filename}" : "")
        else 
            "#{build_path}" + (with_filename ? "/#{filename}" : "")
        end
    end

    def filename
        simulator = @for_simulator ? "-simulator" : ""
        "Wire-#{@build_type.downcase}-#{normalized_branch_name}#{simulator}-#{@build_number}"
    end

    def artifact_directory
        result = ""
        suffix = "" 
        if for_simulator 
            suffix = "simulator" 
        else 
            suffix = "device/" + (debug_build ? "debug" : "release")
        end

        case @build_type
        when "Playground"
            result = "playground-#{normalized_branch_name}/#{suffix}"
        when "Development"
            result = "development/#{suffix}"
        when "Internal"
            result = "internal/#{suffix}"
        when "AppStore"
            result = "release/appstore"
        when "RC"
            result = "release/#{suffix}"
        when "Beta"
            result = "release/testflight"
        else
            UI.user_error! "Unknown build type: #{@build_type}"
        end

        # We want to group related artifacts by the filename.
        result + "/" + filename
    end

    # Adding build number to icon

    def process_icon
        # No preprocessing needed for AppStore icons
        if appstore_build
            return
        end
        # Loop over all icons in the iconset
        processed = 0
        Dir.glob("../wire-ios/#{iconset_location}/*.png") do |image|
            width = %x( identify -format %w #{image} )
            image_height = %x( identify -format %h #{image} )
            height = Integer(image_height) / 4.0

            # Add build number to the icon
            %x( convert -background '#0008' -fill white -gravity center -size #{width}x#{height} caption:"#{extra_info}" "#{image}" +swap -gravity south -composite "#{image}" )
            processed += 1
        end
        UI.important("Proccessed #{processed} icons in #{iconset_location} by adding '#{extra_info}'")
    end

    def extra_info
        prefix = ""
        if rc_build
            version = IO.foreach('../wire-ios/Wire-iOS/Resources/Configuration/Version.xcconfig').grep(/WIRE_SHORT_VERSION/).first.split(" = ")[1].chomp
            prefix = "#{version}-"
        end

        prefix + @build_number
    end

    def iconset_location
        "Configuration/Images.xcassets/AppIcon-#{iconset_name}.appiconset"
    end

    def iconset_name
        if playground_build
            "Development"
        elsif rc_build
            "Release"
        else
            @build_type
        end
    end

    def app_center_app_name
        if playground_build
            "Wire-iOS-Playground"
        elsif development_build
            "Wire-iOS-Development"
        elsif internal_build
            "Wire-iOS-Internal"
        elsif appstore_build
            "Wire-iOS-App-Store"
        elsif rc_build
            "Wire-iOS-Release-Candidate"
        elsif beta_build
            "Wire-iOS-Beta"
        end
    end
end
