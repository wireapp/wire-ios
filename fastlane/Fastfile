opt_out_usage
default_platform(:ios)

platform :ios do
    desc "Fetch dependencies"
    lane :prepare do |options|
        xcode_version = options[:xcode_version]
        # Saving `Carthage bootstrap` running time by reusing the Cathage artifacts.
        # When the Cathage framworks is not pre-built(e.g. in feature branch), this option can save the time of building.
        # When cache_carthage = YES, 
        # copy Carthage folder form ~/tmp/cache/Carthage before running setup.sh and 
        # copy it back after at the end of this lane
        cache_carthage = options[:cache_carthage]

        if !xcode_version.nil? 
            xcversion(version: xcode_version)
        end

        build_type = options[:build_type]
        # Delete configurations in case we switch to different branch or repo
        sh "rm -rf ../Configuration"
        if build_type.nil? 
            sh "cd .. && ./setup.sh"
        else
            override_folder = options[:override_folder]
            if override_folder.nil? 
                override_folder = "CI configuration"
            end

            config_repo = options[:config_repo]
            if config_repo.nil? 
                config_repo = "https://github.com/wireapp/wire-ios-build-configuration.git"
            end

            config_branch = options[:config_branch]
            if config_branch.nil? 
                config_branch = "master"
            end

            build = Build.new(options: options)
            # We need to update the AVS version before running setup script
            build.update_avs_version()

            if cache_carthage == "Yes"
                sh "cd .. && cp -R ~/tmp/cache/Carthage ./Carthage || echo ⚠️ Carthage cache not exist, skip copying"
            end

            sh "cd .. && ./setup.sh -c #{config_repo} -b #{config_branch} -o \'wire-ios-build-assets/#{override_folder}/#{build_type}\'"
            # Adding extra information to the icon must be done after we check them out in setup script
            build.process_icon()

            if cache_carthage == "Yes"
                sh "rm -rf ~/tmp/cache/Carthage"
                sh "cd .. && cp -R ./Carthage ~/tmp/cache/Carthage"
            end
        end
    end

    desc "Build for testing"
    lane :build do |options|
        xcode_version = options[:xcode_version]

        if !xcode_version.nil? 
            xcversion(version: xcode_version)
        end

        build = Build.new(options: options)

        run_tests(
            scheme: "Wire-iOS",
            skip_detect_devices: true,
            configuration: "Debug",
            build_for_testing: true,
            sdk:"iphonesimulator",
            derived_data_path: "DerivedData",
            buildlog_path: "build",
            output_directory: "build",
            output_types: "junit",
            xcargs: "BUILD_NUMBER=#{build.build_number}"
        )
    end

    desc "Test without building"
    lane :test do |options|
        xcode_version = options[:xcode_version]

        ios_version = "15.2"
        if !xcode_version.nil? 
            xcversion(version: xcode_version)

            if xcode_version == "13.2.1"
                ios_version = "15.2"
            elsif xcode_version == "13.1"
                 ios_version = "15.0"
            elsif xcode_version == "12.4"
                ios_version = "14.4"
            end
        end

        run_tests(
            scheme: "Wire-iOS",
            skip_detect_devices: true,
            configuration: "Debug",
            test_without_building: true,
            sdk:"iphonesimulator",
            destination: "platform=iOS Simulator,name=iPhone 8,OS=#{ios_version}",
            code_coverage: true,
            derived_data_path: "DerivedData",
            buildlog_path: "test",
            output_directory: "test",
            output_types: "junit"
        )
    end

    desc "Build for release to AppStore or App Center/S3"
    lane :build_for_release do |options|
        xcode_version = options[:xcode_version]

        if !xcode_version.nil? 
            xcversion(version: xcode_version)
        end

        build = Build.new(options: options)
        export_method = options[:export_method] || build.export_method

        if build.for_simulator
            Dir.chdir("..") do
                # Build the app for simulator
                sh "xcodebuild -scheme 'Wire-iOS' -configuration 'Debug' -sdk 'iphonesimulator' -derivedDataPath DerivedData -quiet build BUILD_NUMBER=#{build.build_number}"

                # make a "fake" .ipa package that QA will use for installing to simulator
                sh "mkdir -p debug/Payload"
                sh "mkdir -p #{build.artifact_path(with_filename: false)}"
                sh "cp -r DerivedData/Build/Products/Debug-iphonesimulator/*.app debug/Payload/"
                sh "cd debug && zip -r ../#{build.artifact_path(with_filename: true)}.ipa Payload/"
            end
        else
            build_app(
                scheme: "Wire-iOS",
                configuration: build.configuration,
                export_method: export_method,
                export_options: {"iCloudContainerEnvironment": "Production"},
                derived_data_path: "DerivedData",
                archive_path: build.archive_path(with_filename: true),
                buildlog_path: build.build_path,
                output_directory: build.artifact_path(with_filename: false),
                output_name: build.filename,
                include_bitcode: false,
                include_symbols: true,
                xcargs: "BUILD_NUMBER=#{build.build_number}"
            )
        end
    end

    desc "Build for release to AppStore without symbols"
    lane :build_for_release_without_symbols do |options|
        xcode_version = options[:xcode_version]

        if !xcode_version.nil? 
            xcversion(version: xcode_version)
        end

        build = Build.new(options: options)
        export_method = options[:export_method] || build.export_method

        build_app(
            scheme: "Wire-iOS",
            configuration: build.configuration,
            export_method: export_method,
            export_options: {"iCloudContainerEnvironment": "Production"},
            derived_data_path: "DerivedData",
            archive_path: build.archive_path(with_filename: true),
            buildlog_path: build.build_path,
            output_directory: build.artifact_path(with_filename: false),
            output_name: build.filename,
            include_bitcode: false,
            include_symbols: false,
            xcargs: "BUILD_NUMBER=#{build.build_number}"
        )
    end

    desc "Upload to AppStore"
    lane :upload_app_store do |options|
        build = Build.new(options: options)
        sh "cp ../wire-ios/Configuration/Appfile ."

        deliver(
            ipa: "#{build.artifact_path(with_filename: true)}.ipa",
            submit_for_review: false,
            automatic_release: false,
            force: true, # Skip HTML report verification
            skip_binary_upload: false,
            run_precheck_before_submit: false,
            precheck_include_in_app_purchases: false,
            skip_app_version_update: true,
            skip_metadata: true,
            skip_screenshots: true
        )
    end

    desc "Upload to TestFlight"
    lane :upload_testflight do |options|
        build = Build.new(options: options)
        sh "cp ../wire-ios/Configuration/Appfile ."


        upload_to_testflight(
            ipa: "#{build.artifact_path(with_filename: true)}.ipa",
            skip_waiting_for_build_processing: true
        )
    end

    desc "Create a new version but not submit for review. Usage: Create release_note.txt in fastlane/metadata/en-US & de-DE folders. Then call $fastlane create_version app_version:X.XX"
    lane :create_version do |options|
        deliver(
            app_version: options[:app_version],
            submit_for_review: false,
            automatic_release: false,
            skip_metadata: false,
            skip_screenshots: true,
            skip_binary_upload: true,
            skip_app_version_update: false,
            force: true
        )
    end

    desc "Submit for review with release note. Usage: Create release_note.txt in fastlane/metadata/en-US & de-DE folders. Then call $fastlane submit_review app_version:X.XX"
    lane :submit_review do |options|
        deliver(
            app_version: options[:app_version],
            submit_for_review: true,
            automatic_release: false,
            skip_metadata: false,
            skip_screenshots: true,
            skip_binary_upload: true,
            skip_app_version_update: false,
            force: true,
            submission_information: {
                add_id_info_serves_ads: false,
                add_id_info_uses_idfa: false
            }
        )
    end

    desc "Upload to S3 (Automation builds)"
    lane :upload_s3 do |options|
        build = Build.new(options: options)
        s3_subfolder = options[:s3_subfolder]

        if s3_subfolder.nil? 
            s3_path = "s3://#{ENV['S3_BUCKET']}/ios/"
            sh "echo upload to s3 default folder "
        else 
            s3_path = "s3://#{ENV['S3_BUCKET']}/ios/#{s3_subfolder}/"
            sh "echo upload to s3 subfolder: #{s3_subfolder}"
        end



        if build.appstore_build
            sh "cd ../#{build.archive_path(with_filename: false)} && tar -czf #{build.filename}.xcarchive.tgz #{build.filename}.xcarchive"
        end
        
        sh "cd .. && aws s3 cp --recursive --exclude '*'  --include '*.ipa' --include '*.xcarchive.tgz' artifacts/ #{s3_path}"
    end

    desc "Upload for internal use"
    lane :upload_app_center do |options|
        build = Build.new(options: options)
        changelog = ""

        if build.playground_build
            changelog = "Playground build for #{build.git_branch}"
        elsif build.avs_build
            changelog = "AVS #{build.avs_version}"
        elsif build.last_commit.nil? || build.last_commit.empty? 
            changelog = "No changelog available"
        else
            changelog = "Changes Since Last Build:\n" + changelog_from_git_commits(
                between: [build.last_commit, "HEAD"],
                pretty: "* [%an] %s",
            )
        end

        app_name = options[:app_name]
        if app_name.nil? 
            app_name = build.app_name
        end

        
        sh "echo SHA of IPA is:"
        sh "shasum -a 256 ../#{build.artifact_path(with_filename: true)}.ipa || true"

        appcenter_upload(
          api_token: ENV["APPCENTER_API_TOKEN"],
          owner_name: ENV["APPCENTER_OWNER_NAME"],
          app_name: app_name,
          file: "#{build.artifact_path(with_filename: true)}.ipa",
          release_notes: changelog,
          notify_testers: true,
          mandatory_update: false,
          dsym: "#{build.artifact_path(with_filename: true)}.app.dSYM.zip"
        )
    end

    desc "Upload dSYMs for AppStore crash tracking"
    lane :upload_app_center_appstore do |options|
        build = Build.new(options: options)

        if !build.appstore_build
            UI.user_error! "This step is only relevant for AppStore builds"
        end

        appcenter_upload(
          api_token: ENV["APPCENTER_API_TOKEN"],
          owner_name: ENV["APPCENTER_OWNER_NAME"],
          app_name: build.app_name,
          dsym: "#{build.artifact_path(with_filename: true)}.app.dSYM.zip",
          upload_dsym_only: true,
          notify_testers: true
        )
    end

    desc "Upload dsyms to Datadog"
    lane :upload_dsyms_datadog do |options|
        build = Build.new(options: options)
        
        upload_symbols_to_datadog(
            api_key: ENV["DATADOG_API_KEY"],
            dsym_paths: [
            "#{build.artifact_path(with_filename: true)}.app.dSYM.zip"
            ],
            site: "datadoghq.eu")
    end

    desc "Run post-test tasks"
    lane :post_test do
        sh "curl -s https://codecov.io/bash > codecov"
        sh "chmod +x codecov"
        codecov = "./codecov -J '^Wire$' -D ../DerivedData"

        if ENV["BUILD_REASON"] == "PullRequest"
            if ENV["CODECOV_TOKEN"].nil?
                UI.user_error! "codecov.io token missing for current repository. Set it in CODECOV_TOKEN environment variable"
            end

            if ENV["BUILD_SOURCEBRANCH"].nil?
                UI.user_error! "Source branch env variable missing. Set BUILD_SOURCEBRANCH to fix it"
            end

            pull_request_number = ENV["BUILD_SOURCEBRANCH"].split("/")[2] # For PRs the branch is in format "refs/pull/1/merge"

            codecov << " -t #{ENV["CODECOV_TOKEN"]} -P #{pull_request_number}"
        end

        sh codecov
    end
end

class Build
    attr_reader :build_type
    attr_reader :git_branch
    attr_reader :build_number
    attr_reader :last_commit
    attr_reader :for_simulator
    attr_reader :configuration
    attr_reader :avs_version

    def initialize(options:)
        build_number = options[:build_number]
        if build_number.nil?
            UI.user_error! "Pass build_number parameter to fastlane e.g. fastlane build build_number:1234"
        end
        build_type = options[:build_type]
        if build_type.nil? 
            UI.user_error! "Pass build_type parameter, e.g. fastlane build build_type:Development"
        end

        @last_commit = options[:last_commit]
        @build_type = build_type
        @git_branch = %x(git rev-parse --abbrev-ref HEAD).chomp
        @build_number = build_number

        for_simulator = options[:for_simulator]
        if for_simulator.nil? 
            @for_simulator = false
        else
            @for_simulator = for_simulator.to_s == 'true'
        end

        avs_version = options[:avs_version]
        if !avs_version.nil? && !avs_version.empty?
            @avs_version = avs_version
        end

        configuration = options[:configuration]
        if configuration.nil? 
            @configuration = "Release"
        else
            @configuration = configuration
        end
    end

    # Helpers

    def playground_build
        @build_type == "Playground"
    end

    def appstore_build
        @build_type == "AppStore"
    end

    def development_build
        @build_type == "Development"
    end

    def internal_build
        @build_type == "Internal"
    end

    def avs_build
        @build_type == "AVS"
    end

    def rc_build
        @build_type == "RC"
    end

    def beta_build
        @build_type == "Beta"
    end

    def debug_build
        @configuration == "Debug"
    end

    def normalized_branch_name
        @git_branch.gsub("/", "_")
    end

    def export_method
        if debug_build
            "development"
        elsif appstore_build || beta_build
            "app-store"
        else 
            "ad-hoc"
        end
    end

    # Paths

    def artifact_path(with_filename: true)
        "artifacts/#{artifact_directory}" + (with_filename ? "/#{filename}" : "")
    end

    def build_path
        "build"
    end

    def archive_path(with_filename: true)
        # Put AppStore archive next to .ipa for futher processing
        if appstore_build
            "artifacts/#{artifact_directory}" + (with_filename ? "/#{filename}" : "")
        else 
            "#{build_path}" + (with_filename ? "/#{filename}" : "")
        end
    end

    def filename
        simulator = @for_simulator ? "-simulator" : ""
        "Wire-#{@build_type.downcase}-#{normalized_branch_name}#{simulator}-#{@build_number}"
    end

    def artifact_directory
        suffix = "" 
        if for_simulator 
            suffix = "simulator" 
        else 
            suffix = "device/" + (debug_build ? "debug" : "release")
        end

        case @build_type
        when "Playground"
            "playground-#{normalized_branch_name}/#{suffix}"
        when "Development"
            "development/#{suffix}"
        when "Internal"
            "internal/#{suffix}"
        when "AppStore"
            "release/appstore"
        when "AVS"
            "avs-experimental/#{suffix}"
        when "RC"
            "release/#{suffix}"
        when "Beta"
            "release/testflight"
        else
            UI.user_error! "Unknown build type: #{@build_type}"
        end
    end

    # Force custom AVS version

    def update_avs_version
        if @avs_version.nil?
            UI.important("Using AVS version specified in source control")
        else
            %x( sed -i '' 's/^export APPSTORE_AVS_VERSION=.*/export APPSTORE_AVS_VERSION='"#{@avs_version}"'/g' ../avs-versions )
            UI.important("Using custom AVS version: #{@avs_version}")
        end
    end

    # Adding build number to icon

    def process_icon
        # No preprocessing needed for AppStore icons
        if appstore_build
            return
        end
        # Loop over all icons in the iconset
        processed = 0
        Dir.glob("../#{iconset_location}/*.png") do |image|
            width = %x( identify -format %w #{image} )
            image_height = %x( identify -format %h #{image} )
            height = Integer(image_height) / 4.0

            # Add build number to the icon
            %x( convert -background '#0008' -fill white -gravity center -size #{width}x#{height} caption:"#{extra_info}" "#{image}" +swap -gravity south -composite "#{image}" )
            processed += 1
        end
        UI.important("Proccessed #{processed} icons in #{iconset_location} by adding '#{extra_info}'")
    end

    def extra_info
        prefix = ""
        if !@avs_version.nil?
            prefix = "AVS:#{@avs_version}-"
        end
        if rc_build
            version = IO.foreach('../Wire-iOS/Resources/Configuration/Version.xcconfig').grep(/WIRE_SHORT_VERSION/).first.split(" = ")[1].chomp
            prefix = "#{version}-"
        end

        prefix + @build_number
    end

    def iconset_location
        "Configuration/Images.xcassets/AppIcon-#{iconset_name}.appiconset"
    end

    def iconset_name
        if playground_build || avs_build
            "Development"
        elsif rc_build
            "Release"
        else
            @build_type
        end
    end

    def app_name
        if playground_build
            "Wire-iOS-Playground"
        elsif avs_build
            "Wire-iOS-AVS"
        elsif development_build
            "Wire-iOS-Development"
        elsif internal_build
            "Wire-iOS-Internal"
        elsif appstore_build
            "Wire-iOS-App-Store"
        elsif rc_build
            "Wire-iOS-Release-Candidate"
        elsif beta_build
            "Wire-iOS-Beta"
        end
    end
end
