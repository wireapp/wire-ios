on:
  workflow_call:
    inputs:
      wire-ios:
        type: boolean
        default: false
        required: false
      wire-reusable-ui-components:
        type: boolean
        default: false
        required: false
      wire-design:
        type: boolean
        default: false
        required: false
      wire-ios-sync-engine:
        type: boolean
        default: false
        required: false
      wire-ios-data-model:
        type: boolean
        default: false
        required: false
      wire-ios-system:
        type: boolean
        default: false
        required: false
      wire-ios-request-strategy:
        type: boolean
        default: false
        required: false
      wire-api:
        type: boolean
        default: false
        required: false
      wire-domain:
        type: boolean
        default: false
        required: false
      wire-ios-transport:
        type: boolean
        default: false
        required: false
      wire-ios-share-engine:
        type: boolean
        default: false
        required: false
      wire-ios-cryptobox:
        type: boolean
        default: false
        required: false
      wire-ios-mocktransport:
        type: boolean
        default: false
        required: false
      wire-ios-notification-engine:
        type: boolean
        default: false
        required: false
      wire-ios-protos:
        type: boolean
        default: false
        required: false
      wire-ios-images:
        type: boolean
        default: false
        required: false
      wire-ios-link-preview:
        type: boolean
        default: false
        required: false
      wire-ios-utilities:
        type: boolean
        default: false
        required: false
      wire-ios-testing:
        type: boolean
        default: false
        required: false
      all:
        type: boolean
        default: false
        required: false
    secrets:
      ZENKINS_USERNAME:
        required: true
      DD_API_KEY:
        required: true

env: # https://docs.fastlane.tools/getting-started/ios/setup/
  LC_ALL: en_US.UTF-8
  LANG: en_US.UTF-8

jobs:
  run-tests:
    runs-on: ghcr.io/cirruslabs/macos-runner:sonoma
    env:
      GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_USERNAME: ${{ secrets.ZENKINS_USERNAME }}
      SLACK_WEBHOOK_URL: ${{ secrets.WIRE_IOS_CI_WEBHOOK }}

    steps:
      - uses: actions/checkout@v3

      - name: Retrieve Xcode version
        run: |
          echo "XCODE_VERSION=$(cat .xcode-version)" >> $GITHUB_OUTPUT
        id: xcode-version

      - uses: maxim-lobanov/setup-xcode@v1.5.1
        with:
          xcode-version: ${{ steps.xcode-version.outputs.XCODE_VERSION }}

      - name: Load .env file
        uses: xom9ikk/dotenv@v2
        with:
            path: fastlane/

      - name: Restore Carthage Cache
        uses: actions/cache@v3
        id: cache-carthage
        with:
          path: Carthage
          key: ${{ runner.os }}-xcode${{ steps.xcode-version.outputs.XCODE_VERSION }}-carthage-${{ hashFiles('Cartfile.resolved') }}

      - name: Restore Danger results
        id: restore-danger-results
        uses: actions/cache/restore@v4
        with:
          path: Danger.results
          key: ${{ github.event.pull_request.base.ref }}-${{ runner.os }}-xcode${{ steps.xcode-version.outputs.XCODE_VERSION }}-Danger.results

      - name: Bootstrap Carthage if no cache
        if: steps.cache-carthage.outputs.cache-hit != 'true'
        run: ./scripts/carthage.sh bootstrap --platform ios --use-xcframeworks

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Setup workspace
        run: |
          ./setup.sh

      - name: Setup simulator
        run: |
          bundle exec fastlane prepare_for_tests

      # WireSyncEngine

      - name: Build WireSyncEngine
        if: ${{ inputs.wire-ios-sync-engine || inputs.all }}
        run: |
          echo "WireSyncEngine has changes"
          echo "Building WireSyncEngine..."
          xcodebuild build-for-testing -workspace wire-ios-mono.xcworkspace -scheme WireSyncEngine -resultBundlePath xcodebuild-wire-ios-sync-engine.xcresult -destination 'platform=iOS Simulator,OS=${{ env.IOS_VERSION }},name=${{ env.IPHONE_MODEL }}' | tee xcodebuild-wire-ios-sync-engine.log | bundle exec xcpretty

      - name: Run Danger for WireSyncEngine
        # TODO: WPB-9872 revert after fixing Dangerfile
        if: false # ${{ inputs.wire-ios-sync-engine || inputs.all }}
        env:
          DANGER_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          XCRESULT_PATH: xcodebuild-wire-ios-sync-engine.xcresult
        run: |
          bundle exec danger --dangerfile=Dangerfile.warning-workaround --danger_id="Run Danger for WireSyncEngine" --verbose

      - uses: kronenthaler/analyze-xcoderesults-action@0.1.9
        if: ${{ inputs.wire-ios-sync-engine || inputs.all }}
        with:
          results: xcodebuild-wire-ios-sync-engine.xcresult
          warningAnnotations: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Test WireSyncEngine
        if: ${{ inputs.wire-ios-sync-engine || inputs.all }}
        run: |
          echo "Testing WireSyncEngine..."
          xcodebuild test -retry-tests-on-failure -workspace wire-ios-mono.xcworkspace -scheme WireSyncEngine -destination 'platform=iOS Simulator,OS=${{ env.IOS_VERSION }},name=${{ env.IPHONE_MODEL }}' | tee -a xcodebuild-wire-ios-sync-engine.log | bundle exec xcpretty --report junit --output build/reports/WireSyncEngine.junit
          exit ${PIPESTATUS[0]}

      - uses: actions/cache/save@v4
        with:
          path: Danger.results
          key: ${{ steps.restore-danger-results.outputs.cache-primary-key }}

      - name: Upload Test Reports as Artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-reports
          path: |
            build/reports/*.junit

      - name: Prepare visual representation of test results
        uses: EnricoMi/publish-unit-test-result-action/macos@v2
        if: always()
        with:
          files: |
            build/reports/*.junit
          compare_to_earlier_commit: false

      - name: Archiving DerivedData Logs
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: derived-data-xcode
          path: |
            /Users/runner/Library/Developer/Xcode/DerivedData/**/Logs/**
            ~/Library/Logs/DiagnosticReports/**

      - name: Notify on Wire if failed
        if: ${{ failure() && github.ref_name == 'develop' }}
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: "ðŸ†˜ Tests for 'develop' failed ðŸ†˜\ncommit: https://github.com/wireapp/wire-ios-mono/commit/${{ github.sha }}\n**Triggered by:** ${{ github.triggering_actor }}\n**Build log:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\n"

  upload-test-results-datadadog:
    runs-on: ubuntu-latest
    needs: run-tests
    if: always()
    steps:
      - name: Download tests results
        uses: actions/download-artifact@v3
        continue-on-error: true
        with:
          name: test-reports
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install datadog-ci
        run: npm install -g @datadog/datadog-ci
      - name: "Upload results"
        env:
          DATADOG_API_KEY: ${{ secrets.DD_API_KEY }}
          DD_ENV: ci
          DATADOG_SITE: datadoghq.eu
        run: |
          find . -name "*.junit" -type f | tr '\n' ' ' | xargs -L 1 datadog-ci junit upload --service wire-ios-mono .
