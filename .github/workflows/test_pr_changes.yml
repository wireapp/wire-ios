name: Test Pull Request Changes

on: 
  pull_request:
    types: [opened, synchronize, edited, ready_for_review]
  merge_group:
    types: [checks_requested]

# This is what will cancel the workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect-changes-new:
    if: github.event.pull_request.draft == false
    runs-on: ghcr.io/cirruslabs/macos-runner:sonoma
    env:
      GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_USERNAME: ${{ secrets.ZENKINS_USERNAME }}
      SLACK_WEBHOOK_URL: ${{ secrets.WIRE_IOS_CI_WEBHOOK }}

    steps:
      - uses: actions/checkout@v3
      
      - name: Retrieve Xcode version
        run: |
          echo "XCODE_VERSION=$(cat .xcode-version)" >> $GITHUB_OUTPUT
        id: xcode-version

      - uses: maxim-lobanov/setup-xcode@v1.5.1
        with:
          xcode-version: ${{ steps.xcode-version.outputs.XCODE_VERSION }}

      - name: Load .env file
        uses: xom9ikk/dotenv@v2
        with:
            path: fastlane/

      - name: Restore Carthage Cache
        uses: actions/cache@v3
        id: cache-carthage
        with:
          path: Carthage
          key: ${{ runner.os }}-xcode${{ steps.xcode-version.outputs.XCODE_VERSION }}-carthage-${{ hashFiles('Cartfile.resolved') }}

      - name: Bootstrap Carthage if no cache
        if: steps.cache-carthage.outputs.cache-hit != 'true'
        run: ./scripts/carthage.sh bootstrap --platform ios --use-xcframeworks

      - name: Restore Bundler Cache
        uses: actions/cache@v3
        id: cache-bundler
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-bundler-${{ hashFiles('Gemfile.lock') }}

      - name: Setup workspace
        run: |
          ./setup.sh
      
      - name: Setup simulator
        run: |
          bundle exec fastlane prepare_for_tests
      
      - name: Setup selective testing
        run: |
          mint run mikeger/XcodeSelectiveTesting@0.9.3 --base-branch $GITHUB_BASE_REF
      - name: Run tests
        run: |
          xcodebuild test -workspace wire-ios-mono.xcworkspace -scheme Wire-iOS -testPlan AllTests -destination 'platform=iOS Simulator,OS=${{ env.IOS_VERSION }},name=${{ env.IPHONE_MODEL }}' | tee xcodebuild-wire-ios.log | bundle exec xcpretty --report junit --output build/reports/Wire-iOS.junit

      - name: Upload Failed snapshots
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Failed Snapshots and log
          path: |
            wire-ios/SnapshotResults/    
            xcodebuild*.log

      - name: Upload Test Reports as Artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-reports
          path: |
            build/reports/*.junit

      - name: Prepare visual representation of test results
        uses: EnricoMi/publish-unit-test-result-action/macos@v2
        if: always()
        with:
          files: |
            build/reports/*.junit
          compare_to_earlier_commit: false
            
      - name: Archiving DerivedData Logs
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: derived-data-xcode
          path: |
            /Users/runner/Library/Developer/Xcode/DerivedData/**/Logs/**
            ~/Library/Logs/DiagnosticReports/**

      - name: Notify on Wire if failed
        if: ${{ failure() && github.ref_name == 'develop' }}
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: "ðŸ†˜ Tests for 'develop' failed ðŸ†˜\ncommit: https://github.com/wireapp/wire-ios-mono/commit/${{ github.sha }}\n**Triggered by:** ${{ github.triggering_actor }}\n**Build log:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\n"

  upload-test-results-datadadog:
    runs-on: ubuntu-latest
    needs: run-tests
    if: always()
    steps:
      - name: Download tests results
        uses: actions/download-artifact@v3
        continue-on-error: true
        with:
          name: test-reports
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install datadog-ci
        run: npm install -g @datadog/datadog-ci
      - name: "Upload results"
        env:
          DATADOG_API_KEY: ${{ secrets.DD_API_KEY }}
          DD_ENV: ci
          DATADOG_SITE: datadoghq.eu
        run: |
          find . -name "*.junit" -type f | tr '\n' ' ' | xargs -L 1 datadog-ci junit upload --service wire-ios-mono .


  # This job will tell us which frameworks have source code changes.
  # We'll use the results to run tests only for changed frameworks.
  detect-changes:
    if: >
      github.event.action != 'edited' || (
        github.event.changes.title == null &&
        github.event.changes.body == null &&
        github.event.changes.assignees == null &&
        github.event.changes.reviewers == null &&
        github.event.changes.labels == null
      ) && github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    # Set job outputs to values from filter step
    outputs:
      wire-ios: ${{ steps.filter.outputs.wire-ios == 'true' || steps.filter.outputs.carthage == 'true' }}
      wire-ui: ${{ steps.filter.outputs.wire-ui }}
      wire-ios-sync-engine: ${{ steps.filter.outputs.wire-ios-sync-engine }}
      wire-ios-data-model: ${{ steps.filter.outputs.wire-ios-data-model }}
      wire-ios-system: ${{ steps.filter.outputs.wire-ios-system }}
      wire-ios-request-strategy: ${{ steps.filter.outputs.wire-ios-request-strategy }}
      wire-api: ${{ steps.filter.outputs.wire-api }}
      wire-analytics: ${{ steps.filter.outputs.wire-analytics }}
      wire-datadog: ${{ steps.filter.outputs.wire-datadog }}
      wire-domain-project: ${{ steps.filter.outputs.wire-domain-project }}
      wire-domain: ${{ steps.filter.outputs.wire-domain }}
      wire-ios-transport: ${{ steps.filter.outputs.wire-ios-transport }}
      wire-ios-share-engine: ${{ steps.filter.outputs.wire-ios-share-engine }}
      wire-ios-cryptobox: ${{ steps.filter.outputs.wire-ios-cryptobox }}
      wire-ios-mocktransport: ${{ steps.filter.outputs.wire-ios-mocktransport }}
      wire-ios-notification-engine: ${{ steps.filter.outputs.wire-ios-notification-engine }}
      wire-ios-protos: ${{ steps.filter.outputs.wire-ios-protos }}
      wire-ios-images: ${{ steps.filter.outputs.wire-ios-images }}
      wire-ios-link-preview : ${{ steps.filter.outputs.wire-ios-link-preview }}
      wire-ios-utilities: ${{ steps.filter.outputs.wire-ios-utilities }}
      wire-ios-testing: ${{ steps.filter.outputs.wire-ios-testing }}
      wire-foundation: ${{ steps.filter.outputs.wire-foundation }}
      scripts: ${{ steps.filter.outputs.scripts }}

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: 'true'
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            wire-ios:
              - 'wire-ios/**'
            wire-ui:
              - 'WireUI/**'
            wire-ios-share-engine:
              - 'wire-ios-share-engine/**'
            wire-ios-notification-engine:
              - 'wire-ios-notification-engine/**'
            wire-ios-sync-engine:
              - 'wire-ios-sync-engine/**'
            wire-ios-request-strategy:
              - 'wire-ios-request-strategy/**'
            wire-api:
              - 'WireAPI/**'
            wire-analytics:
              - 'WireAnalytics/Sources/WireAnalytics/**'
            wire-datadog:
              - 'WireAnalytics/Sources/WireDatadog/**'
            wire-domain-project:
              - 'WireDomain/Project/**'
              - 'WireDomain/Sources/WireDomain/**'
              - 'WireDomain/Sources/WireDomainSupport/**'
            wire-domain:
              - 'WireDomain/*.*'
              - 'WireDomain/Sources/Package/**'
              - 'WireDomain/Sources/PackageSupport/**'
            wire-ios-data-model:
              - 'wire-ios-data-model/**'
            wire-ios-transport:
              - 'wire-ios-transport/**'
            wire-ios-cryptobox:
              - 'wire-ios-cryptobox/**'
            wire-ios-mocktransport:
              - 'wire-ios-mocktransport/**'
            wire-ios-protos:
              -  'wire-ios-protos/**'
            wire-ios-images:
              - 'wire-ios-images/**'
            wire-ios-link-preview:
              - 'wire-ios-link-preview/**'
            wire-ios-utilities:
              - 'wire-ios-utilities/**'
            wire-ios-testing:
              - 'wire-ios-testing/**'
            wire-foundation:
              - 'WireFoundation/**'
            wire-ios-system:
              - 'wire-ios-system/**'
            scripts:
              - 'scripts/**'
            carthage:
              - 'Cartfile.resolved'

  trigger_tests_pr:
    needs: detect-changes
    uses: ./.github/workflows/_reusable_run_tests.yml
    with:
      wire-ios: ${{ needs.detect-changes.outputs.wire-ios == 'true' }}
      wire-ui: ${{ needs.detect-changes.outputs.wire-ui == 'true' }}
      wire-ios-sync-engine: ${{ needs.detect-changes.outputs.wire-ios-sync-engine == 'true' }}
      wire-ios-data-model: ${{ needs.detect-changes.outputs.wire-ios-data-model == 'true' }}
      wire-ios-system: ${{ needs.detect-changes.outputs.wire-ios-system == 'true' }}
      wire-ios-request-strategy: ${{ needs.detect-changes.outputs.wire-ios-request-strategy == 'true' }}
      wire-api: ${{ needs.detect-changes.outputs.wire-api == 'true' }}
      wire-analytics: ${{ needs.detect-changes.outputs.wire-analytics == 'true' }}
      wire-datadog: ${{ needs.detect-changes.outputs.wire-datadog == 'true' }}
      wire-domain-project: ${{ needs.detect-changes.outputs.wire-domain-project == 'true' }}
      wire-domain: ${{ needs.detect-changes.outputs.wire-domain == 'true' }}
      wire-ios-transport: ${{ needs.detect-changes.outputs.wire-ios-transport == 'true' }}
      wire-ios-share-engine: ${{ needs.detect-changes.outputs.wire-ios-share-engine == 'true' }}
      wire-ios-cryptobox: ${{ needs.detect-changes.outputs.wire-ios-cryptobox == 'true' }}
      wire-ios-mocktransport: ${{ needs.detect-changes.outputs.wire-ios-mocktransport == 'true' }}
      wire-ios-notification-engine: ${{ needs.detect-changes.outputs.wire-ios-notification-engine == 'true' }}
      wire-ios-protos: ${{ needs.detect-changes.outputs.wire-ios-protos == 'true' }}
      wire-ios-images: ${{ needs.detect-changes.outputs.wire-ios-images == 'true' }}
      wire-ios-link-preview: ${{ needs.detect-changes.outputs.wire-ios-link-preview == 'true' }}
      wire-ios-utilities: ${{ needs.detect-changes.outputs.wire-ios-utilities == 'true' }}
      wire-ios-testing: ${{ needs.detect-changes.outputs.wire-ios-testing == 'true' }}
      wire-foundation: ${{ needs.detect-changes.outputs.wire-foundation == 'true' }}
      scripts: ${{ needs.detect-changes.outputs.scripts == 'true' }}
    secrets: inherit
