on:
  workflow_call:
    inputs:
      fastlane_action:
        required: true
        type: string
    secrets:
      KEYCHAIN_PASSWORD:
        required: true
      APPSTORE_API_KEY_BASE64:
        required: true
      MATCH_PASSWORD:
        required: true
      WIRE_INTERNAL_GITHUB_USER:
        required: true
      WIRE_INTERNAL_GITHUB_TOKEN:
        required: true
      APPCENTER_API_TOKEN:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      DD_API_KEY:
        required: true
      C1_S3_SUBFOLDER_RESTRICTED:
        required: true
      C1_APP_CENTER_APP_NAME_RESTRICTED:
        required: true
      C1_S3_SUBFOLDER_PRODUCTION:
        required: true
      C1_APP_CENTER_APP_NAME_PRODUCTION:
        required: true
      C3_S3_SUBFOLDER_RESTRICTED:
        required: true
      C3_APP_CENTER_APP_NAME_RESTRICTED:
        required: true
      C3_S3_SUBFOLDER_PRODUCTION:
        required: true
      C3_APP_CENTER_APP_NAME_PRODUCTION:
        required: true
      SUBMODULE_PAT:
        required: true

env: # https://docs.fastlane.tools/getting-started/ios/setup/
  LC_ALL: en_US.UTF-8
  LANG: en_US.UTF-8

permissions: 
  checks: write

jobs:
  changelog:
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout Git repository with history for all branches and tags'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 'Calculate diff between HEAD and latest tag'
        run: echo "HEAD_TAG_DIFF=$(git diff HEAD $(git tag | grep -E '[a,A][p,P]+[s,S][t,T][o,O][r,R][e,E]\/[0-9]+\.[0-9]+.*' | tail -n 1) | wc -l | xargs)" >> "$GITHUB_ENV"
     
      - name: 'Set current Git tag to HEAD'
        if: "${{ env.HEAD_TAG_DIFF != '0' }}"
        run: echo "CURRENT_TAG=$(git rev-parse HEAD)" >> "$GITHUB_ENV"
      - name: 'Set previous Git tag to latest tag if comparing to head'
        if: "${{ env.HEAD_TAG_DIFF != '0' }}"
        run: echo "PREVIOUS_TAG=$(git tag | grep -E '[a,A][p,P]+[s,S][t,T][o,O][r,R][e,E]\/[0-9]+\.[0-9]+.*' | tail -n 1)" >> "$GITHUB_ENV"

      - name: 'Set current Git tag to latest tagged commit'
        if: "${{ env.HEAD_TAG_DIFF == '0' }}"
        run: echo "CURRENT_TAG=$(git tag | grep -E '[a,A][p,P]+[s,S][t,T][o,O][r,R][e,E]\/[0-9]+\.[0-9]+.*' | tail -n 1)" >> "$GITHUB_ENV"
      - name: 'Set previous Git tag previous tag because head is latest tag'
        if: "${{ env.HEAD_TAG_DIFF == '0' }}"
        run: echo "PREVIOUS_TAG=$(git tag | grep -E '[a,A][p,P]+[s,S][t,T][o,O][r,R][e,E]\/[0-9]+\.[0-9]+.*' | tail -n 2 | head -n 1)" >> "$GITHUB_ENV"

      - name: 'Print environment variables'
        run: |
          echo -e "PREVIOUS_TAG = $PREVIOUS_TAG"
          echo -e "CURRENT_TAG = $CURRENT_TAG"
          echo -e "Node.js version = $(node --version)"

      - name: 'Generate changelog'
        run: |
          echo "{}" > ./package.json
          npx generate-changelog@1.8.0 -t "$PREVIOUS_TAG...$CURRENT_TAG"
      - name: 'Upload changelog'
        uses: actions/upload-artifact@v2
        with:
          name: CHANGELOG.md
          path: ./CHANGELOG.md

  build_and_release:
    runs-on: ghcr.io/cirruslabs/macos-sonoma-xcode:15.3
    needs: changelog
    env:
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      MATCH_KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      APPSTORE_API_KEY_BASE64: ${{ secrets.APPSTORE_API_KEY_BASE64 }}
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      WIRE_INTERNAL_GITHUB_USER: ${{ secrets.WIRE_INTERNAL_GITHUB_USER }}
      WIRE_INTERNAL_GITHUB_TOKEN: ${{ secrets.WIRE_INTERNAL_GITHUB_TOKEN }}
      APPCENTER_API_TOKEN: ${{ secrets.APPCENTER_API_TOKEN }}
      APPCENTER_OWNER_NAME: ${{ secrets.APPCENTER_OWNER_NAME }}
      S3_BUCKET: "z-lohika"
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
      DATADOG_API_KEY: ${{ secrets.DD_API_KEY }}
      C1_S3_SUBFOLDER_RESTRICTED: ${{ secrets.C1_S3_SUBFOLDER_RESTRICTED }}
      C1_APP_CENTER_APP_NAME_RESTRICTED: ${{ secrets.C1_APP_CENTER_APP_NAME_RESTRICTED }}
      C1_S3_SUBFOLDER_PRODUCTION: ${{ secrets.C1_S3_SUBFOLDER_PRODUCTION }}
      C1_APP_CENTER_APP_NAME_PRODUCTION: ${{ secrets.C1_APP_CENTER_APP_NAME_PRODUCTION }}
      C2_S3_SUBFOLDER_RESTRICTED: ${{ secrets.C2_S3_SUBFOLDER_RESTRICTED }}
      C2_APP_CENTER_APP_NAME_RESTRICTED: ${{ secrets.C2_APP_CENTER_APP_NAME_RESTRICTED }}
      C2_S3_SUBFOLDER_PRODUCTION: ${{ secrets.C2_S3_SUBFOLDER_PRODUCTION }}
      C2_APP_CENTER_APP_NAME_PRODUCTION: ${{ secrets.C2_APP_CENTER_APP_NAME_PRODUCTION }}
      C3_S3_SUBFOLDER_RESTRICTED: ${{ secrets.C3_S3_SUBFOLDER_RESTRICTED }}
      C3_APP_CENTER_APP_NAME_RESTRICTED: ${{ secrets.C3_APP_CENTER_APP_NAME_RESTRICTED }}
      C3_S3_SUBFOLDER_PRODUCTION: ${{ secrets.C3_S3_SUBFOLDER_PRODUCTION }}
      C3_APP_CENTER_APP_NAME_PRODUCTION: ${{ secrets.C3_APP_CENTER_APP_NAME_PRODUCTION }}
      SLACK_WEBHOOK_URL: ${{ secrets.WIRE_IOS_CI_WEBHOOK }}

    steps:
      - name: Add Mask
        run: echo "::add-mask::${{ secrets.CLIENT_NAME_C1_C2_C3 }}"
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.SUBMODULE_PAT }}
          submodules: recursive
      - name: Download changelog
        uses: actions/download-artifact@v3
        with:
          name: CHANGELOG.md
      - name: Retrieve Xcode version
        run: |
          echo "XCODE_VERSION=$(cat .xcode-version)" >> $GITHUB_OUTPUT
        id: xcode-version
      - uses: maxim-lobanov/setup-xcode@v1.5.1
        with:
          xcode-version: ${{ steps.xcode-version.outputs.XCODE_VERSION }}
      - name: Restore Carthage Cache
        uses: actions/cache@v3
        id: cache-carthage
        with:
          path: Carthage
          key: ${{ runner.os }}-xcode${{ steps.xcode-version.outputs.XCODE_VERSION }}-carthage-${{ hashFiles('Cartfile.resolved') }}
      - name: Bootstrap Carthage if no cache
        if: steps.cache-carthage.outputs.cache-hit != 'true'
        run: ./scripts/carthage.sh bootstrap --platform ios --use-xcframeworks
      - name: Restore Bundler Cache
        uses: actions/cache@v3
        id: cache-bundler
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-bundler-${{ hashFiles('Gemfile.lock') }}
      - name: Run setup
        run: sh ./setup.sh
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
      - name: Trigger build
        run: bundle exec fastlane ${{ inputs.fastlane_action }}
      - name: Archiving Logs
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: build-logs
          path: |
            /Users/runner/Library/Developer/Xcode/DerivedData/**/Logs/**
            ~/Library/Logs/DiagnosticReports/**
            build/**


      - name: Archiving env variables
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: post-build-env
          path: |
            **/.post_build/*.env
      - name: Load .env file
        if: always()
        uses: xom9ikk/dotenv@v2
        with:
          path: fastlane/.post_build
      - uses: akiojin/decode-base64-github-action@v0.1.0
        id: base64-decoded-RELEASE_NOTES
        with:
          base64: ${{ env.RELEASE_NOTES }}
      - uses: akiojin/decode-base64-github-action@v0.1.0
        id: base64-decoded-S3_PATHS
        with:
          base64: ${{ env.S3_PATHS }}
      - name: Notify on Wire if succeeded
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: "**${{ env.APP_NAME }}** (version: ${{ env.BUILD_VERSION }} build: ${{ env.BUILD_NUMBER }}) is ready to test  ðŸš€\n${{ steps.base64-decoded-RELEASE_NOTES.outputs.decoded }}\n**Tap on iOS device to install:** ${{ env.APPCENTER_INSTALL_LINK }}\n**AWS S3 Paths:**\n`${{ steps.base64-decoded-S3_PATHS.outputs.decoded }}`\n**Triggered by:** ${{ github.triggering_actor }}\n**Build log:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\n"
      - name: Notify on Wire if failed
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: "ðŸ†˜ Build **${{ env.APP_NAME }}** (version: ${{ env.BUILD_VERSION }} build: ${{ env.BUILD_NUMBER }}) failed ðŸ†˜\n**Triggered by:** ${{ github.triggering_actor }}\n**Build log:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\n"
