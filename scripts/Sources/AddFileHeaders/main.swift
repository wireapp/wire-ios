//
// Wire
// Copyright (C) 2024 Wire Swiss GmbH
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see http://www.gnu.org/licenses/.
//
import Foundation

/*
run with:
cd scripts && swift run AddFileHeaders
 */

let header = """
//
// Wire
// Copyright (C) 2024 Wire Swiss GmbH
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see http://www.gnu.org/licenses/.
//
"""

let repositoryRootPath = FileManager.default.currentDirectoryPath + "/.."

let dirctoryEnumerator = FileManager.default.enumerator(atPath: repositoryRootPath)
outerLoop: while let file = dirctoryEnumerator?.nextObject() as? String {
    let excluded = [
        "Package.swift",
        "sourcery",
        "fastlane",
        "Carthage",
        "DerivedData",
        "vendor",
        "wire-ios/Templates",
        "wire-ios/Wire-iOS/Generated/Assets+Generated.swift",
        "wire-ios/Wire-iOS/Generated/Strings+Generated.swift",
        "wire-ios-protos/Protos/messages.pb.swift",
        "wire-ios-protos/Protos/mls.pb.swift",
        "wire-ios-protos/Protos/otr.pb.swift",
        "wire-ios-data-model/sourcery/generated/AutoMockable.generated.swift",
        "wire-ios-sync-engine/sourcery/generated/AutoMockable.generated.swift",
        "wire-ios-sync-engine/sourcery/generated/AutoMockable.manual.swift",
        "wire-ios-request-strategy/sourcery/generated/AutoMockable.generated.swift",
        "wire-ios/WireCommonComponents/Icons/Autogenerated/StyleKitIcons.generated.swift"
    ]
    for excluded in excluded where file.contains(excluded) {
        continue outerLoop
    }

    let suffixes = [".swift", ".xcconfig", ".h", ".m"]
    guard suffixes.contains(where: { file.hasSuffix($0) }) else { continue }

    let file = repositoryRootPath.appending("/").appending(file)
    guard try! URL(fileURLWithPath: file).resourceValues(forKeys: [.isSymbolicLinkKey]).isSymbolicLink == false else { continue }

    print(file)
    let content = try! String(contentsOfFile: file)
    var contentLines = content.split(omittingEmptySubsequences: false, whereSeparator: \.isNewline)
    let headerLines = header.split(whereSeparator: \.isNewline)
    if contentLines.count >= headerLines.count {
        contentLines.remove(at: headerLines.count - 1)
    }
    while contentLines.count < headerLines.count {
        contentLines += [""]
    }
    for (index, headerLine) in headerLines.enumerated() {
        contentLines[index] = headerLine
    }
    try! contentLines.joined(separator: "\n").write(toFile: file, atomically: true, encoding: .utf8)
}
