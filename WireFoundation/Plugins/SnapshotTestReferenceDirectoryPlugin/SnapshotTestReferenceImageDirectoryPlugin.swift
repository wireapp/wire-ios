//
// Wire
// Copyright (C) 2024 Wire Swiss GmbH
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see http://www.gnu.org/licenses/.
//

import Foundation
import PackagePlugin

/// This plugin creates a file `SnapshotTestReferenceImageDirectory.swift` which defines a constant
/// `SnapshotTestReferenceImageDirectory` containing the path to the snapshot test reference images
/// directory, e.g. "/path/to/the/repository/WireFoundation/Tests/WireFoundationTests/Resources/ReferenceImages".
@main
struct SnapshotTestReferenceImageDirectoryPlugin: BuildToolPlugin {
    func createBuildCommands(
        context: PluginContext,
        target: Target
    ) throws -> [Command] {
        // Define the directory for generated sources
        let generatedSourcesDir = context.pluginWorkDirectory.appending("SnapshotTestReferenceDirectoryPlugin")
        try FileManager.default.createDirectory(
            atPath: generatedSourcesDir.string,
            withIntermediateDirectories: true
        )

        // Path to the generated Swift file
        let outputFile = "SnapshotTestReferenceImageDirectory.swift"

        // The directory variable to generate
        let directory = target.directory.appending(["Resources", "ReferenceImages"])

        // Contents of the generated Swift file
        let contents = """
        // This file is generated by SnapshotTestReferenceDirectoryPlugin.
        public let SnapshotTestReferenceImageDirectory = "\(directory)"
        """ + "\n"

        // Write the contents to the generated Swift file
        try contents.write(
            to: URL(fileURLWithPath: generatedSourcesDir.appending(outputFile).string),
            atomically: true,
            encoding: .utf8
        )

        return [
            // We actually just want to inform the build system about the genrated fileusing the
            // `outputFilesDirectory` argument. The executable with the provided arguments does nothing.
            .prebuildCommand(
                displayName: "Generating \(outputFile)",
                executable: .init("/bin/zsh"),
                arguments: ["-c", ""],
                outputFilesDirectory: generatedSourcesDir
            )
        ]
    }
}

// TODO: artifacts
/*
 let artifactsUrl = URL(
   fileURLWithPath: ProcessInfo.processInfo.environment["SNAPSHOT_ARTIFACTS"]
     ?? NSTemporaryDirectory(), isDirectory: true
 )
  */
